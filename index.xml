<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xu YANG&#39;s Personal Website</title>
    <link>https://jasonyangshadow.github.io/</link>
    <description>Recent content on Xu YANG&#39;s Personal Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 24 Feb 2020 13:43:41 +0900</lastBuildDate>
    
	<atom:link href="https://jasonyangshadow.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Splits Two Strings to Make Palindrome</title>
      <link>https://jasonyangshadow.github.io/posts/splits-two-strings-to-make-palindrome/</link>
      <pubDate>Sun, 11 Oct 2020 17:46:33 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/splits-two-strings-to-make-palindrome/</guid>
      <description>You are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.
When you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty.</description>
    </item>
    
    <item>
      <title>Find Servers That Handled Most Number of Requests</title>
      <link>https://jasonyangshadow.github.io/posts/find-servers-that-handled-most-number-of-requests/</link>
      <pubDate>Sun, 04 Oct 2020 03:33:24 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/find-servers-that-handled-most-number-of-requests/</guid>
      <description>https://leetcode.com/contest/biweekly-contest-36/problems/find-servers-that-handled-most-number-of-requests/
A TLE version:
class Solution: def busiestServers(self, k: int, arrival: List[int], load: List[int]) -&amp;gt; List[int]: endtime = [0]*k count = [0]*k for aidx, (a, l) in enumerate(zip(arrival, load)): serveridx = aidx % k if endtime[serveridx] &amp;lt;= a: endtime[serveridx] = a + l count[serveridx] += 1 else: nextserveridx = (serveridx + 1) % k while nextserveridx != serveridx: if endtime[nextserveridx] &amp;lt;= a: endtime[nextserveridx] = a + l count[nextserveridx] += 1 break else: nextserveridx = (nextserveridx + 1) % k max_ = max(count) ans = [] for i in range(k): if count[i] == max_: ans.</description>
    </item>
    
    <item>
      <title>Find Valid Matrix Given Row Column Sums</title>
      <link>https://jasonyangshadow.github.io/posts/find-valid-matrix-given-row-column-sums/</link>
      <pubDate>Sun, 04 Oct 2020 02:33:25 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/find-valid-matrix-given-row-column-sums/</guid>
      <description>You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.
Find any matrix of non-negative integers of size rowSum.</description>
    </item>
    
    <item>
      <title>Replace Elements With Greatest Element on the Right Side</title>
      <link>https://jasonyangshadow.github.io/posts/replace-elements-with-greatest-element-on-the-right-side/</link>
      <pubDate>Tue, 29 Sep 2020 01:13:42 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/replace-elements-with-greatest-element-on-the-right-side/</guid>
      <description>Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.
After doing so, return the array.
Example 1:
Input: arr = [17,18,5,4,6,1] Output: [18,6,6,6,1,-1]
Constraints:
1 &amp;lt;= arr.length &amp;lt;= 10^4 1 &amp;lt;= arr[i] &amp;lt;= 10^5
class Solution: def replaceElements(self, arr: List[int]) -&amp;gt; List[int]: mx = -1 for i in range(len(arr) - 1, -1, -1): arr[i], mx = mx, max(arr[i], mx) return arr </description>
    </item>
    
    <item>
      <title>N Ary Tree Postorder Traversal</title>
      <link>https://jasonyangshadow.github.io/posts/n-ary-tree-postorder-traversal/</link>
      <pubDate>Tue, 29 Sep 2020 01:03:59 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/n-ary-tree-postorder-traversal/</guid>
      <description>https://leetcode.com/problems/n-ary-tree-postorder-traversal/
&amp;#34;&amp;#34;&amp;#34; # Definition for a Node. class Node: def __init__(self, val=None, children=None): self.val = val self.children = children &amp;#34;&amp;#34;&amp;#34; class Solution: def postorder(self, root: &amp;#39;Node&amp;#39;) -&amp;gt; List[int]: res = [] if not root: return res q = [root] while q: cur = q.pop() res.append(cur.val) q += cur.children return res[::-1] &amp;#34;&amp;#34;&amp;#34; # Definition for a Node. class Node: def __init__(self, val=None, children=None): self.val = val self.children = children &amp;#34;&amp;#34;&amp;#34; class Solution: def postorder(self, root: &amp;#39;Node&amp;#39;) -&amp;gt; List[int]: res = [] if not root: return res def helper(root, res): if not root: return for x in root.</description>
    </item>
    
    <item>
      <title>Snow Flake Id</title>
      <link>https://jasonyangshadow.github.io/posts/snow-flake-id/</link>
      <pubDate>Mon, 28 Sep 2020 02:25:13 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/snow-flake-id/</guid>
      <description>public class SnowFlakeShortUrl { /** * 起始的时间戳 */ private final static long START_TIMESTAMP = 1480166465631L; /** * 每一部分占用的位数 */ private final static long SEQUENCE_BIT = 12; //序列号占用的位数 private final static long MACHINE_BIT = 5; //机器标识占用的位数 private final static</description>
    </item>
    
    <item>
      <title>Throne Inheritance</title>
      <link>https://jasonyangshadow.github.io/posts/throne-inheritance/</link>
      <pubDate>Sun, 27 Sep 2020 13:13:01 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/throne-inheritance/</guid>
      <description>https://leetcode.com/contest/weekly-contest-208/problems/throne-inheritance/
class ThroneInheritance: def __init__(self, kingName: str): self.kingName=kingName self.parentChild=defaultdict(list) self.deadMap={} self.order=[] def birth(self, parentName: str, childName: str) -&amp;gt; None: self.parentChild[parentName].append(childName) def death(self, name: str) -&amp;gt; None: self.deadMap[name]=1 def getInheritanceOrder(self) -&amp;gt; List[str]: self.order=[] self.printSuccessors(&amp;#34;king&amp;#34;) return self.order def printSuccessors(self,parent): if parent not in self.deadMap: self.order.append(parent) for i in self.parentChild[parent]: self.printSuccessors(i) # Your ThroneInheritance object will be instantiated and called as such: # obj = ThroneInheritance(kingName) # obj.birth(parentName,childName) # obj.death(name) # param_3 = obj.</description>
    </item>
    
    <item>
      <title>Producer Consumer Condition</title>
      <link>https://jasonyangshadow.github.io/posts/producer-consumer-condition/</link>
      <pubDate>Wed, 23 Sep 2020 03:19:36 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/producer-consumer-condition/</guid>
      <description>package com.company; import java.util.ArrayList; import java.util.List; import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; class Message{ final private Lock lock = new ReentrantLock(); final private Condition c1 = lock.newCondition(); final private Condition c2 = lock.newCondition(); private String message; private boolean messageState; private boolean endIt; public void viewMessage(){ lock.lock(); try{ while(!messageState){ //if message is already consumed, hang myself up @c2  System.out.println(&amp;#34;c2 wait&amp;#34;); c2.await(); } System.out.println(&amp;#34;consume: &amp;#34; + message); messageState = false; c1.signal(); } catch (InterruptedException e) { e.</description>
    </item>
    
    <item>
      <title>Split a String Inot the Max Number of Unique Substrings</title>
      <link>https://jasonyangshadow.github.io/posts/split-a-string-inot-the-max-number-of-unique-substrings/</link>
      <pubDate>Mon, 21 Sep 2020 19:08:50 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/split-a-string-inot-the-max-number-of-unique-substrings/</guid>
      <description>Given a string s, return the maximum number of unique substrings that the given string can be split into.
You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.
A substring is a contiguous sequence of characters within a string.
Example 1: Input: s = &amp;quot;ababccc&amp;quot; Output: 5 Explanation: One way to split maximally is [&#39;a&#39;, &#39;b&#39;, &#39;ab&#39;, &#39;c&#39;, &#39;cc&#39;].</description>
    </item>
    
    <item>
      <title>Unique Paths 2</title>
      <link>https://jasonyangshadow.github.io/posts/unique-paths-2/</link>
      <pubDate>Mon, 21 Sep 2020 18:45:11 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/unique-paths-2/</guid>
      <description>https://leetcode.com/problems/unique-paths-ii/
class Solution: def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -&amp;gt; int: dp = [[0]*len(obstacleGrid[0]) for _ in range(len(obstacleGrid))] r, c = len(obstacleGrid), len(obstacleGrid[0]) dp[0][0] = 1 - obstacleGrid[0][0] for i in range(1, c): dp[0][i] = dp[0][i-1]*(1 - obstacleGrid[0][i]) for i in range(1, r): dp[i][0] = dp[i-1][0]*(1 - obstacleGrid[i][0]) for i in range(1, r): for j in range(1, c): dp[i][j] = (dp[i-1][j] + dp[i][j-1])*(1 - obstacleGrid[i][j]) return dp[-1][-1] </description>
    </item>
    
  </channel>
</rss>