<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Xu YANG&#39;s Personal Website</title>
		<link>https://jasonyangshadow.win/posts/</link>
		<description>Recent content in Posts on Xu YANG&#39;s Personal Website</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 20 Aug 2020 12:55:59 +0900</lastBuildDate>
		<atom:link href="https://jasonyangshadow.win/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Split Array Largest Sum</title>
			<link>https://jasonyangshadow.win/posts/split-array-largest-sum/</link>
			<pubDate>Thu, 20 Aug 2020 12:55:59 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/split-array-largest-sum/</guid>
			<description>Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.
Note: If n is the length of array, assume the following constraints are satisfied:
1 ≤ n ≤ 1000 1 ≤ m ≤ min(50, n) Examples:
Input: nums = [7,2,5,10,8] m = 2 Output: 18 Explanation: There are four ways to split nums into two subarrays.</description>
			<content type="html"><![CDATA[<p>Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.</p>
<p>Note:
If n is the length of array, assume the following constraints are satisfied:</p>
<p>1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:</p>
<pre><code>Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.
</code></pre><p>Brute Force solution, TLE</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">splitArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>
            <span class="k">if</span> <span class="n">m</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
            
            <span class="n">result</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">nums</span><span class="p">[:</span><span class="n">i</span><span class="p">]),</span> <span class="n">helper</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">:],</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">))</span>
            
            <span class="k">return</span> <span class="n">result</span>
        
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</code></pre></div><pre><code>max_sum([7,2,5,10,8], 2) will be in the range [10, 32] - i.e. any split of the array into 2 sub-array will have sum of the sub-array between [10, 32].
Now we want to find the minimum value in this range with which we can form 2 sub-arrays. Lets do this linearly. Can we use 10? Using 10, we can form [7, 2]; [5]; [10]; [8] - 4 subarrays. We clearly need to increase the minimum value so that we can reduce from 4 subarrays.
What if we used binary search and started with mid = (10+32)/2 = 21. This gives us [7,2,5]; [10,8] - This is valid solution. Can we do better? We record 21 and reduce our range to [10, 20].
</code></pre><p>Binary Search</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">splitArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="k">def</span> <span class="nf">is_valid</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">mid</span><span class="p">):</span>
            <span class="n">cuts</span><span class="p">,</span> <span class="n">curr_sum</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
                <span class="n">curr_sum</span> <span class="o">+=</span> <span class="n">x</span>
                <span class="k">if</span> <span class="n">curr_sum</span> <span class="o">&gt;</span> <span class="n">mid</span><span class="p">:</span>
                    <span class="n">cuts</span><span class="p">,</span> <span class="n">curr_sum</span> <span class="o">=</span> <span class="n">cuts</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span>
            <span class="n">subs</span> <span class="o">=</span> <span class="n">cuts</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="c1">#check how many subarrays can we get</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">subs</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">)</span>
        
        <span class="n">l</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">nums</span><span class="p">),</span> <span class="nb">sum</span><span class="p">(</span><span class="n">nums</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="n">h</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">h</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="c1">#can we get smaller mid? </span>
            <span class="k">if</span> <span class="n">is_valid</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">mid</span><span class="p">):</span>
                <span class="n">ans</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">mid</span><span class="p">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1">#we have to make mid larger</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Palladium 2020</title>
			<link>https://jasonyangshadow.win/posts/palladium-2020/</link>
			<pubDate>Wed, 19 Aug 2020 14:05:11 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/palladium-2020/</guid>
			<description>The problem description comes from here: https://pangeran-bottor.github.io/posts/2020/03/palladium-2020/
def solution(H): N = len(H) maxl = [0]*(N + 1) maxr = [0]*(N + 1) cmax = 0 #max value from left for i in range(N): cmax = max(cmax, H[i]) maxl[i + 1] = cmax cmax = 0 #max value from the right for i in range(N-1, -1, -1): cmax = max(cmax, H[i]) maxr[i] = cmax result = float(&amp;#34;inf&amp;#34;) for i in range(N + 1): #get the minimum value of current position result = min(result, maxl[i]*i + maxr[i]*(N-i)) return result print(solution([1,1,7,6,6,6])) </description>
			<content type="html"><![CDATA[<p>The problem description comes from here:
<a href="https://pangeran-bottor.github.io/posts/2020/03/palladium-2020/">https://pangeran-bottor.github.io/posts/2020/03/palladium-2020/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">H</span><span class="p">):</span>
    <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">H</span><span class="p">)</span>
    <span class="n">maxl</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">maxr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="n">cmax</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1">#max value from left</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="n">cmax</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">cmax</span><span class="p">,</span> <span class="n">H</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">maxl</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmax</span>

    <span class="n">cmax</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1">#max value from the right</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">cmax</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">cmax</span><span class="p">,</span> <span class="n">H</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">maxr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmax</span>

    <span class="n">result</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="c1">#get the minimum value of current position</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">maxl</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="n">maxr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">i</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">result</span>

<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">]))</span>

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Magnetic Force Between Two Balls</title>
			<link>https://jasonyangshadow.win/posts/magnetic-force-between-two-balls/</link>
			<pubDate>Mon, 17 Aug 2020 01:52:55 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/magnetic-force-between-two-balls/</guid>
			<description>https://leetcode.com/problems/magnetic-force-between-two-balls/
class Solution: def maxDistance(self, position: List[int], m: int) -&amp;gt; int: n = len(position) position.sort() #calculate how many balls can be put into basket #what we need is to find proper count(d) == m #if count(d) &amp;gt; m, meaning that d is too small otherwise, d is too large. def count(d): ans, cur = 1, position[0] for i in range(1, n): if position[i] - cur &amp;gt;= d: ans += 1 cur = position[i] return ans l, r = 0, position[-1] - position[0] #binary search while l &amp;lt; r: mid = r - (r-l) // 2 if count(mid) &amp;gt;= m: l = mid else: r = mid - 1 return l </description>
			<content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/magnetic-force-between-two-balls/">https://leetcode.com/problems/magnetic-force-between-two-balls/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxDistance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>
        <span class="n">position</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
        
        <span class="c1">#calculate how many balls can be put into basket</span>
        <span class="c1">#what we need is to find proper count(d) == m</span>
        <span class="c1">#if count(d) &gt; m, meaning that d is too small otherwise, d is too large.</span>
        <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
            <span class="n">ans</span><span class="p">,</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">position</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">cur</span> <span class="o">&gt;=</span> <span class="n">d</span><span class="p">:</span>
                    <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">position</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">ans</span>
        
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">position</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        
        <span class="c1">#binary search</span>
        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">if</span> <span class="n">count</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">m</span><span class="p">:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">l</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Number of Days to Eat N Oranges</title>
			<link>https://jasonyangshadow.win/posts/minimum-number-of-days-to-eat-n-oranges/</link>
			<pubDate>Mon, 17 Aug 2020 01:03:08 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-number-of-days-to-eat-n-oranges/</guid>
			<description>There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:
Eat one orange. If the number of remaining oranges (n) is divisible by 2 then you can eat n/2 oranges. If the number of remaining oranges (n) is divisible by 3 then you can eat 2*(n/3) oranges. You can only choose one of the actions per day.
Return the minimum number of days to eat n oranges.</description>
			<content type="html"><![CDATA[<p>There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:</p>
<p>Eat one orange.
If the number of remaining oranges (n) is divisible by 2 then you can eat  n/2 oranges.
If the number of remaining oranges (n) is divisible by 3 then you can eat  2*(n/3) oranges.
You can only choose one of the actions per day.</p>
<p>Return the minimum number of days to eat n oranges.</p>
<pre><code>Example 1:

Input: n = 10
Output: 4
Explanation: You have 10 oranges.
Day 1: Eat 1 orange,  10 - 1 = 9.  
Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)
Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. 
Day 4: Eat the last orange  1 - 1  = 0.
You need at least 4 days to eat the 10 oranges.
Example 2:

Input: n = 6
Output: 3
Explanation: You have 6 oranges.
Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).
Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)
Day 3: Eat the last orange  1 - 1  = 0.
You need at least 3 days to eat the 6 oranges.
Example 3:

Input: n = 1
Output: 1
Example 4:

Input: n = 56
Output: 6
</code></pre><p>Constraints:</p>
<p>1 &lt;= n &lt;= 2*10^9</p>
<p>The trick here is that never calculating the n-1 dp value. Use n % 3  and n % 2.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minDays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="nd">@lru_cache</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">n</span>
            
            <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">min</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">helper</span><span class="p">(</span><span class="n">n</span> <span class="o">//</span> <span class="mi">3</span><span class="p">),</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">helper</span><span class="p">(</span><span class="n">n</span><span class="o">//</span><span class="mi">2</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>LRU Cache</title>
			<link>https://jasonyangshadow.win/posts/lru-cache/</link>
			<pubDate>Sat, 15 Aug 2020 03:27:08 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/lru-cache/</guid>
			<description>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</description>
			<content type="html"><![CDATA[<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.</p>
<p>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p>The cache is initialized with a positive capacity.</p>
<p>Follow up:
Could you do both operations in O(1) time complexity?</p>
<pre><code>Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
</code></pre><p>By using OrderedDict, it will be very easy to implement it.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span> <span class="k">class</span> <span class="nc">LRUCache</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">capacity</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cap</span> <span class="o">=</span> <span class="n">capacity</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">move_to_end</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
            <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">cap</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">popitem</span><span class="p">(</span><span class="n">last</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
        


<span class="c1"># Your LRUCache object will be instantiated and called as such:</span>
<span class="c1"># obj = LRUCache(capacity)</span>
<span class="c1"># param_1 = obj.get(key)</span>
<span class="c1"># obj.put(key,value)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Coin Change</title>
			<link>https://jasonyangshadow.win/posts/coin-change/</link>
			<pubDate>Fri, 14 Aug 2020 10:14:12 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/coin-change/</guid>
			<description>https://www.geeksforgeeks.org/coin-change-dp-7/
def solve(cents, target): dp = [0]*(target + 1) dp[0] = 1 #loop for all coins for i in range(len(cents)): #from current cent to target for j in range(cents[i], target + 1): #here dp[0] should be 1, as we need to add it to current value dp[j] += dp[j-cents[i]] return dp[-1] for _ in range(int(input())): input() cents = list(map(int, input().split())) target = int(input()) print(solve(cents, target)) </description>
			<content type="html"><![CDATA[<p><a href="https://www.geeksforgeeks.org/coin-change-dp-7/">https://www.geeksforgeeks.org/coin-change-dp-7/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">cents</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="c1">#loop for all coins</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cents</span><span class="p">)):</span>
        <span class="c1">#from current cent to target</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">cents</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="c1">#here dp[0] should be 1, as we need to add it to current value</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="n">cents</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
    
    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())):</span>
    <span class="nb">input</span><span class="p">()</span>
    <span class="n">cents</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
    <span class="n">target</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="n">solve</span><span class="p">(</span><span class="n">cents</span><span class="p">,</span> <span class="n">target</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Min Cost Path</title>
			<link>https://jasonyangshadow.win/posts/min-cost-path/</link>
			<pubDate>Fri, 14 Aug 2020 09:48:34 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/min-cost-path/</guid>
			<description>https://www.geeksforgeeks.org/min-cost-path-dp-6/
def solve(matrix, n): dp = [[0]*(n+1) for _ in range(n+1)] dp[0][0] = matrix[0][0] for i in range(1, n+1): dp[0][i] = dp[0][i-1] + matrix[0][i] dp[i][0] = dp[i-1][0] + matrix[i][0] for i in range(1, n+1): for j in range(1, n+1): dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) return dp[-1][-1] </description>
			<content type="html"><![CDATA[<p><a href="https://www.geeksforgeeks.org/min-cost-path-dp-6/">https://www.geeksforgeeks.org/min-cost-path-dp-6/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Edit Distance</title>
			<link>https://jasonyangshadow.win/posts/edit-distance/</link>
			<pubDate>Fri, 14 Aug 2020 08:36:57 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/edit-distance/</guid>
			<description>https://www.geeksforgeeks.org/edit-distance-dp-5/
def solve(s1, s2, l1, l2): dp = [[0]*(l2 + 1) for _ in range(l1 + 1)] for i in range(l1 + 1): for j in range(l2 + 1): #return j,as i is zero, all left items should be added if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: #different operations including remove, replace, insert dp[i][j] = 1 + min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) return dp[-1][-1] cases = int(input()) l1,l2 = list(map(int, input().</description>
			<content type="html"><![CDATA[<p><a href="https://www.geeksforgeeks.org/edit-distance-dp-5/">https://www.geeksforgeeks.org/edit-distance-dp-5/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">):</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">l2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="c1">#return j,as i is zero, all left items should be added</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span>
            <span class="k">elif</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">elif</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s2</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1">#different operations including remove, replace, insert</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        
    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    
<span class="n">cases</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">l1</span><span class="p">,</span><span class="n">l2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
<span class="n">s1</span><span class="p">,</span><span class="n">s2</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">solve</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Increasing Subsequence</title>
			<link>https://jasonyangshadow.win/posts/longest-increasing-subsequence/</link>
			<pubDate>Fri, 14 Aug 2020 07:18:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-increasing-subsequence/</guid>
			<description>Description: https://www.geeksforgeeks.org/longest-increasing-subsequence-dp-3/
def solve(arr): n = len(arr) dp = [1]*n for i in range(1, n): for j in range(0, i): #only if current item is larger than any other previous item, then update its value if arr[i] &amp;gt; arr[j] and dp[i] &amp;lt; dp[j] + 1: dp[i] = dp[j] + 1 return max(dp) cases = int(input()) for _ in range(cases): nums = int(input()) data = list(map(int, input().split())) print(solve(data)) </description>
			<content type="html"><![CDATA[<p>Description:
<a href="https://www.geeksforgeeks.org/longest-increasing-subsequence-dp-3/">https://www.geeksforgeeks.org/longest-increasing-subsequence-dp-3/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span> 
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> 
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
            <span class="c1">#only if current item is larger than any other previous item, then update its value</span>
            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">and</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span>
    

<span class="n">cases</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">cases</span><span class="p">):</span>
    <span class="n">nums</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">solve</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Cost to Cut a Stick</title>
			<link>https://jasonyangshadow.win/posts/minimum-cost-to-cut-a-stick/</link>
			<pubDate>Sun, 09 Aug 2020 21:48:00 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-cost-to-cut-a-stick/</guid>
			<description>https://leetcode.com/contest/weekly-contest-201/problems/minimum-cost-to-cut-a-stick/
The solution uses DFS+memo method, O(N^3)
class Solution: def minCost(self, n: int, cuts: List[int]) -&amp;gt; int: memo = {} def helper(l, r): res = float(&amp;#34;inf&amp;#34;) key = str(l) +&amp;#34;_&amp;#34; + str(r) if key in memo: return memo[key] for i in range(0, len(cuts)): if cuts[i] &amp;lt;= l or cuts[i] &amp;gt;= r: continue cost = r - l res = min(res, helper(l, cuts[i]) + cost + helper(cuts[i], r)) res = 0 if res == float(&amp;#34;inf&amp;#34;) else res memo[key] = res return res return helper(0, n) </description>
			<content type="html"><![CDATA[<p><a href="https://leetcode.com/contest/weekly-contest-201/problems/minimum-cost-to-cut-a-stick/">https://leetcode.com/contest/weekly-contest-201/problems/minimum-cost-to-cut-a-stick/</a></p>
<p>The solution uses DFS+memo method, O(N^3)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minCost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">cuts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
            <span class="n">res</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span>
            <span class="n">key</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">+</span><span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">cuts</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">cuts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">l</span> <span class="ow">or</span> <span class="n">cuts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">r</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="n">cost</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span>
                <span class="n">res</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">helper</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">cuts</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="n">cost</span> <span class="o">+</span> <span class="n">helper</span><span class="p">(</span><span class="n">cuts</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">r</span><span class="p">))</span>
            
            <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">res</span> <span class="o">==</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span> <span class="k">else</span> <span class="n">res</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span>
        
            <span class="k">return</span> <span class="n">res</span>
        
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximum Number of Non Overlapping Subarrays With Sum Equals Target</title>
			<link>https://jasonyangshadow.win/posts/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/</link>
			<pubDate>Sun, 09 Aug 2020 21:46:41 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/</guid>
			<description>Given an array nums and an integer target.
Return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.
Example 1: Input: nums = [1,1,1,1,1], target = 2 Output: 2 Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2). Example 2: Input: nums = [-1,3,5,1,4,2,-9], target = 6 Output: 2 Explanation: There are 3 subarrays with sum equal to 6.</description>
			<content type="html"><![CDATA[<p>Given an array nums and an integer target.</p>
<p>Return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.</p>
<pre><code>Example 1:

Input: nums = [1,1,1,1,1], target = 2
Output: 2
Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).
Example 2:

Input: nums = [-1,3,5,1,4,2,-9], target = 6
Output: 2
Explanation: There are 3 subarrays with sum equal to 6.
([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.
Example 3:

Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10
Output: 3
Example 4:

Input: nums = [0,0,0], target = 0
Output: 3
</code></pre><p>Constraints:</p>
<p>1 &lt;= nums.length &lt;= 10^5
-10^4 &lt;= nums[i] &lt;= 10^4
0 &lt;= target &lt;= 10^6</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxNonOverlapping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">presum</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">presum</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">presum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        
        <span class="n">seen</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">presum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span> <span class="o">-</span> <span class="n">target</span>
            <span class="k">if</span> <span class="n">prev</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">seen</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">seen</span><span class="p">[</span><span class="n">curr</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find Kth Bit in Nth Binary String</title>
			<link>https://jasonyangshadow.win/posts/find-kth-bit-in-nth-binary-string/</link>
			<pubDate>Sun, 09 Aug 2020 21:45:07 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-kth-bit-in-nth-binary-string/</guid>
			<description>Given two positive integers n and k, the binary string Sn is formed as follows:
S1 = &amp;ldquo;0&amp;rdquo; Si = Si-1 + &amp;ldquo;1&amp;rdquo; + reverse(invert(Si-1)) for i &amp;gt; 1 Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).
For example, the first 4 strings in the above sequence are:
S1 = &amp;ldquo;0&amp;rdquo; S2 = &amp;ldquo;011&amp;rdquo; S3 = &amp;ldquo;0111001&amp;rdquo; S4 = &amp;ldquo;011100110110001&amp;rdquo; Return the kth bit in Sn.</description>
			<content type="html"><![CDATA[<p>Given two positive integers n and k, the binary string  Sn is formed as follows:</p>
<p>S1 = &ldquo;0&rdquo;
Si = Si-1 + &ldquo;1&rdquo; + reverse(invert(Si-1)) for i &gt; 1
Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).</p>
<p>For example, the first 4 strings in the above sequence are:</p>
<p>S1 = &ldquo;0&rdquo;
S2 = &ldquo;011&rdquo;
S3 = &ldquo;0111001&rdquo;
S4 = &ldquo;011100110110001&rdquo;
Return the kth bit in Sn. It is guaranteed that k is valid for the given n.</p>
<pre><code>Example 1:

Input: n = 3, k = 1
Output: &quot;0&quot;
Explanation: S3 is &quot;0111001&quot;. The first bit is &quot;0&quot;.
Example 2:

Input: n = 4, k = 11
Output: &quot;1&quot;
Explanation: S4 is &quot;011100110110001&quot;. The 11th bit is &quot;1&quot;.
Example 3:

Input: n = 1, k = 1
Output: &quot;0&quot;
Example 4:

Input: n = 2, k = 3
Output: &quot;1&quot;
</code></pre><p>Constraints:</p>
<p>1 &lt;= n &lt;= 20
1 &lt;= k &lt;= 2n - 1</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findKthBit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        
        <span class="k">def</span> <span class="nf">nth</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">s</span>
            <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s2">&#34;&#34;</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">nth</span><span class="p">(</span><span class="s2">&#34;0&#34;</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="n">s</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="s2">&#34;1&#34;</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span><span class="p">:</span>
                        <span class="n">temp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">temp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">nth</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">nth</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">n</span><span class="p">)[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Make the String Great</title>
			<link>https://jasonyangshadow.win/posts/make-the-string-great/</link>
			<pubDate>Sun, 09 Aug 2020 21:43:42 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/make-the-string-great/</guid>
			<description>Given a string s of lower and upper case English letters.
A good string is a string which doesn&amp;rsquo;t have two adjacent characters s[i] and s[i + 1] where:
0 &amp;lt;= i &amp;lt;= s.length - 2 s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa. To make the string good, you can choose two adjacent characters that make the string bad and remove them.</description>
			<content type="html"><![CDATA[<p>Given a string s of lower and upper case English letters.</p>
<p>A good string is a string which doesn&rsquo;t have two adjacent characters s[i] and s[i + 1] where:</p>
<p>0 &lt;= i &lt;= s.length - 2
s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.
To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.</p>
<p>Return the string after making it good. The answer is guaranteed to be unique under the given constraints.</p>
<p>Notice that an empty string is also good.</p>
<pre><code>Example 1:

Input: s = &quot;leEeetcode&quot;
Output: &quot;leetcode&quot;
Explanation: In the first step, either you choose i = 1 or i = 2, both will result &quot;leEeetcode&quot; to be reduced to &quot;leetcode&quot;.
Example 2:

Input: s = &quot;abBAcC&quot;
Output: &quot;&quot;
Explanation: We have many possible scenarios, and all lead to the same answer. For example:
&quot;abBAcC&quot; --&gt; &quot;aAcC&quot; --&gt; &quot;cC&quot; --&gt; &quot;&quot;
&quot;abBAcC&quot; --&gt; &quot;abBA&quot; --&gt; &quot;aA&quot; --&gt; &quot;&quot;
Example 3:

Input: s = &quot;s&quot;
Output: &quot;s&quot;
</code></pre><p>Constraints:</p>
<p>1 &lt;= s.length &lt;= 100
s contains only lower and upper case English letters.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">makeGood</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">q</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">q</span> <span class="ow">and</span> <span class="p">((</span><span class="n">q</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isupper</span><span class="p">())</span> <span class="ow">or</span> <span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">islower</span><span class="p">())):</span>
                <span class="n">q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="k">if</span> <span class="n">q</span> <span class="k">else</span> <span class="s2">&#34;&#34;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Median of Two Sorted Arrays</title>
			<link>https://jasonyangshadow.win/posts/median-of-two-sorted-arrays/</link>
			<pubDate>Fri, 07 Aug 2020 16:30:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/median-of-two-sorted-arrays/</guid>
			<description>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2 cannot be both empty. nums1 = [1, 3] nums2 = [2] The median is 2.0 Example 2: nums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.5</description>
			<content type="html"><![CDATA[<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>You may assume nums1 and nums2 cannot be both empty.</p>
<pre><code class="language-Example" data-lang="Example">
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
</code></pre><p>Time complexity O(m + n)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMedianSortedArrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">nums2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums2</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums1</span><span class="p">)):</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nums1</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
        
        <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums2</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums2</span><span class="p">)):</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nums2</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
        
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">res</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">res</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span>
</code></pre></div><p>详细解释在此博客<a href="https://windliang.wang/2018/07/18/leetCode-4-Median-of-Two-Sorted-Arrays/">https://windliang.wang/2018/07/18/leetCode-4-Median-of-Two-Sorted-Arrays/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">findMedianSortedArrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
    <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">l</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">kth</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">l</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">kth</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">l</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">kth</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">l</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="mf">2.</span>   
    
<span class="k">def</span> <span class="nf">kth</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">a</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">b</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
    <span class="n">ia</span><span class="p">,</span> <span class="n">ib</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span> <span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">ma</span><span class="p">,</span> <span class="n">mb</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">ia</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">ib</span><span class="p">]</span>
    
    <span class="c1"># when k is bigger than the sum of a and b&#39;s median indices </span>
    <span class="k">if</span> <span class="n">ia</span> <span class="o">+</span> <span class="n">ib</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
        <span class="c1"># if a&#39;s median is bigger than b&#39;s, b&#39;s first half doesn&#39;t include k</span>
        <span class="k">if</span> <span class="n">ma</span> <span class="o">&gt;</span> <span class="n">mb</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">kth</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">ib</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:],</span> <span class="n">k</span> <span class="o">-</span> <span class="n">ib</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">kth</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">ia</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:],</span> <span class="n">b</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="n">ia</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="c1"># when k is smaller than the sum of a and b&#39;s indices</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># if a&#39;s median is bigger than b&#39;s, a&#39;s second half doesn&#39;t include k</span>
        <span class="k">if</span> <span class="n">ma</span> <span class="o">&gt;</span> <span class="n">mb</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">kth</span><span class="p">(</span><span class="n">a</span><span class="p">[:</span><span class="n">ia</span><span class="p">],</span> <span class="n">b</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">kth</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">[:</span><span class="n">ib</span><span class="p">],</span> <span class="n">k</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Operations</title>
			<link>https://jasonyangshadow.win/posts/minimum-operations/</link>
			<pubDate>Fri, 07 Aug 2020 14:54:36 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-operations/</guid>
			<description>You are given a number N. You have to find the number of operations required to reach N from 0. You have 2 operations available:
Double the number Add one to the number Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an integer N.
Output: For each test case, in a new line, print the minimum number of operations required to reach N from 0.</description>
			<content type="html"><![CDATA[<p>You are given a number N. You have to find the number of operations required to reach N from 0. You have 2 operations available:</p>
<p>Double the number
Add one to the number
Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an integer N.</p>
<p>Output:
For each test case, in a new line, print the minimum number of operations required to reach N from 0.</p>
<p>Constraints:
1&lt;=T&lt;=100
1&lt;=N&lt;=104</p>
<p>Example:
Input:
2
8
7
Input:
4
5</p>
<pre><code>Explanation:
Testcase1:
Input  : N = 8
Output : 4
0 + 1 = 1, 1 + 1 = 2, 2 * 2 = 4, 4 * 2 = 8
Testcase2:
Input  : N = 7
Output : 5
0 + 1 = 1, 1 + 1 = 2, 1 + 2 = 3, 3 * 2 = 6, 6 + 1 = 7
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#code</span>
<span class="k">def</span> <span class="nf">minCost</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">):</span>
    <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">N</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">cost</span> <span class="o">+=</span> <span class="n">P</span>
            <span class="n">N</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">N</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">if</span> <span class="n">temp</span> <span class="o">*</span> <span class="n">P</span> <span class="o">&gt;</span> <span class="n">Q</span><span class="p">:</span>
                <span class="n">cost</span> <span class="o">+=</span> <span class="n">Q</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">cost</span> <span class="o">+=</span> <span class="n">temp</span> <span class="o">*</span> <span class="n">P</span>
            <span class="n">N</span> <span class="o">=</span> <span class="n">N</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="k">return</span> <span class="n">cost</span>

<span class="n">cases</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">cases</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="n">minCost</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Spiral Matrix</title>
			<link>https://jasonyangshadow.win/posts/spiral-matrix/</link>
			<pubDate>Fri, 07 Aug 2020 02:42:05 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/spiral-matrix/</guid>
			<description>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.
Example 1: Input: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] Output: [1,2,3,6,9,8,7,4,5] Example 2: Input: [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] Output: [1,2,3,4,8,12,11,10,9,5,6,7] class Solution: def spiralOrder(self, matrix: List[List[int]]) -&amp;gt; List[int]: if not matrix: return [] m = len(matrix) n = len(matrix[0]) res = [] left,right, top,down = 0, n-1, 0, m-1 while left &amp;lt;= right and top &amp;lt;= down: for i in range(left, right + 1): res.</description>
			<content type="html"><![CDATA[<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>
<pre><code>Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
</code></pre><pre><code>Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">spiralOrder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">matrix</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        
        <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span><span class="n">down</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span> <span class="ow">and</span> <span class="n">top</span> <span class="o">&lt;=</span> <span class="n">down</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">left</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
            <span class="n">top</span> <span class="o">+=</span> <span class="mi">1</span>
            
            <span class="c1">#check validate status</span>
            <span class="k">if</span> <span class="n">top</span> <span class="o">&gt;</span> <span class="n">down</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">res</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">top</span><span class="p">,</span> <span class="n">down</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">right</span><span class="p">])</span>
            <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
            
            <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">res</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">down</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
            <span class="n">down</span> <span class="o">-=</span> <span class="mi">1</span>
            
            <span class="k">if</span> <span class="n">top</span> <span class="o">&gt;</span> <span class="n">down</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">res</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">down</span><span class="p">,</span> <span class="n">top</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">left</span><span class="p">])</span>
            <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>TOPT Password Generator</title>
			<link>https://jasonyangshadow.win/posts/topt-password-generator/</link>
			<pubDate>Thu, 06 Aug 2020 18:34:02 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/topt-password-generator/</guid>
			<description>import httplib2 import hmac import hashlib import time import sys import struct import json timestep = 30 T0 = 0 def HOTP(K, C, digits=10): K_bytes = str.encode(K) C_bytes = struct.pack(&amp;#34;&amp;gt;Q&amp;#34;, C) hmac_sha512 = hmac.new(key = K_bytes, msg=C_bytes, digestmod=hashlib.sha512).hexdigest() return Truncate(hmac_sha512)[-digits:] def Truncate(hmac_sha512): offset = int(hmac_sha512[-1], 16) binary = int(hmac_sha512[(offset *2):((offset*2)+8)], 16) &amp;amp; 0x7FFFFFFF return str(binary) def TOTP(K, digits=10, timeref = 0, timestep = 30): C = int ( time.time() - timeref ) // timestep return HOTP(K, C, digits = digits) To call this TOTP function:</description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">httplib2</span>
<span class="kn">import</span> <span class="nn">hmac</span>
<span class="kn">import</span> <span class="nn">hashlib</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">struct</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="n">timestep</span> <span class="o">=</span> <span class="mi">30</span>
<span class="n">T0</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">HOTP</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">digits</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">K_bytes</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">K</span><span class="p">)</span>
    <span class="n">C_bytes</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&#34;&gt;Q&#34;</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span>
    <span class="n">hmac_sha512</span> <span class="o">=</span> <span class="n">hmac</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="n">K_bytes</span><span class="p">,</span> <span class="n">msg</span><span class="o">=</span><span class="n">C_bytes</span><span class="p">,</span> <span class="n">digestmod</span><span class="o">=</span><span class="n">hashlib</span><span class="o">.</span><span class="n">sha512</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">Truncate</span><span class="p">(</span><span class="n">hmac_sha512</span><span class="p">)[</span><span class="o">-</span><span class="n">digits</span><span class="p">:]</span>

<span class="k">def</span> <span class="nf">Truncate</span><span class="p">(</span><span class="n">hmac_sha512</span><span class="p">):</span>
    <span class="n">offset</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">hmac_sha512</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
    <span class="n">binary</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">hmac_sha512</span><span class="p">[(</span><span class="n">offset</span> <span class="o">*</span><span class="mi">2</span><span class="p">):((</span><span class="n">offset</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">8</span><span class="p">)],</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7FFFFFFF</span>
    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">TOTP</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="n">digits</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">timeref</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">timestep</span> <span class="o">=</span> <span class="mi">30</span><span class="p">):</span>
    <span class="n">C</span> <span class="o">=</span> <span class="nb">int</span> <span class="p">(</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">timeref</span> <span class="p">)</span> <span class="o">//</span> <span class="n">timestep</span>
    <span class="k">return</span> <span class="n">HOTP</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">digits</span> <span class="o">=</span> <span class="n">digits</span><span class="p">)</span>

</code></pre></div><p>To call this TOTP function:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">TOTP</span><span class="p">(</span><span class="n">shared_secret</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">T0</span><span class="p">,</span> <span class="n">timestep</span><span class="p">)</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> 
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Palindrome Removal</title>
			<link>https://jasonyangshadow.win/posts/palindrome-removal/</link>
			<pubDate>Tue, 04 Aug 2020 12:38:17 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/palindrome-removal/</guid>
			<description>Given an integer array arr, in one move you can select a palindromic subarray arr[i], arr[i+1], &amp;hellip;, arr[j] where i &amp;lt;= j, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.
Return the minimum number of moves needed to remove all numbers from the array.</description>
			<content type="html"><![CDATA[<p>Given an integer array arr, in one move you can select a palindromic subarray arr[i], arr[i+1], &hellip;, arr[j] where i &lt;= j, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.</p>
<p>Return the minimum number of moves needed to remove all numbers from the array.</p>
<pre><code>Example 1:

Input: arr = [1,2]
Output: 2
Example 2:

Input: arr = [1,3,4,1,5]
Output: 3
Explanation: Remove [4] then remove [1,3,1] then remove [5].
</code></pre><p>Constraints:</p>
<p>1 &lt;= arr.length &lt;= 100
1 &lt;= arr[i] &lt;= 20</p>
<p>Solution comes from here: <a href="https://www.geeksforgeeks.org/minimum-steps-to-delete-a-string-after-repeated-deletion-of-palindrome-substrings/">here</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minimumMoves</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="nd">@lru_cache</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">dp</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">j</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">dp</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">res</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">dp</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]:</span>
                    <span class="n">res</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">dp</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">dp</span><span class="p">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">res</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minimumMoves</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
        
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        
        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            
            <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span>
            
            <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
                    
                    <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
                        
                    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]:</span>
                            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
                
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Frog Jump</title>
			<link>https://jasonyangshadow.win/posts/frog-jump/</link>
			<pubDate>Sun, 02 Aug 2020 17:21:05 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/frog-jump/</guid>
			<description>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.
Given a list of stones&amp;rsquo; positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.</description>
			<content type="html"><![CDATA[<p>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>
<p>Given a list of stones&rsquo; positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.</p>
<p>If the frog&rsquo;s last jump was k units, then its next jump must be either k - 1, k, or k + 1 units. Note that the frog can only jump in the forward direction.</p>
<p>Note:</p>
<p>The number of stones is ≥ 2 and is &lt; 1,100.
Each stone&rsquo;s position will be a non-negative integer &lt; 231.
The first stone&rsquo;s position is always 0.</p>
<pre><code>Example 1:

[0,1,3,5,6,8,12,17]

There are a total of 8 stones.
The first stone at the 0th unit, second stone at the 1st unit,
third stone at the 3rd unit, and so on...
The last stone at the 17th unit.

Return true. The frog can jump to the last stone by jumping 
1 unit to the 2nd stone, then 2 units to the 3rd stone, then 
2 units to the 4th stone, then 3 units to the 6th stone, 
4 units to the 7th stone, and 5 units to the 8th stone.
Example 2:

[0,1,2,3,4,8,9,11]

Return false. There is no way to jump to the last stone as 
the gap between the 5th and 6th stone is too large.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">canCross</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stones</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">memo</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="n">target</span> <span class="o">=</span> <span class="n">stones</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">stones</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">stones</span><span class="p">)</span>
    
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">stones</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="n">speed</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="n">speed</span><span class="p">)</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">memo</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        
            <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
        
            <span class="k">if</span> <span class="n">cur</span> <span class="o">&gt;</span> <span class="n">target</span> <span class="ow">or</span> <span class="n">cur</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">speed</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">cur</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stones</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        
            <span class="n">candidate</span> <span class="o">=</span> <span class="p">[</span><span class="n">speed</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">speed</span><span class="p">,</span> <span class="n">speed</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
        
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">candidate</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">cur</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="ow">in</span> <span class="n">stones</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">dfs</span><span class="p">(</span><span class="n">stones</span><span class="p">,</span> <span class="n">cur</span> <span class="o">+</span> <span class="n">c</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
                        <span class="k">return</span> <span class="bp">True</span>
        
            <span class="bp">self</span><span class="o">.</span><span class="n">memo</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">cur</span><span class="p">,</span> <span class="n">speed</span><span class="p">))</span>
            <span class="k">return</span> <span class="bp">False</span>
    
        <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">stones</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Number of Sub Arrays With Odd Num</title>
			<link>https://jasonyangshadow.win/posts/number-of-sub-arrays-with-odd-num/</link>
			<pubDate>Sun, 02 Aug 2020 15:30:43 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/number-of-sub-arrays-with-odd-num/</guid>
			<description>Given an array of integers arr. Return the number of sub-arrays with odd sum.
As the answer may grow large, the answer must be computed modulo 10^9 + 7.
Example 1: Input: arr = [1,3,5] Output: 4 Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]] All sub-arrays sum are [1,4,9,3,8,5]. Odd sums are [1,9,3,5] so the answer is 4. Example 2: Input: arr = [2,4,6] Output: 0 Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]] All sub-arrays sum are [2,6,12,4,10,6].</description>
			<content type="html"><![CDATA[<p>Given an array of integers arr. Return the number of sub-arrays with odd sum.</p>
<p>As the answer may grow large, the answer must be computed modulo 10^9 + 7.</p>
<pre><code>Example 1:

Input: arr = [1,3,5]
Output: 4
Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All sub-arrays sum are [1,4,9,3,8,5].
Odd sums are [1,9,3,5] so the answer is 4.
Example 2:

Input: arr = [2,4,6]
Output: 0
Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
All sub-arrays sum are [2,6,12,4,10,6].
All sub-arrays have even sum and the answer is 0.
Example 3:

Input: arr = [1,2,3,4,5,6,7]
Output: 16
Example 4:

Input: arr = [100,100,99,99]
Output: 4
Example 5:

Input: arr = [7]
Output: 1
 

Constraints:

1 &lt;= arr.length &lt;= 10^5
1 &lt;= arr[i] &lt;= 100
</code></pre><pre><code>Solution:
This is an elementary dynamic programming problem.
odd[i] records the number of subarray ending at arr[i] that has odd sum.
even[i] records the number of subarray ending at arr[i] that has even sum.
if arr[i + 1] is odd, odd[i + 1] = even[i] + 1 and even[i + 1] = odd[i]
if arr[i + 1] is even, odd[i + 1] = odd[i] and even[i + 1] = even[i] + 1
Since we only required the previous value in odd and even, we only need O(1) space.

Please upvote if you find this post helpful or interesting. It means a lot to me. Thx~

Complexity

Time: O(n)
Space: O(1)
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numOfSubarrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">odd</span> <span class="o">=</span> <span class="n">even</span> <span class="o">=</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
            <span class="n">even</span> <span class="o">+=</span> <span class="mi">1</span>
            
            <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">even</span><span class="p">,</span> <span class="n">odd</span> <span class="o">=</span> <span class="n">odd</span><span class="p">,</span> <span class="n">even</span>
            
            <span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="n">res</span> <span class="o">+</span> <span class="n">odd</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Hit Counter</title>
			<link>https://jasonyangshadow.win/posts/design-hit-counter/</link>
			<pubDate>Sun, 02 Aug 2020 15:21:38 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-hit-counter/</guid>
			<description>Design a hit counter which counts the number of hits received in the past 5 minutes.
Each function accepts a timestamp parameter (in seconds granularity) and you may assume that calls are being made to the system in chronological order (ie, the timestamp is monotonically increasing). You may assume that the earliest timestamp starts at 1.
It is possible that several hits arrive roughly at the same time.
Example:
HitCounter counter = new HitCounter();</description>
			<content type="html"><![CDATA[<p>Design a hit counter which counts the number of hits received in the past 5 minutes.</p>
<p>Each function accepts a timestamp parameter (in seconds granularity) and you may assume that calls are being made to the system in chronological order (ie, the timestamp is monotonically increasing). You may assume that the earliest timestamp starts at 1.</p>
<p>It is possible that several hits arrive roughly at the same time.</p>
<p>Example:</p>
<p>HitCounter counter = new HitCounter();</p>
<p>// hit at timestamp 1.
counter.hit(1);</p>
<p>// hit at timestamp 2.
counter.hit(2);</p>
<p>// hit at timestamp 3.
counter.hit(3);</p>
<p>// get hits at timestamp 4, should return 3.
counter.getHits(4);</p>
<p>// hit at timestamp 300.
counter.hit(300);</p>
<p>// get hits at timestamp 300, should return 4.
counter.getHits(300);</p>
<p>// get hits at timestamp 301, should return 3.
counter.getHits(301);
Follow up:
What if the number of hits per second could be very large? Does your design scale?</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">HitCounter</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">q</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">time</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">hit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Record a hit.
</span><span class="s2">        @param timestamp - The current timestamp (in seconds granularity).
</span><span class="s2">        &#34;&#34;&#34;</span>            
        <span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">time</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">timestamp</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">getHits</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Return the number of hits in the past 5 minutes.
</span><span class="s2">        @param timestamp - The current timestamp (in seconds granularity).
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">et</span> <span class="o">=</span> <span class="n">timestamp</span> <span class="o">-</span> <span class="mi">300</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">et</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">q</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">et</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">time</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="p">)</span>
            


<span class="c1"># Your HitCounter object will be instantiated and called as such:</span>
<span class="c1"># obj = HitCounter()</span>
<span class="c1"># obj.hit(timestamp)</span>
<span class="c1"># param_2 = obj.getHits(timestamp)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Next Greater Element 2 Version2</title>
			<link>https://jasonyangshadow.win/posts/next-greater-element-2-version2/</link>
			<pubDate>Sun, 02 Aug 2020 15:19:39 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/next-greater-element-2-version2/</guid>
			<description>Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn&amp;rsquo;t exist, output -1 for this number.
Example 1: Input: [1,2,1] Output: [2,-1,2] Explanation: The first 1&amp;rsquo;s next greater number is 2; The number 2 can&amp;rsquo;t find next greater number; The second 1&amp;rsquo;s next greater number needs to search circularly, which is also 2.</description>
			<content type="html"><![CDATA[<p>Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn&rsquo;t exist, output -1 for this number.</p>
<p>Example 1:
Input: [1,2,1]
Output: [2,-1,2]
Explanation: The first 1&rsquo;s next greater number is 2;
The number 2 can&rsquo;t find next greater number;
The second 1&rsquo;s next greater number needs to search circularly, which is also 2.
Note: The length of given array won&rsquo;t exceed 10000.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">nextGreaterElements</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="c1">#concat another nums array</span>
        <span class="n">nnums</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[:]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[:]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nnums</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nnums</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                    <span class="n">ret</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nnums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                    <span class="k">break</span>
        
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Number of Sub Arrays With Odd Sum</title>
			<link>https://jasonyangshadow.win/posts/number-of-sub-arrays-with-odd-sum/</link>
			<pubDate>Wed, 29 Jul 2020 16:43:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/number-of-sub-arrays-with-odd-sum/</guid>
			<description>Given an array of integers arr. Return the number of sub-arrays with odd sum.
As the answer may grow large, the answer must be computed modulo 10^9 + 7.
Example 1: Input: arr = [1,3,5] Output: 4 Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]] All sub-arrays sum are [1,4,9,3,8,5]. Odd sums are [1,9,3,5] so the answer is 4. Example 2: Input: arr = [2,4,6] Output: 0 Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]] All sub-arrays sum are [2,6,12,4,10,6].</description>
			<content type="html"><![CDATA[<p>Given an array of integers arr. Return the number of sub-arrays with odd sum.</p>
<p>As the answer may grow large, the answer must be computed modulo 10^9 + 7.</p>
<pre><code>Example 1:

Input: arr = [1,3,5]
Output: 4
Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All sub-arrays sum are [1,4,9,3,8,5].
Odd sums are [1,9,3,5] so the answer is 4.
Example 2:

Input: arr = [2,4,6]
Output: 0
Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
All sub-arrays sum are [2,6,12,4,10,6].
All sub-arrays have even sum and the answer is 0.
Example 3:

Input: arr = [1,2,3,4,5,6,7]
Output: 16
Example 4:

Input: arr = [100,100,99,99]
Output: 4
Example 5:

Input: arr = [7]
Output: 1
 

Constraints:

1 &lt;= arr.length &lt;= 10^5
1 &lt;= arr[i] &lt;= 100
</code></pre><p>TLE version</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numOfSubarrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">length</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
                <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">return</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                    <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="n">length</span><span class="p">])</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Number of Good Leaf Nodes Pairs</title>
			<link>https://jasonyangshadow.win/posts/number-of-good-leaf-nodes-pairs/</link>
			<pubDate>Tue, 28 Jul 2020 12:21:34 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/number-of-good-leaf-nodes-pairs/</guid>
			<description>https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/
Access the tree from bottom to up.
# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def countPairs(self, root: TreeNode, distance: int) -&amp;gt; int: self.count = 0 def dfs(root): if not root: return [] #if encountering leaf, return 1 if root.left == root.right: return [1] left = dfs(root.left) right = dfs(root.</description>
			<content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/">https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/</a></p>
<p>Access the tree from bottom to up.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.left = left</span>
<span class="c1">#         self.right = right</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">countPairs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">distance</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[]</span>
            <span class="c1">#if encountering leaf, return 1</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            <span class="c1">#check if left and right branches satisfy the requirements</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">&lt;=</span> <span class="n">distance</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">left</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">right</span><span class="p">)</span>
            <span class="c1">#return nodes whose distrances are only satisfied the distance requirements</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span> <span class="k">if</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">]</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Bulb Switcher 4</title>
			<link>https://jasonyangshadow.win/posts/bulb-switcher-4/</link>
			<pubDate>Tue, 28 Jul 2020 11:33:42 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/bulb-switcher-4/</guid>
			<description>There is a room with n bulbs, numbered from 0 to n-1, arranged in a row from left to right. Initially all the bulbs are turned off.
Your task is to obtain the configuration represented by target where target[i] is &amp;lsquo;1&amp;rsquo; if the i-th bulb is turned on and is &amp;lsquo;0&amp;rsquo; if it is turned off.
You have a switch to flip the state of the bulb, a flip operation is defined as follows:</description>
			<content type="html"><![CDATA[<p>There is a room with n bulbs, numbered from 0 to n-1, arranged in a row from left to right. Initially all the bulbs are turned off.</p>
<p>Your task is to obtain the configuration represented by target where target[i] is &lsquo;1&rsquo; if the i-th bulb is turned on and is &lsquo;0&rsquo; if it is turned off.</p>
<p>You have a switch to flip the state of the bulb, a flip operation is defined as follows:</p>
<p>Choose any bulb (index i) of your current configuration.
Flip each bulb from index i to n-1.
When any bulb is flipped it means that if it is 0 it changes to 1 and if it is 1 it changes to 0.</p>
<p>Return the minimum number of flips required to form target.</p>
<pre><code>Example 1:

Input: target = &quot;10111&quot;
Output: 3
Explanation: Initial configuration &quot;00000&quot;.
flip from the third bulb:  &quot;00000&quot; -&gt; &quot;00111&quot;
flip from the first bulb:  &quot;00111&quot; -&gt; &quot;11000&quot;
flip from the second bulb:  &quot;11000&quot; -&gt; &quot;10111&quot;
We need at least 3 flip operations to form target.
Example 2:

Input: target = &quot;101&quot;
Output: 3
Explanation: &quot;000&quot; -&gt; &quot;111&quot; -&gt; &quot;100&quot; -&gt; &quot;101&quot;.
Example 3:

Input: target = &quot;00000&quot;
Output: 0
Example 4:

Input: target = &quot;001011101&quot;
Output: 5
</code></pre><p>Constraints:</p>
<p>1 &lt;= target.length &lt;= 10^5
target[i] == &lsquo;0&rsquo; or target[i] == &lsquo;1&rsquo;</p>
<p>Flipping the original value from left to right, use status to save current bit and compare it with target ,if not the same, flip it.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minFlips</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="n">flips</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">status</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">target</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="n">status</span><span class="p">:</span>
                <span class="n">flips</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">status</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span> <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span> <span class="k">else</span> <span class="s1">&#39;1&#39;</span>
        
        <span class="k">return</span> <span class="n">flips</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Course Schedule 1</title>
			<link>https://jasonyangshadow.win/posts/course-schedule-1/</link>
			<pubDate>Sun, 26 Jul 2020 09:30:56 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/course-schedule-1/</guid>
			<description>There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?
Example 1:
Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take.</description>
			<content type="html"><![CDATA[<p>There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>
<p>Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?</p>
<p>Example 1:</p>
<p>Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take.
To take course 1 you should have finished course 0. So it is possible.
Example 2:</p>
<p>Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take.
To take course 1 you should have finished course 0, and to take course 0 you should
also have finished course 1. So it is impossible.</p>
<p>Constraints:</p>
<p>The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 &lt;= numCourses &lt;= 10^5</p>
<p>DFS search is used.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">canFinish</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">numCourses</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">prerequisites</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numCourses</span><span class="p">)]</span>
        <span class="n">visit</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">numCourses</span>
        
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">prerequisites</span><span class="p">:</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
            <span class="c1">#if course is already visited</span>
            <span class="k">if</span> <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="c1">#if course is currently being visited</span>
            <span class="k">if</span> <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            
            <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">ret</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
                <span class="c1">#if being visited now, ring detected</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">ret</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
            
            <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numCourses</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>
        
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Letter Combinations of a Phone Number</title>
			<link>https://jasonyangshadow.win/posts/letter-combinations-of-a-phone-number/</link>
			<pubDate>Sat, 25 Jul 2020 16:26:32 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/letter-combinations-of-a-phone-number/</guid>
			<description>https://leetcode.com/problems/letter-combinations-of-a-phone-number/
class Solution: def letterCombinations(self, digits: str) -&amp;gt; List[str]: data = {&amp;#39;2&amp;#39;:[&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;], &amp;#39;3&amp;#39;:[&amp;#39;d&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;f&amp;#39;], &amp;#39;4&amp;#39;:[&amp;#39;g&amp;#39;,&amp;#39;h&amp;#39;,&amp;#39;i&amp;#39;], &amp;#39;5&amp;#39;:[&amp;#39;j&amp;#39;,&amp;#39;k&amp;#39;,&amp;#39;l&amp;#39;], &amp;#39;6&amp;#39;:[&amp;#39;m&amp;#39;,&amp;#39;n&amp;#39;,&amp;#39;o&amp;#39;], &amp;#39;7&amp;#39;:[&amp;#39;p&amp;#39;,&amp;#39;q&amp;#39;,&amp;#39;r&amp;#39;,&amp;#39;s&amp;#39;], &amp;#39;8&amp;#39;:[&amp;#39;t&amp;#39;,&amp;#39;u&amp;#39;,&amp;#39;v&amp;#39;], &amp;#39;9&amp;#39;:[&amp;#39;w&amp;#39;,&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;,&amp;#39;z&amp;#39;]} memo = collections.defaultdict(list) def helper(digits): if not digits: return [] if digits in memo: return memo[digits] else: ret = [] #if only single char, return list from dict if len(digits) == 1: ret = data[digits] else: #get combinations of subset string ret = [w1 + w2 for w1 in data[digits[0]] for w2 in helper(digits[1:])] memo[digits] = ret return ret return helper(digits) </description>
			<content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">https://leetcode.com/problems/letter-combinations-of-a-phone-number/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">letterCombinations</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">digits</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;2&#39;</span><span class="p">:[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">],</span> <span class="s1">&#39;3&#39;</span><span class="p">:[</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="s1">&#39;e&#39;</span><span class="p">,</span><span class="s1">&#39;f&#39;</span><span class="p">],</span> <span class="s1">&#39;4&#39;</span><span class="p">:[</span><span class="s1">&#39;g&#39;</span><span class="p">,</span><span class="s1">&#39;h&#39;</span><span class="p">,</span><span class="s1">&#39;i&#39;</span><span class="p">],</span> <span class="s1">&#39;5&#39;</span><span class="p">:[</span><span class="s1">&#39;j&#39;</span><span class="p">,</span><span class="s1">&#39;k&#39;</span><span class="p">,</span><span class="s1">&#39;l&#39;</span><span class="p">],</span> <span class="s1">&#39;6&#39;</span><span class="p">:[</span><span class="s1">&#39;m&#39;</span><span class="p">,</span><span class="s1">&#39;n&#39;</span><span class="p">,</span><span class="s1">&#39;o&#39;</span><span class="p">],</span> <span class="s1">&#39;7&#39;</span><span class="p">:[</span><span class="s1">&#39;p&#39;</span><span class="p">,</span><span class="s1">&#39;q&#39;</span><span class="p">,</span><span class="s1">&#39;r&#39;</span><span class="p">,</span><span class="s1">&#39;s&#39;</span><span class="p">],</span> <span class="s1">&#39;8&#39;</span><span class="p">:[</span><span class="s1">&#39;t&#39;</span><span class="p">,</span><span class="s1">&#39;u&#39;</span><span class="p">,</span><span class="s1">&#39;v&#39;</span><span class="p">],</span> <span class="s1">&#39;9&#39;</span><span class="p">:[</span><span class="s1">&#39;w&#39;</span><span class="p">,</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span><span class="s1">&#39;z&#39;</span><span class="p">]}</span>
        
        <span class="n">memo</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">digits</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">digits</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[]</span>
            <span class="k">if</span> <span class="n">digits</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">digits</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="c1">#if only single char, return list from dict</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">digits</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">ret</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">digits</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                <span class="c1">#get combinations of subset string</span>
                    <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="n">w1</span> <span class="o">+</span> <span class="n">w2</span> <span class="k">for</span> <span class="n">w1</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="n">digits</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="k">for</span> <span class="n">w2</span> <span class="ow">in</span> <span class="n">helper</span><span class="p">(</span><span class="n">digits</span><span class="p">[</span><span class="mi">1</span><span class="p">:])]</span>
                <span class="n">memo</span><span class="p">[</span><span class="n">digits</span><span class="p">]</span> <span class="o">=</span> <span class="n">ret</span>
                <span class="k">return</span> <span class="n">ret</span>
        
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">digits</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Two Sum 4</title>
			<link>https://jasonyangshadow.win/posts/two-sum-4/</link>
			<pubDate>Sat, 25 Jul 2020 16:17:25 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/two-sum-4/</guid>
			<description>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.
Example 1: Input: 5 / \ 3 6 / \ \ 2 4 7 Target = 9 Output: True Example 2: Input: 5 / \ 3 6 / \ \ 2 4 7 Target = 28 Output: False # Definition for a binary tree node.</description>
			<content type="html"><![CDATA[<p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p>
<pre><code>Example 1:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True
 

Example 2:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 28

Output: False
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findTarget</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">false</span>
        
        <span class="n">bst</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">],</span> <span class="nb">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">bst</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">k</span> <span class="o">-</span> <span class="n">i</span><span class="o">.</span><span class="n">val</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
            <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">left</span><span class="p">:</span> <span class="n">bst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">right</span><span class="p">:</span> <span class="n">bst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
                
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Position of Large Groups</title>
			<link>https://jasonyangshadow.win/posts/position-of-large-groups/</link>
			<pubDate>Fri, 24 Jul 2020 17:38:03 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/position-of-large-groups/</guid>
			<description>In a string S of lowercase letters, these letters form consecutive groups of the same character.
For example, a string like S = &amp;ldquo;abbxxxxzyy&amp;rdquo; has the groups &amp;ldquo;a&amp;rdquo;, &amp;ldquo;bb&amp;rdquo;, &amp;ldquo;xxxx&amp;rdquo;, &amp;ldquo;z&amp;rdquo; and &amp;ldquo;yy&amp;rdquo;.
Call a group large if it has 3 or more characters. We would like the starting and ending positions of every large group.
The final answer should be in lexicographic order.
Example 1: Input: &amp;quot;abbxxxxzzy&amp;quot; Output: [[3,6]] Explanation: &amp;quot;xxxx&amp;quot; is the single large group with starting 3 and ending positions 6.</description>
			<content type="html"><![CDATA[<p>In a string S of lowercase letters, these letters form consecutive groups of the same character.</p>
<p>For example, a string like S = &ldquo;abbxxxxzyy&rdquo; has the groups &ldquo;a&rdquo;, &ldquo;bb&rdquo;, &ldquo;xxxx&rdquo;, &ldquo;z&rdquo; and &ldquo;yy&rdquo;.</p>
<p>Call a group large if it has 3 or more characters.  We would like the starting and ending positions of every large group.</p>
<p>The final answer should be in lexicographic order.</p>
<pre><code>Example 1:

Input: &quot;abbxxxxzzy&quot;
Output: [[3,6]]
Explanation: &quot;xxxx&quot; is the single large group with starting  3 and ending positions 6.

Example 2:

Input: &quot;abc&quot;
Output: []
Explanation: We have &quot;a&quot;,&quot;b&quot; and &quot;c&quot; but no large group.

Example 3:

Input: &quot;abcdddeeeeaabbbcd&quot;
Output: [[3,5],[6,9],[12,14]]

 

Note:  1 &lt;= S.length &lt;= 1000
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">largeGroupPositions</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">S</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">p</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">S</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span>
        
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">:</span>
                <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">:</span>
                    <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">i</span><span class="o">-</span><span class="n">c</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
        
        <span class="k">if</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span><span class="o">-</span><span class="n">c</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Vowel Spellchecker</title>
			<link>https://jasonyangshadow.win/posts/vowel-spellchecker/</link>
			<pubDate>Fri, 24 Jul 2020 17:22:27 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/vowel-spellchecker/</guid>
			<description>Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.
For a given query word, the spell checker handles two categories of spelling mistakes:
Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist. Example: wordlist = [&amp;quot;yellow&amp;quot;], query = &amp;quot;YellOw&amp;quot;: correct = &amp;quot;yellow&amp;quot; Example: wordlist = [&amp;quot;Yellow&amp;quot;], query = &amp;quot;yellow&amp;quot;: correct = &amp;quot;Yellow&amp;quot; Example: wordlist = [&amp;quot;yellow&amp;quot;], query = &amp;quot;yellow&amp;quot;: correct = &amp;quot;yellow&amp;quot; Vowel Errors: If after replacing the vowels (&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;) of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.</description>
			<content type="html"><![CDATA[<p>Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.</p>
<p>For a given query word, the spell checker handles two categories of spelling mistakes:</p>
<pre><code>Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.
    Example: wordlist = [&quot;yellow&quot;], query = &quot;YellOw&quot;: correct = &quot;yellow&quot;
    Example: wordlist = [&quot;Yellow&quot;], query = &quot;yellow&quot;: correct = &quot;Yellow&quot;
    Example: wordlist = [&quot;yellow&quot;], query = &quot;yellow&quot;: correct = &quot;yellow&quot;
Vowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.
    Example: wordlist = [&quot;YellOw&quot;], query = &quot;yollow&quot;: correct = &quot;YellOw&quot;
    Example: wordlist = [&quot;YellOw&quot;], query = &quot;yeellow&quot;: correct = &quot;&quot; (no match)
    Example: wordlist = [&quot;YellOw&quot;], query = &quot;yllw&quot;: correct = &quot;&quot; (no match)
</code></pre>
<p>In addition, the spell checker operates under the following precedence rules:</p>
<pre><code>When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.
When the query matches a word up to capitlization, you should return the first such match in the wordlist.
When the query matches a word up to vowel errors, you should return the first such match in the wordlist.
If the query has no matches in the wordlist, you should return the empty string.
</code></pre>
<p>Given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].</p>
<p>Example 1:</p>
<p>Input: wordlist = [&ldquo;KiTe&rdquo;,&ldquo;kite&rdquo;,&ldquo;hare&rdquo;,&ldquo;Hare&rdquo;], queries = [&ldquo;kite&rdquo;,&ldquo;Kite&rdquo;,&ldquo;KiTe&rdquo;,&ldquo;Hare&rdquo;,&ldquo;HARE&rdquo;,&ldquo;Hear&rdquo;,&ldquo;hear&rdquo;,&ldquo;keti&rdquo;,&ldquo;keet&rdquo;,&ldquo;keto&rdquo;]
Output: [&ldquo;kite&rdquo;,&ldquo;KiTe&rdquo;,&ldquo;KiTe&rdquo;,&ldquo;Hare&rdquo;,&ldquo;hare&rdquo;,&quot;&rdquo;,&quot;&rdquo;,&ldquo;KiTe&rdquo;,&quot;&rdquo;,&ldquo;KiTe&rdquo;]</p>
<p>Note:</p>
<pre><code>1 &lt;= wordlist.length &lt;= 5000
1 &lt;= queries.length &lt;= 5000
1 &lt;= wordlist[i].length &lt;= 7
1 &lt;= queries[i].length &lt;= 7
All strings in wordlist and queries consist only of english letters.
</code></pre>
<p>TLE version</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">spellchecker</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">wordlist</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">queries</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">v</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;e&#39;</span><span class="p">,</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="s1">&#39;o&#39;</span><span class="p">,</span><span class="s1">&#39;u&#39;</span><span class="p">])</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">wordlist</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
            <span class="c1">#return False/True and replacer</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
                    <span class="k">continue</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
                    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">item</span><span class="p">)):</span>
                        <span class="k">if</span> <span class="n">item</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">and</span> <span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">v</span> <span class="ow">or</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">v</span><span class="p">):</span>
                            <span class="k">break</span>
                        <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
                    
                    <span class="k">if</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
                        <span class="k">continue</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">return</span> <span class="bp">True</span><span class="p">,</span> <span class="n">item</span>
            
            <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="s2">&#34;&#34;</span>
            
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordlist</span><span class="p">:</span>
            <span class="n">wl</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">wl</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
                <span class="n">d</span><span class="p">[</span><span class="n">wl</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">d</span><span class="p">[</span><span class="n">wl</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">queries</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
                <span class="k">continue</span>
            <span class="n">qu</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">qu</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">qu</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1">#replace vowel</span>
                <span class="n">c</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">(),</span> <span class="n">qu</span><span class="p">)</span>
                        
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">spellchecker</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">wordlist</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">queries</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">words</span> <span class="o">=</span> <span class="p">{</span><span class="n">w</span><span class="p">:</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordlist</span><span class="p">}</span>
        <span class="n">cap</span> <span class="o">=</span> <span class="p">{</span><span class="n">w</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordlist</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]}</span>
        <span class="n">vowel</span> <span class="o">=</span> <span class="p">{</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&#34;[aeiou]&#34;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="n">w</span><span class="o">.</span><span class="n">lower</span><span class="p">()):</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordlist</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]}</span>
        
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">queries</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">q</span><span class="p">])</span>
            <span class="k">elif</span> <span class="n">q</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="n">cap</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cap</span><span class="p">[</span><span class="n">q</span><span class="o">.</span><span class="n">lower</span><span class="p">()])</span>
            <span class="k">elif</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&#34;[aeiou]&#34;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="n">q</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span> <span class="ow">in</span> <span class="n">vowel</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">vowel</span><span class="p">[</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&#34;[aeiou]&#34;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="n">q</span><span class="o">.</span><span class="n">lower</span><span class="p">())])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
                
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximum Depth of N Arry Tree</title>
			<link>https://jasonyangshadow.win/posts/maximum-depth-of-n-arry-tree/</link>
			<pubDate>Fri, 24 Jul 2020 14:28:00 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-depth-of-n-arry-tree/</guid>
			<description>https://leetcode.com/problems/maximum-depth-of-n-ary-tree/
Attention that the tree storage format is different.
&amp;#34;&amp;#34;&amp;#34; # Definition for a Node. class Node: def __init__(self, val=None, children=None): self.val = val self.children = children &amp;#34;&amp;#34;&amp;#34; class Solution: def maxDepth(self, root: &amp;#39;Node&amp;#39;) -&amp;gt; int: if not root: return 0 def helper(root, level): if not root or not root.children: return level max_val = float(&amp;#34;-inf&amp;#34;) for child in root.children: max_val = max(max_val, helper(child, level + 1)) return max_val return helper(root, 1) </description>
			<content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-depth-of-n-ary-tree/">https://leetcode.com/problems/maximum-depth-of-n-ary-tree/</a></p>
<p>Attention that the tree storage format is different.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># Definition for a Node.
</span><span class="s2">class Node:
</span><span class="s2">    def __init__(self, val=None, children=None):
</span><span class="s2">        self.val = val
</span><span class="s2">        self.children = children
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxDepth</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="s1">&#39;Node&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>

        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">level</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">level</span>
            <span class="n">max_val</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;-inf&#34;</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">root</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
                <span class="n">max_val</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_val</span><span class="p">,</span> <span class="n">helper</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">max_val</span>
        
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Snakes and Ladders</title>
			<link>https://jasonyangshadow.win/posts/snakes-and-ladders/</link>
			<pubDate>Fri, 24 Jul 2020 12:50:33 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/snakes-and-ladders/</guid>
			<description>On an N x N board, the numbers from 1 to N*N are written boustrophedonically starting from the bottom left of the board, and alternating direction each row. For example, for a 6 x 6 board, the numbers are written as follows:
You start on square 1 of the board (which is always in the last row and first column). Each move, starting from square x, consists of the following:</description>
			<content type="html"><![CDATA[<p>On an N x N board, the numbers from 1 to N*N are written boustrophedonically starting from the bottom left of the board, and alternating direction each row.  For example, for a 6 x 6 board, the numbers are written as follows:</p>
<p><img src="https://assets.leetcode.com/uploads/2018/09/23/snakes.png" alt="image"></p>
<p>You start on square 1 of the board (which is always in the last row and first column).  Each move, starting from square x, consists of the following:</p>
<pre><code>You choose a destination square S with number x+1, x+2, x+3, x+4, x+5, or x+6, provided this number is &lt;= N*N.
    (This choice simulates the result of a standard 6-sided die roll: ie., there are always at most 6 destinations, regardless of the size of the board.)
If S has a snake or ladder, you move to the destination of that snake or ladder.  Otherwise, you move to S.
</code></pre>
<p>A board square on row r and column c has a &ldquo;snake or ladder&rdquo; if board[r][c] != -1.  The destination of that snake or ladder is board[r][c].</p>
<p>Note that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue moving.  (For example, if the board is <code>[[4,-1],[-1,3]]</code>, and on the first move your destination square is <code>2</code>, then you finish your first move at <code>3</code>, because you do not continue moving to <code>4</code>.)</p>
<p>Return the least number of moves required to reach square N*N.  If it is not possible, return -1.</p>
<p>Example 1:</p>
<pre><code>Input: [
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,35,-1,-1,13,-1],
[-1,-1,-1,-1,-1,-1],
[-1,15,-1,-1,-1,-1]]
Output: 4
Explanation: 
At the beginning, you start at square 1 [at row 5, column 0].
You decide to move to square 2, and must take the ladder to square 15.
You then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.
You then decide to move to square 14, and must take the ladder to square 35.
You then decide to move to square 36, ending the game.
It can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.
</code></pre><p>Note:</p>
<pre><code>2 &lt;= board.length = board[0].length &lt;= 20
board[i][j] is between 1 and N*N or is equal to -1.
The board square with number 1 has no snake or ladder.
The board square with number N*N has no snake or ladder.
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">snakesAndLadders</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
        <span class="n">need</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span>
        <span class="n">bfs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        
        <span class="k">while</span> <span class="n">bfs</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">bfs</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">7</span><span class="p">):</span>
                <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="n">n</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span><span class="n">n</span>
                <span class="c1"># ~a is the opposite index of a </span>
                <span class="n">ntx</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="o">~</span><span class="n">a</span><span class="p">][</span><span class="n">b</span> <span class="k">if</span> <span class="n">a</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="o">~</span><span class="n">b</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">ntx</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="n">ntx</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">need</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">need</span><span class="p">:</span>
                    <span class="n">need</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">need</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                    <span class="n">bfs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Word Break</title>
			<link>https://jasonyangshadow.win/posts/word-break/</link>
			<pubDate>Fri, 24 Jul 2020 09:29:24 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/word-break/</guid>
			<description>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.
Note:
The same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words.  Example 1: Input: s = &amp;quot;leetcode&amp;quot;, wordDict = [&amp;quot;leet&amp;quot;, &amp;quot;code&amp;quot;] Output: true Explanation: Return true because &amp;quot;leetcode&amp;quot; can be segmented as &amp;quot;leet code&amp;quot;.</description>
			<content type="html"><![CDATA[<p>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p>Note:</p>
<pre><code>The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
</code></pre>
<pre><code>Example 1:

Input: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]
Output: true
Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.

Example 2:

Input: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]
Output: true
Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.
             Note that you are allowed to reuse a dictionary word.

Example 3:

Input: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]
Output: false
</code></pre><pre><code>The idea is the following:

    d is an array that contains booleans

    d[i] is True if there is a word in the dictionary that ends at ith index of s AND d is also True at the beginning of the word

Example:

    s = &quot;leetcode&quot;

    words = [&quot;leet&quot;, &quot;code&quot;]

    d[3] is True because there is &quot;leet&quot; in the dictionary that ends at 3rd index of &quot;leetcode&quot;

    d[7] is True because there is &quot;code&quot; in the dictionary that ends at the 7th index of &quot;leetcode&quot; AND d[3] is True

The result is the last index of d.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">wordBreak</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">wordDict</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordDict</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)]</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">):</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">w</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Last Stone Weight 2</title>
			<link>https://jasonyangshadow.win/posts/last-stone-weight-2/</link>
			<pubDate>Thu, 23 Jul 2020 07:21:01 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/last-stone-weight-2/</guid>
			<description>We have a collection of rocks, each rock has a positive integer weight.
Each turn, we choose any two rocks and smash them together. Suppose the stones have weights x and y with x &amp;lt;= y. The result of this smash is:
If x == y, both stones are totally destroyed; If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.</description>
			<content type="html"><![CDATA[<p>We have a collection of rocks, each rock has a positive integer weight.</p>
<p>Each turn, we choose any two rocks and smash them together.  Suppose the stones have weights x and y with x &lt;= y.  The result of this smash is:</p>
<pre><code>If x == y, both stones are totally destroyed;
If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.
</code></pre>
<p>At the end, there is at most 1 stone left.  Return the smallest possible weight of this stone (the weight is 0 if there are no stones left.)</p>
<p>Example 1:</p>
<pre><code>Input: [2,7,4,1,8,1]
Output: 1
Explanation: 
We can combine 2 and 4 to get 2 so the array converts to [2,7,1,8,1] then,
we can combine 7 and 8 to get 1 so the array converts to [2,1,1,1] then,
we can combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we can combine 1 and 1 to get 0 so the array converts to [1] then that's the optimal value.
</code></pre><p>Note:</p>
<pre><code>1 &lt;= stones.length &lt;= 30
1 &lt;= stones[i] &lt;= 100
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#this problem is converted to find that if we separate stones into two bunches, and if could find the minimum difference of these two.</span>

<span class="c1">#it can be treated as 0/1 backpack problem</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lastStoneWeightII</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stones</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">stones</span><span class="p">)</span>
        
        <span class="c1">#maximum sum of each bunch</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">s</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">stone</span> <span class="ow">in</span> <span class="n">stones</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">s</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">stone</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="n">stone</span><span class="p">]</span> <span class="o">+</span> <span class="n">stone</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">s</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="c1">#if we could find the max value up to s // 2 + 1?</span>
        <span class="c1">#if not, let us find the closest number</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Target Sum</title>
			<link>https://jasonyangshadow.win/posts/target-sum/</link>
			<pubDate>Thu, 23 Jul 2020 06:57:13 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/target-sum/</guid>
			<description>You are given a list of non-negative integers, a1, a2, &amp;hellip;, an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.
Find out how many ways to assign symbols to make sum of integers equal to target S.
Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. Output: 5 Explanation: -1+1+1+1+1 = 3 +1-1+1+1+1 = 3 +1+1-1+1+1 = 3 +1+1+1-1+1 = 3 +1+1+1+1-1 = 3 There are 5 ways to assign symbols to make the sum of nums be target 3.</description>
			<content type="html"><![CDATA[<p>You are given a list of non-negative integers, a1, a2, &hellip;, an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.</p>
<p>Find out how many ways to assign symbols to make sum of integers equal to target S.</p>
<p>Example 1:</p>
<pre><code>Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
</code></pre><p>There are 5 ways to assign symbols to make the sum of nums be target 3.</p>
<p>Constraints:</p>
<pre><code>The length of the given array is positive and will not exceed 20.
The sum of elements in the given array will not exceed 1000.
Your output answer is guaranteed to be fitted in a 32-bit integer.
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findTargetSumWays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">S</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">index</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="n">cur_sum</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
        
        <span class="k">def</span> <span class="nf">dp</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">curr_sum</span><span class="p">):</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">curr_sum</span><span class="p">)</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">memo</span><span class="p">[(</span><span class="n">index</span><span class="p">,</span> <span class="n">curr_sum</span><span class="p">)]</span>
            <span class="k">if</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">curr_sum</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>
            
            <span class="n">pos</span> <span class="o">=</span> <span class="n">dp</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">curr_sum</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
            <span class="n">neg</span> <span class="o">=</span> <span class="n">dp</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span> <span class="p">,</span><span class="n">index</span> <span class="o">-</span><span class="mi">1</span> <span class="p">,</span><span class="n">curr_sum</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
            
            <span class="n">memo</span><span class="p">[(</span><span class="n">index</span><span class="p">,</span> <span class="n">curr_sum</span><span class="p">)]</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">+</span> <span class="n">neg</span>
            <span class="k">return</span> <span class="n">pos</span> <span class="o">+</span> <span class="n">neg</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">cur_sum</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Time Based Key Value Store</title>
			<link>https://jasonyangshadow.win/posts/time-based-key-value-store/</link>
			<pubDate>Tue, 21 Jul 2020 16:56:15 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/time-based-key-value-store/</guid>
			<description>Create a timebased key-value store class TimeMap, that supports two operations.
  set(string key, string value, int timestamp)
Stores the key and value, along with the given timestamp.
  get(string key, int timestamp)
Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev &amp;lt;= timestamp. If there are multiple such values, it returns the one with the largest timestamp_prev. If there are no values, it returns the empty string (&amp;quot;&amp;quot;).</description>
			<content type="html"><![CDATA[<p>Create a timebased key-value store class TimeMap, that supports two operations.</p>
<ol>
<li>
<p>set(string key, string value, int timestamp)</p>
<p>Stores the key and value, along with the given timestamp.</p>
</li>
<li>
<p>get(string key, int timestamp)</p>
<p>Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev &lt;= timestamp.
If there are multiple such values, it returns the one with the largest timestamp_prev.
If there are no values, it returns the empty string (&quot;&quot;).</p>
</li>
</ol>
<p>Example 1:</p>
<pre><code>Input: inputs = [&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;], inputs = [[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]
Output: [null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]
Explanation:   
TimeMap kv;   
kv.set(&quot;foo&quot;, &quot;bar&quot;, 1); // store the key &quot;foo&quot; and value &quot;bar&quot; along with timestamp = 1   
kv.get(&quot;foo&quot;, 1);  // output &quot;bar&quot;   
kv.get(&quot;foo&quot;, 3); // output &quot;bar&quot; since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie &quot;bar&quot;   
kv.set(&quot;foo&quot;, &quot;bar2&quot;, 4);   
kv.get(&quot;foo&quot;, 4); // output &quot;bar2&quot;   
kv.get(&quot;foo&quot;, 5); //output &quot;bar2&quot;   
</code></pre><p>Example 2:</p>
<pre><code>Input: inputs = [&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;], inputs = [[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]
Output: [null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]
</code></pre><p>Note:</p>
<pre><code>All key/value strings are lowercase.
All key/value strings have length in the range [1, 100]
The timestamps for all TimeMap.set operations are strictly increasing.
1 &lt;= timestamp &lt;= 10^7
TimeMap.set and TimeMap.get functions will be called a total of 120000 times (combined) per test case.
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TimeMap</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        &#34;&#34;&#34;</span> 
        <span class="bp">self</span><span class="o">.</span><span class="n">time</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">[</span><span class="n">key</span><span class="p">],</span> <span class="n">timestamp</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">i</span> <span class="k">else</span> <span class="s1">&#39;&#39;</span>


<span class="c1"># Your TimeMap object will be instantiated and called as such:</span>
<span class="c1"># obj = TimeMap()</span>
<span class="c1"># obj.set(key,value,timestamp)</span>
<span class="c1"># param_2 = obj.get(key,timestamp)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Lowest Common Ancestor of a Binary Tree</title>
			<link>https://jasonyangshadow.win/posts/lowest-common-ancestor-of-a-binary-tree/</link>
			<pubDate>Tue, 21 Jul 2020 15:00:35 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/lowest-common-ancestor-of-a-binary-tree/</guid>
			<description>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Given the following binary tree: root = [3,5,1,6,2,0,8,null,null,7,4]</description>
			<content type="html"><![CDATA[<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>
<p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p>
<p>Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<p>Example 1:</p>
<p>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.</p>
<p>Example 2:</p>
<p>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p>
<p>Note:</p>
<pre><code>All of the nodes' values will be unique.
p and q are different and both values will exist in the binary tree.
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lowestCommonAncestor</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">,</span> <span class="n">q</span><span class="p">:</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="k">if</span> <span class="n">root</span> <span class="k">else</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span> <span class="ow">or</span> <span class="n">root</span> <span class="o">==</span> <span class="n">p</span> <span class="ow">or</span> <span class="n">root</span> <span class="o">==</span> <span class="n">q</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">root</span>

        <span class="c1">#find if left branch contains target </span>
        <span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lowestCommonAncestor</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
        <span class="c1">#find if right branch contains target</span>
        <span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lowestCommonAncestor</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
        
        <span class="c1">#if left and right branches contain targets =&gt; return root, as root is the LCA of left and right, otherwise, return left or right if any target is founded, else None</span>
        <span class="k">return</span> <span class="n">root</span> <span class="k">if</span> <span class="n">left</span> <span class="ow">and</span> <span class="n">right</span> <span class="k">else</span> <span class="p">(</span><span class="n">left</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">right</span> <span class="k">else</span> <span class="n">right</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Remove Linked List Elements</title>
			<link>https://jasonyangshadow.win/posts/remove-linked-list-elements/</link>
			<pubDate>Tue, 21 Jul 2020 12:52:19 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/remove-linked-list-elements/</guid>
			<description>Remove all elements from a linked list of integers that have value val.
Example:
Input: 1-&amp;gt;2-&amp;gt;6-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;6, val = 6 Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeElements(self, head: ListNode, val: int) -&amp;gt; ListNode: if not head: return head cur = head pre = None while cur: if cur.val == val: if cur == head: head = cur.</description>
			<content type="html"><![CDATA[<p>Remove all elements from a linked list of integers that have value val.</p>
<p>Example:</p>
<pre><code>Input:  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6
Output: 1-&gt;2-&gt;3-&gt;4-&gt;5
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for singly-linked list.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, val=0, next=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.next = next</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeElements</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">head</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span>
        
        <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">pre</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cur</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">val</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="n">head</span><span class="p">:</span>
                    <span class="n">head</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">pre</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">pre</span> <span class="o">=</span> <span class="n">head</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">pre</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
                        <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
        
        <span class="k">return</span> <span class="n">head</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Expression and Operators</title>
			<link>https://jasonyangshadow.win/posts/expression-and-operators/</link>
			<pubDate>Sun, 19 Jul 2020 00:23:25 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/expression-and-operators/</guid>
			<description>Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.
Example 1: Input: num = &amp;quot;123&amp;quot;, target = 6 Output: [&amp;quot;1+2+3&amp;quot;, &amp;quot;1*2*3&amp;quot;] Example 2: Input: num = &amp;quot;232&amp;quot;, target = 8 Output: [&amp;quot;2*3+2&amp;quot;, &amp;quot;2+3*2&amp;quot;] Example 3: Input: num = &amp;quot;105&amp;quot;, target = 5 Output: [&amp;quot;1*0+5&amp;quot;,&amp;quot;10-5&amp;quot;] Example 4: Input: num = &amp;quot;00&amp;quot;, target = 0 Output: [&amp;quot;0+0&amp;quot;, &amp;quot;0-0&amp;quot;, &amp;quot;0*0&amp;quot;] Example 5: Input: num = &amp;quot;3456237490&amp;quot;, target = 9191 Output: [] Constraints:</description>
			<content type="html"><![CDATA[<p>Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.</p>
<pre><code>Example 1:

Input: num = &quot;123&quot;, target = 6
Output: [&quot;1+2+3&quot;, &quot;1*2*3&quot;] 

Example 2:

Input: num = &quot;232&quot;, target = 8
Output: [&quot;2*3+2&quot;, &quot;2+3*2&quot;]

Example 3:

Input: num = &quot;105&quot;, target = 5
Output: [&quot;1*0+5&quot;,&quot;10-5&quot;]

Example 4:

Input: num = &quot;00&quot;, target = 0
Output: [&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]

Example 5:

Input: num = &quot;3456237490&quot;, target = 9191
Output: []
</code></pre><p>Constraints:</p>
<pre><code>0 &lt;= num.length &lt;= 10
num only contain digits.
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    
    <span class="k">def</span> <span class="nf">addOperators</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="ow">and</span> <span class="n">value</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>    
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
                <span class="k">return</span> 
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">tmp</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">idx</span><span class="p">:</span><span class="n">i</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span> <span class="ow">or</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">idx</span> <span class="ow">and</span> <span class="n">num</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;0&#39;</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">prev</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">walk</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">num</span><span class="p">[</span><span class="n">idx</span><span class="p">:</span><span class="n">i</span><span class="p">],</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">tmp</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">walk</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">path</span> <span class="o">+</span> <span class="s1">&#39;+&#39;</span> <span class="o">+</span> <span class="n">num</span><span class="p">[</span><span class="n">idx</span><span class="p">:</span><span class="n">i</span><span class="p">],</span> <span class="n">value</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">tmp</span><span class="p">)</span>
                        <span class="n">walk</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">path</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="n">num</span><span class="p">[</span><span class="n">idx</span><span class="p">:</span><span class="n">i</span><span class="p">],</span> <span class="n">value</span> <span class="o">-</span> <span class="n">tmp</span><span class="p">,</span> <span class="o">-</span><span class="n">tmp</span><span class="p">)</span>
                        <span class="n">walk</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">path</span> <span class="o">+</span> <span class="s1">&#39;*&#39;</span> <span class="o">+</span> <span class="n">num</span><span class="p">[</span><span class="n">idx</span><span class="p">:</span><span class="n">i</span><span class="p">],</span> <span class="n">value</span> <span class="o">-</span> <span class="n">prev</span> <span class="o">+</span> <span class="n">prev</span> <span class="o">*</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">prev</span> <span class="o">*</span><span class="n">tmp</span><span class="p">)</span>
        
        <span class="n">walk</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Print in Order</title>
			<link>https://jasonyangshadow.win/posts/print-in-order/</link>
			<pubDate>Wed, 15 Jul 2020 22:06:56 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/print-in-order/</guid>
			<description>Suppose we have a class:
public class Foo { public void first() { print(&amp;ldquo;first&amp;rdquo;); } public void second() { print(&amp;ldquo;second&amp;rdquo;); } public void third() { print(&amp;ldquo;third&amp;rdquo;); } }
The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().</description>
			<content type="html"><![CDATA[<p>Suppose we have a class:</p>
<p>public class Foo {
public void first() { print(&ldquo;first&rdquo;); }
public void second() { print(&ldquo;second&rdquo;); }
public void third() { print(&ldquo;third&rdquo;); }
}</p>
<p>The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().</p>
<p>Example 1:</p>
<pre><code>Input: [1,2,3]
Output: &quot;firstsecondthird&quot;
Explanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). &quot;firstsecondthird&quot; is the correct output.
</code></pre><p>Example 2:</p>
<pre><code>Input: [1,3,2]
Output: &quot;firstsecondthird&quot;
Explanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). &quot;firstsecondthird&quot; is the correct output.
</code></pre><p>Note:</p>
<p>We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seems to imply the ordering. The input format you see is mainly to ensure our tests&rsquo; comprehensiveness.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">threading</span>

<span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">e1</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Event</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">e2</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Event</span><span class="p">()</span>


    <span class="k">def</span> <span class="nf">first</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">printFirst</span><span class="p">:</span> <span class="s1">&#39;Callable[[], None]&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># printFirst() outputs &#34;first&#34;. Do not change or remove this line.</span>
        <span class="n">printFirst</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">e1</span><span class="o">.</span><span class="n">set</span><span class="p">()</span>


    <span class="k">def</span> <span class="nf">second</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">printSecond</span><span class="p">:</span> <span class="s1">&#39;Callable[[], None]&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        
        <span class="c1"># printSecond() outputs &#34;second&#34;. Do not change or remove this line.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">e1</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
        <span class="n">printSecond</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">e2</span><span class="o">.</span><span class="n">set</span><span class="p">()</span>


    <span class="k">def</span> <span class="nf">third</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">printThird</span><span class="p">:</span> <span class="s1">&#39;Callable[[], None]&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        
        <span class="c1"># printThird() outputs &#34;third&#34;. Do not change or remove this line.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">e2</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
        <span class="n">printThird</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>String Compression Algorithms</title>
			<link>https://jasonyangshadow.win/posts/string-compression-algorithms/</link>
			<pubDate>Wed, 15 Jul 2020 01:38:03 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/string-compression-algorithms/</guid>
			<description>https://www.nowcoder.com/questionTerminal/c27561e5b7e0441493adb9a54071888d
import sys def decode(s): i = 0 x, y, z = -1, -1, -1 while i &amp;lt; len(s): if s[i] == &amp;#39;[&amp;#39;: x = i elif s[i] == &amp;#39;|&amp;#39;: y = i elif s[i] == &amp;#39;]&amp;#39;: z = i break i += 1 if x != -1 and y != -1 and z != -1: ss = s[y+1:z] * int(s[x+1:y]) s = s[:x] + ss + s[z+1:] return decode(s) return s for line in sys.</description>
			<content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/questionTerminal/c27561e5b7e0441493adb9a54071888d">https://www.nowcoder.com/questionTerminal/c27561e5b7e0441493adb9a54071888d</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>

    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;[&#39;</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">elif</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;|&#39;</span><span class="p">:</span>
            <span class="n">y</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">elif</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;]&#39;</span><span class="p">:</span>
            <span class="n">z</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">break</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">z</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
        <span class="n">ss</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">z</span><span class="p">]</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">y</span><span class="p">])</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">x</span><span class="p">]</span> <span class="o">+</span> <span class="n">ss</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">z</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
        <span class="k">return</span> <span class="n">decode</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">decode</span><span class="p">(</span><span class="n">line</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Search in 2 Dim Array</title>
			<link>https://jasonyangshadow.win/posts/search-in-2-dim-array/</link>
			<pubDate>Wed, 15 Jul 2020 00:51:36 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/search-in-2-dim-array/</guid>
			<description>https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/ 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和</description>
			<content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/</a><br>
在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>示例:</p>
<p>现有矩阵 matrix 如下：</p>
<pre><code>[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
</code></pre><p>给定 target = 5，返回 true。</p>
<p>给定 target = 20，返回 false。</p>
<p>限制：</p>
<p>0 &lt;= n &lt;= 1000</p>
<p>0 &lt;= m &lt;= 1000</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findNumberIn2DArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">matrix</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">r</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">elif</span> <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Previous Permutation With One Swap</title>
			<link>https://jasonyangshadow.win/posts/previous-permutation-with-one-swap/</link>
			<pubDate>Tue, 14 Jul 2020 23:03:57 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/previous-permutation-with-one-swap/</guid>
			<description>Given an array A of positive integers (not necessarily distinct), return the lexicographically largest permutation that is smaller than A, that can be made with one swap (A swap exchanges the positions of two numbers A[i] and A[j]). If it cannot be done, then return the same array.
Example 1: Input: [3,2,1] Output: [3,1,2] Explanation: Swapping 2 and 1. Example 2: Input: [1,1,5] Output: [1,1,5] Explanation: This is already the smallest permutation.</description>
			<content type="html"><![CDATA[<p>Given an array A of positive integers (not necessarily distinct), return the lexicographically largest permutation that is smaller than A, that can be made with one swap (A swap exchanges the positions of two numbers A[i] and A[j]).  If it cannot be done, then return the same array.</p>
<pre><code>Example 1:

Input: [3,2,1]
Output: [3,1,2]
Explanation: Swapping 2 and 1.

Example 2:

Input: [1,1,5]
Output: [1,1,5]
Explanation: This is already the smallest permutation.

Example 3:

Input: [1,9,4,6,7]
Output: [1,7,4,6,9]
Explanation: Swapping 9 and 7.

Example 4:

Input: [3,1,1,3]
Output: [1,3,1,3]
Explanation: Swapping 1 and 3.
</code></pre><p>Note:</p>
<pre><code>1 &lt;= A.length &lt;= 10000
1 &lt;= A[i] &lt;= 10000
</code></pre>
<p>Solutions:<br>
Start from end of list towards the beginning. Find the index where A[i] &gt; A[i+1]. Stop there. (If you don&rsquo;t get this condition and reach till the beginning of string, given i/p is already biggest lexical permutation that you can get.)
Now reiterate from the end, and find an index j such that A(i) &gt; A(j). You will surely find such index.
Now check if the same value at index j is available somewhere before.
e.g [3,1,1,3]
We found 1 at index 2. we continue to find another 1 somewhere before in the list. And then swap the values of 3 at index 0 and 1 at index 1.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">prevPermOpt1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="c1">#find fisrt idx where A[i] &gt; A[i+1]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="k">break</span>
        
        <span class="c1">#if already an increasing sequences</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
            <span class="k">return</span> <span class="n">A</span>
        
        <span class="n">store</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="c1">#find first j where A[j] is smaller than A[i]</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">store</span> <span class="o">=</span> <span class="n">j</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
                <span class="c1">#find the first occurence p</span>
                <span class="k">while</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">p</span><span class="p">]</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                        <span class="n">store</span> <span class="o">=</span> <span class="n">p</span>
                    <span class="n">p</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="k">break</span>
        
        <span class="k">if</span> <span class="n">store</span><span class="p">:</span>
            <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">store</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">store</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="n">A</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximum Difference Between Node and Ancestor</title>
			<link>https://jasonyangshadow.win/posts/maximum-difference-between-node-and-ancestor/</link>
			<pubDate>Tue, 14 Jul 2020 22:58:34 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-difference-between-node-and-ancestor/</guid>
			<description>Given the root of a binary tree, find the maximum value V for which there exists different nodes A and B where V = |A.val - B.val| and A is an ancestor of B.
(A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.)
Example 1:
Input: [8,3,10,1,6,null,14,null,null,4,7,13] Output: 7 Explanation: We have various ancestor-node differences, some of which are given below : |8 - 3| = 5 |3 - 7| = 4 |8 - 1| = 7 |10 - 13| = 3 Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.</description>
			<content type="html"><![CDATA[<p>Given the root of a binary tree, find the maximum value V for which there exists different nodes A and B where V = |A.val - B.val| and A is an ancestor of B.</p>
<p>(A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.)</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/09/09/2whqcep.jpg" alt="image"></p>
<pre><code>Input: [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: 
We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
</code></pre><p>Note:</p>
<pre><code>The number of nodes in the tree is between 2 and 5000.
Each node will have value between 0 and 100000.
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.left = left</span>
<span class="c1">#         self.right = right</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxAncestorDiff</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">parents</span><span class="p">,</span> <span class="n">max_val</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">max_val</span>
            <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">parents</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">max_val</span> <span class="o">&lt;</span> <span class="nb">abs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">-</span> <span class="n">p</span><span class="p">):</span>
                    <span class="n">max_val</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">-</span> <span class="n">p</span><span class="p">)</span>
            <span class="n">parents</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">parents</span><span class="p">,</span> <span class="n">max_val</span><span class="p">)</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">parents</span><span class="p">,</span> <span class="n">max_val</span><span class="p">)</span>
            <span class="n">parents</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">parents</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">max_val</span><span class="p">)</span>
        
        <span class="n">parent</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;-inf&#34;</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Geohash Code</title>
			<link>https://jasonyangshadow.win/posts/geohash-code/</link>
			<pubDate>Tue, 14 Jul 2020 02:52:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/geohash-code/</guid>
			<description>geohash编码：geohash常用于将二维的经纬度转换为字符串，分为两步：第一步是经纬度的二进制编码，第二步是base32转码。 此题考察</description>
			<content type="html"><![CDATA[<p>geohash编码：geohash常用于将二维的经纬度转换为字符串，分为两步：第一步是经纬度的二进制编码，第二步是base32转码。
此题考察纬度的二进制编码：算法对纬度[-90, 90]通过二分法进行无限逼近（取决于所需精度，本题精度为6）。注意，本题进行二分法逼近过程中只采用向下取整来进行二分，针对二分中间值属于右区间。算法举例如下： 针对纬度为80进行二进制编码过程：</p>
<ol>
<li>区间[-90, 90]进行二分为[-90, 0),[0, 90]，成为左右区间，可以确定80为右区间，标记为1；</li>
<li>针对上一步的右区间[0, 90]进行二分为[0, 45),[45, 90]，可以确定80是右区间，标记为1；</li>
<li>针对[45, 90]进行二分为[45, 67),[67,90],可以确定80为右区间，标记为1；</li>
<li>针对[67,90]进行二分为[67, 78),[78,90]，可以确定80为右区间，标记为1；</li>
<li>针对[78, 90]进行二分为[78, 84),[84, 90]，可以确定80为左区间，标记为0；</li>
<li>针对[78, 84)进行二分为[78, 81), [81, 84)，可以确定80为左区间，标记为0；
输入描述:</li>
</ol>
<p>输入包括一个整数n,(-90 ≤ n ≤ 90)</p>
<p>输出描述:</p>
<p>输出二进制编码</p>
<p>示例1
输入
复制</p>
<p>80</p>
<p>输出
复制</p>
<p>111100</p>
<p>int向0取整， //向下取整</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">bi</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ret</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="o">==</span> <span class="mi">6</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">ret</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="p">:</span>
        <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>
        <span class="n">bi</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">mid</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">:</span>
        <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
        <span class="n">bi</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">high</span><span class="p">,</span> <span class="n">n</span> <span class="p">,</span><span class="n">ret</span><span class="p">)</span>

<span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">bi</span><span class="p">(</span><span class="o">-</span><span class="mi">90</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Coins Combinations</title>
			<link>https://jasonyangshadow.win/posts/coins-combinations/</link>
			<pubDate>Tue, 14 Jul 2020 01:04:11 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/coins-combinations/</guid>
			<description>小Q十分富有，拥有非常多的硬币，小Q拥有的硬币是有规律的，对于所有的非负整数K，小Q恰好各有两个面值为2^K的硬币，所以小Q拥有的硬币就是1</description>
			<content type="html"><![CDATA[<p>小Q十分富有，拥有非常多的硬币，小Q拥有的硬币是有规律的，对于所有的非负整数K，小Q恰好各有两个面值为2^K的硬币，所以小Q拥有的硬币就是1,1,2,2,4,4,8,8,…。小Q有一天去商店购买东西需要支付n元钱，小Q想知道有多少种方案从他拥有的硬币中选取一些拼凑起来恰好是n元（如果两种方案某个面值的硬币选取的个数不一样就考虑为不一样的方案）。</p>
<p>输入描述:</p>
<p>输入包括一个整数n(1≤n≤10^18)，表示小Q需要支付多少钱。注意n的范围。</p>
<p>输出描述:</p>
<p>输出一个整数，表示小Q可以拼凑出n元钱放的方案数。</p>
<p>示例1
输入
复制</p>
<p>6</p>
<p>输出
复制</p>
<p>3</p>
<p>解题思路：</p>
<pre><code>链接：https://www.nowcoder.com/questionTerminal/2479839aa61e44f39aa3268160650e17?f=discussion
来源：牛客网

n如果是奇数，说明必须只用一个1块钱,剩下只能用2 4 8,那么问题转移成了状态转移f(n) = f(n&gt;&gt;1),
此时2,4,8可以看做1,2,4,两者问题等价
如果n是偶数，那么可以分为两种情况，使用两个1块钱，或者不使用1块钱；两个一块钱的话,右移一位，需要减1
如果不使用的话还是右移一位。后面的问题也与1块钱无关，递归。再用一个map存储中间结果，解决重复性问题。
f(n) = f(n&gt;&gt;1) + f((n&gt;&gt;1) -1) 
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>

<span class="n">dp</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span>
<span class="k">def</span> <span class="nf">coin</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">dp</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
    <span class="k">elif</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">coin</span><span class="p">(</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">coin</span><span class="p">(</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">coin</span><span class="p">((</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
    <span class="k">return</span> <span class="n">count</span>
<span class="k">print</span><span class="p">(</span><span class="n">coin</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Major Element 2</title>
			<link>https://jasonyangshadow.win/posts/major-element-2/</link>
			<pubDate>Mon, 13 Jul 2020 23:48:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/major-element-2/</guid>
			<description>Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
Note: The algorithm should run in linear time and in O(1) space.
Example 1:
Input: [3,2,3] Output: [3] Example 2:
Input: [1,1,1,3,3,2,2,2] Output: [1,2] import collections class Solution: def majorityElement(self, nums: List[int]) -&amp;gt; List[int]: ctr = collections.Counter() for n in nums: ctr[n] += 1 if len(ctr) == 3: #remove 1 time of k different elements ctr -= collections.</description>
			<content type="html"><![CDATA[<p>Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.</p>
<p>Note: The algorithm should run in linear time and in O(1) space.</p>
<p>Example 1:</p>
<pre><code>Input: [3,2,3]
Output: [3]
</code></pre><p>Example 2:</p>
<pre><code>Input: [1,1,1,3,3,2,2,2]
Output: [1,2]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">collections</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">majorityElement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">ctr</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="n">ctr</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ctr</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
                <span class="c1">#remove 1 time of k different elements</span>
                <span class="n">ctr</span> <span class="o">-=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">ctr</span><span class="p">))</span>
        <span class="c1">#recount every item in ctr</span>
        <span class="n">ctr</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nums</span> <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">ctr</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">ctr</span> <span class="k">if</span> <span class="n">ctr</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>String Compression</title>
			<link>https://jasonyangshadow.win/posts/string-compression/</link>
			<pubDate>Fri, 10 Jul 2020 22:24:06 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/string-compression/</guid>
			<description>Given an array of characters, compress it in-place.
The length after compression must always be smaller than or equal to the original array.
Every element of the array should be a character (not int) of length 1.
After you are done modifying the input array in-place, return the new length of the array.
Follow up: Could you solve it using only O(1) extra space?
Example 1:
Input: [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;] Output: Return 6, and the first 6 characters of the input array should be: [&amp;quot;a&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;3&amp;quot;] Explanation: &amp;quot;aa&amp;quot; is replaced by &amp;quot;a2&amp;quot;.</description>
			<content type="html"><![CDATA[<p>Given an array of characters, compress it in-place.</p>
<p>The length after compression must always be smaller than or equal to the original array.</p>
<p>Every element of the array should be a character (not int) of length 1.</p>
<p>After you are done modifying the input array in-place, return the new length of the array.</p>
<p>Follow up:
Could you solve it using only O(1) extra space?</p>
<p>Example 1:</p>
<pre><code>Input:
[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]

Output:
Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]

Explanation:
&quot;aa&quot; is replaced by &quot;a2&quot;. &quot;bb&quot; is replaced by &quot;b2&quot;. &quot;ccc&quot; is replaced by &quot;c3&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input:
[&quot;a&quot;]

Output:
Return 1, and the first 1 characters of the input array should be: [&quot;a&quot;]

Explanation:
Nothing is replaced.
</code></pre><p>Example 3:</p>
<pre><code>Input:
[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]

Output:
Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].

Explanation:
Since the character &quot;a&quot; does not repeat, it is not compressed. &quot;bbbbbbbbbbbb&quot; is replaced by &quot;b12&quot;.
Notice each digit has it's own entry in the array.
</code></pre><p>Note:</p>
<pre><code>All characters have an ASCII value in [35, 126].
1 &lt;= len(chars) &lt;= 1000.
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">compress</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">chars</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">st</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">chars</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span> <span class="ow">and</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">chars</span><span class="p">[</span><span class="n">st</span><span class="p">]:</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">-</span> <span class="n">st</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">st</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">chars</span><span class="p">[</span><span class="n">st</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">st</span><span class="p">)</span>
                <span class="n">st</span> <span class="o">=</span> <span class="n">st</span> <span class="o">+</span> <span class="mi">2</span>
                <span class="n">i</span> <span class="o">=</span> <span class="n">st</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Climbing Stairs</title>
			<link>https://jasonyangshadow.win/posts/climbing-stairs/</link>
			<pubDate>Wed, 08 Jul 2020 22:58:05 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/climbing-stairs/</guid>
			<description>You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Example 1: Input: 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Example 2: Input: 3 Output: 3 Explanation: There are three ways to climb to the top.</description>
			<content type="html"><![CDATA[<p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<pre><code>Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

 

Constraints:

    1 &lt;= n &lt;= 45
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">climbStairs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">2</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>
        <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">res</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
            
        <span class="k">return</span> <span class="n">res</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Best Time to Buy and Sell Stock 2</title>
			<link>https://jasonyangshadow.win/posts/best-time-to-buy-and-sell-stock-2/</link>
			<pubDate>Wed, 08 Jul 2020 21:46:08 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/best-time-to-buy-and-sell-stock-2/</guid>
			<description>Say you have an array prices for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</description>
			<content type="html"><![CDATA[<p>Say you have an array prices for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>
<p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<pre><code>Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.

Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.

Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

 

Constraints:

    1 &lt;= prices.length &lt;= 3 * 10 ^ 4
    0 &lt;= prices[i] &lt;= 10 ^ 4
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prices</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">res</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="p">(</span><span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximum Subarray</title>
			<link>https://jasonyangshadow.win/posts/maximum-subarray/</link>
			<pubDate>Wed, 08 Jul 2020 20:30:26 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-subarray/</guid>
			<description>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example:
Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
class Solution: def maxSubArray(self, nums: List[int]) -&amp;gt; int: res = float(&amp;#34;-inf&amp;#34;) ret = 0 for num in nums: ret = ret + num if res &amp;lt; ret: res = ret if ret &amp;lt; 0: ret = 0 return res </description>
			<content type="html"><![CDATA[<p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p>Example:</p>
<pre><code>Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
</code></pre><p>Follow up:</p>
<p>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;-inf&#34;</span><span class="p">)</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span> <span class="o">+</span> <span class="n">num</span>
            
            <span class="k">if</span> <span class="n">res</span> <span class="o">&lt;</span> <span class="n">ret</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">ret</span>
            
            <span class="k">if</span> <span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span>
        
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Best Time to Buy and Sell Stock</title>
			<link>https://jasonyangshadow.win/posts/best-time-to-buy-and-sell-stock/</link>
			<pubDate>Wed, 08 Jul 2020 16:24:15 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/best-time-to-buy-and-sell-stock/</guid>
			<description>Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.
Note that you cannot sell a stock before you buy one.
Example 1: Input: [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</description>
			<content type="html"><![CDATA[<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Note that you cannot sell a stock before you buy one.</p>
<pre><code>Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.

Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prices</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">res</span>
        
        <span class="n">mi</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">prices</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="n">mi</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">p</span> <span class="o">-</span> <span class="n">mi</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">mi</span><span class="p">:</span>
                <span class="n">mi</span> <span class="o">=</span> <span class="n">p</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Paint House</title>
			<link>https://jasonyangshadow.win/posts/paint-house/</link>
			<pubDate>Wed, 08 Jul 2020 16:13:55 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/paint-house/</guid>
			<description>There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.
The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on&amp;hellip; Find the minimum cost to paint all houses.</description>
			<content type="html"><![CDATA[<p>There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>
<p>The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on&hellip; Find the minimum cost to paint all houses.</p>
<p>Note:
All costs are positive integers.</p>
<p>Example:</p>
<pre><code>Input: [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. 
             Minimum cost: 2 + 5 + 3 = 10.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minCost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">costs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">costs</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">costs</span><span class="p">)):</span>
            <span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">min</span><span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span>
            <span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">min</span><span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span>
            <span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">min</span><span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">costs</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">costs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">costs</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">costs</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">costs</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">costs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Prison Cells After N Days</title>
			<link>https://jasonyangshadow.win/posts/prison-cells-after-n-days/</link>
			<pubDate>Mon, 06 Jul 2020 13:10:32 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/prison-cells-after-n-days/</guid>
			<description>There are 8 prison cells in a row, and each cell is either occupied or vacant.
Each day, whether the cell is occupied or vacant changes according to the following rules:
If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. Otherwise, it becomes vacant.  (Note that because the prison is a row, the first and the last cells in the row can&amp;rsquo;t have two adjacent neighbors.</description>
			<content type="html"><![CDATA[<p>There are 8 prison cells in a row, and each cell is either occupied or vacant.</p>
<p>Each day, whether the cell is occupied or vacant changes according to the following rules:</p>
<pre><code>If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
Otherwise, it becomes vacant.
</code></pre>
<p>(Note that because the prison is a row, the first and the last cells in the row can&rsquo;t have two adjacent neighbors.)</p>
<p>We describe the current state of the prison in the following way: cells[i] == 1 if the i-th cell is occupied, else cells[i] == 0.</p>
<p>Given the initial state of the prison, return the state of the prison after N days (and N such changes described above.)</p>
<p>Example 1:</p>
<pre><code>Input: cells = [0,1,0,1,1,0,0,1], N = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: 
The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]
</code></pre><p>Example 2:</p>
<pre><code>Input: cells = [1,0,0,1,0,0,1,0], N = 1000000000
Output: [0,0,1,1,1,1,1,0]
</code></pre><p>Note:</p>
<pre><code>cells.length == 8
cells[i] is in {0, 1}
1 &lt;= N &lt;= 10^9
</code></pre>
<p>First solution is TLE one.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">prisonAfterNDays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cells</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">copy_cells</span> <span class="o">=</span> <span class="n">cells</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="k">while</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">N</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">cells</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">cells</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">copy_cells</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">copy_cells</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">copy_cells</span> <span class="o">=</span> <span class="n">cells</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        
        <span class="k">return</span> <span class="n">cells</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">prisonAfterNDays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cells</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="c1">#get next loop              </span>
        <span class="k">def</span> <span class="nf">nextday</span><span class="p">(</span><span class="n">cells</span><span class="p">):</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">cells</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]))</span>
            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">ret</span>
        
        <span class="n">seen</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">forward</span> <span class="o">=</span> <span class="bp">False</span>
        
        <span class="c1">#seen is used for checking repeated patterns, as there will be a loop for cells, after x days, repeated sequence will occur</span>
        <span class="k">while</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">forward</span><span class="p">:</span>
                <span class="c1">#dict accepts tuple, number, string as key</span>
                <span class="n">state_key</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">cells</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">state_key</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                    <span class="c1">#skip the next N times</span>
                    <span class="n">N</span> <span class="o">%=</span> <span class="n">seen</span><span class="p">[</span><span class="n">state_key</span><span class="p">]</span> <span class="o">-</span> <span class="n">N</span>
                    <span class="n">forward</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">seen</span><span class="p">[</span><span class="n">state_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">N</span>
            
            <span class="k">if</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">N</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">next_cells</span> <span class="o">=</span> <span class="n">nextday</span><span class="p">(</span><span class="n">cells</span><span class="p">)</span>
                <span class="n">cells</span> <span class="o">=</span> <span class="n">next_cells</span>
        
        <span class="k">return</span> <span class="n">cells</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Tree Level Order Traversal 2</title>
			<link>https://jasonyangshadow.win/posts/binary-tree-level-order-traversal-2/</link>
			<pubDate>Sat, 04 Jul 2020 21:00:21 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-tree-level-order-traversal-2/</guid>
			<description>Given a binary tree, return the bottom-up level order traversal of its nodes&amp;rsquo; values. (ie, from left to right, level by level from leaf to root).
For example:
Given binary tree [3,9,20,null,null,15,7], 3 / \ 9 20 / \ 15 7 return its bottom-up level order traversal as: [ [15,7], [9,20], [3] ] # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.</description>
			<content type="html"><![CDATA[<p>Given a binary tree, return the bottom-up level order traversal of its nodes&rsquo; values. (ie, from left to right, level by level from leaf to root).</p>
<p>For example:</p>
<pre><code>Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.left = left</span>
<span class="c1">#         self.right = right</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">levelOrderBottom</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">bfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
        <span class="n">res</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ret</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
        <span class="n">res</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">res</span>
        
    
    <span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">ret</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span> 
        <span class="k">if</span> <span class="n">level</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">ret</span><span class="p">:</span>
            <span class="n">ret</span><span class="p">[</span><span class="n">level</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ret</span><span class="p">[</span><span class="n">level</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">bfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">bfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Arranging Coins</title>
			<link>https://jasonyangshadow.win/posts/arranging-coins/</link>
			<pubDate>Sat, 04 Jul 2020 20:58:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/arranging-coins/</guid>
			<description>You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.
Given n, find the total number of full staircase rows that can be formed.
n is a non-negative integer and fits within the range of a 32-bit signed integer.
Example 1:
n = 5 The coins can form the following rows: ¤ ¤ ¤ ¤ ¤ Because the 3rd row is incomplete, we return 2.</description>
			<content type="html"><![CDATA[<p>You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.</p>
<p>Given n, find the total number of full staircase rows that can be formed.</p>
<p>n is a non-negative integer and fits within the range of a 32-bit signed integer.</p>
<p>Example 1:</p>
<pre><code>n = 5

The coins can form the following rows:
¤
¤ ¤
¤ ¤
</code></pre><p>Because the 3rd row is incomplete, we return 2.</p>
<p>Example 2:</p>
<pre><code>n = 8

The coins can form the following rows:
¤
¤ ¤
¤ ¤ ¤
¤ ¤
</code></pre><p>Because the 4th row is incomplete, we return 3.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">arrangeCoins</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">i</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>
        <span class="k">return</span> <span class="n">count</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Closet Binary Search Tree Value 2</title>
			<link>https://jasonyangshadow.win/posts/closet-binary-search-tree-value-2/</link>
			<pubDate>Thu, 02 Jul 2020 16:58:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/closet-binary-search-tree-value-2/</guid>
			<description>Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.
Note:
Given target value is a floating point. You may assume k is always valid, that is: k ≤ total nodes. You are guaranteed to have only one unique set of k values in the BST that are closest to the target.  Example:
Input: root = [4,2,5,1,3], target = 3.</description>
			<content type="html"><![CDATA[<p>Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.</p>
<p>Note:</p>
<pre><code>Given target value is a floating point.
You may assume k is always valid, that is: k ≤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
</code></pre>
<p>Example:</p>
<pre><code>Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]
</code></pre><p>Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.left = left</span>
<span class="c1">#         self.right = right</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">closestKValues</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">pre</span><span class="p">,</span> <span class="n">suc</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
        
        <span class="c1">#get all items smaller than target</span>
        <span class="c1">#increase order</span>
        <span class="k">def</span> <span class="nf">getpre</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">ret</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">getpre</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">getpre</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
            
        <span class="c1">#get all items larger than target</span>
        <span class="c1">#decrease order</span>
        <span class="k">def</span> <span class="nf">getsuc</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">ret</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">getsuc</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">getsuc</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
            
        <span class="n">getpre</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">pre</span><span class="p">)</span>
        <span class="n">getsuc</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">suc</span><span class="p">)</span>
        
        <span class="c1">#select k items from pre and suc</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">pre</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">suc</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="k">elif</span> <span class="ow">not</span> <span class="n">suc</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pre</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pre</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">pre</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">target</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">abs</span><span class="p">(</span><span class="n">suc</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">target</span><span class="p">)</span> <span class="k">else</span> <span class="n">suc</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span>
                
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Closet Binary Search Tree Value</title>
			<link>https://jasonyangshadow.win/posts/closet-binary-search-tree-value/</link>
			<pubDate>Thu, 02 Jul 2020 15:23:20 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/closet-binary-search-tree-value/</guid>
			<description>Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.
Note:
Given target value is a floating point. You are guaranteed to have only one unique value in the BST that is closest to the target.  Example:
Input: root = [4,2,5,1,3], target = 3.714286 4 / \ 2 5 / \ 1 3 Output: 4 # Definition for a binary tree node.</description>
			<content type="html"><![CDATA[<p>Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.</p>
<p>Note:</p>
<pre><code>Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
</code></pre>
<p>Example:</p>
<pre><code>Input: root = [4,2,5,1,3], target = 3.714286

    4
   / \
  2   5
 / \
1   3

Output: 4
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.left = left</span>
<span class="c1">#         self.right = right</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">closestValue</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span>
        
        <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">-</span> <span class="n">target</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">abs</span><span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">target</span><span class="p">):</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">target</span> <span class="k">else</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span>
        
        <span class="k">return</span> <span class="n">r</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Tree Inorder Traversal</title>
			<link>https://jasonyangshadow.win/posts/binary-tree-inorder-traversal/</link>
			<pubDate>Thu, 02 Jul 2020 13:58:28 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-tree-inorder-traversal/</guid>
			<description>Given a binary tree, return the inorder traversal of its nodes&amp;rsquo; values.
Example:
Input: [1,null,2,3] 1 \ 2 / 3 Output: [1,3,2] Follow up: Recursive solution is trivial, could you do it iteratively? # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def inorderTraversal(self, root: TreeNode) -&amp;gt; List[int]: res, stack = [], [] while True: #append left children until encounterring left leaf while root: #append left, cur, right node stack.</description>
			<content type="html"><![CDATA[<p>Given a binary tree, return the inorder traversal of its nodes&rsquo; values.</p>
<p>Example:</p>
<pre><code>Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

Follow up: Recursive solution is trivial, could you do it iteratively?
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.left = left</span>
<span class="c1">#         self.right = right</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">inorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">res</span><span class="p">,</span> <span class="n">stack</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
        
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="c1">#append left children until encounterring left leaf</span>
            <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
                <span class="c1">#append left, cur, right node</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
            
            <span class="k">if</span> <span class="ow">not</span> <span class="n">stack</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">res</span>
            
            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="c1">#append left firstly, then cur, then right</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="c1">#because the current node is appended in previous loop</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.left = left</span>
<span class="c1">#         self.right = right</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">inorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">ret</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span>
            
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span><span class="n">ret</span><span class="p">)</span>
        
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ret</span> 
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Number of Islands</title>
			<link>https://jasonyangshadow.win/posts/number-of-islands/</link>
			<pubDate>Wed, 01 Jul 2020 10:59:42 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/number-of-islands/</guid>
			<description>Given a 2d grid map of &amp;lsquo;1&amp;rsquo;s (land) and &amp;lsquo;0&amp;rsquo;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Example 1: Input: 11110 11010 11000 00000 Output: 1 Example 2: Input: 11000 11000 00100 00011 Output: 3 class Solution: def numIslands(self, grid: List[List[str]])</description>
			<content type="html"><![CDATA[<p>Given a 2d grid map of &lsquo;1&rsquo;s (land) and &lsquo;0&rsquo;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<pre><code>Example 1:

Input:
11110
11010
11000
00000

Output: 1

Example 2:

Input:
11000
11000
00100
00011

Output: 3
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numIslands</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span> <span class="ow">or</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
                <span class="k">return</span>
            
            <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;0&#39;</span><span class="p">:</span>
                <span class="k">return</span>
            
            <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span>
            <span class="c1">#删除以当前元素位置为起始的列与行</span>
            <span class="c1">#对角相邻的元素无法被删除，进入下一个循环 count 会 加一</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span><span class="p">:</span>
                    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">count</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Redis Data Structure Other</title>
			<link>https://jasonyangshadow.win/posts/redis-data-structure-other/</link>
			<pubDate>Sun, 21 Jun 2020 08:06:13 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/redis-data-structure-other/</guid>
			<description>Redis list structure is implemented based on bi-direction list.
typedef struct listNode { struct listNode *prev; struct listNode *next; void *value; } listNode; typedef struct listIter { listNode *next; int direction; } listIter; typedef struct list { #the head node listNode *head; #the tail node listNode *tail; void *(*dup)(void *ptr); void (*free)(void *ptr); int (*match)(void *ptr, void *key); #the length of the list unsigned long len; } list; Redis dictionary structure is implemented in dict.</description>
			<content type="html"><![CDATA[<p>Redis list structure is implemented based on bi-direction list.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">typedef</span> <span class="n">struct</span> <span class="n">listNode</span> <span class="p">{</span>
    <span class="n">struct</span> <span class="n">listNode</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
    <span class="n">struct</span> <span class="n">listNode</span> <span class="o">*</span><span class="nb">next</span><span class="p">;</span>
    <span class="n">void</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
<span class="p">}</span> <span class="n">listNode</span><span class="p">;</span>

<span class="n">typedef</span> <span class="n">struct</span> <span class="n">listIter</span> <span class="p">{</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="nb">next</span><span class="p">;</span>
    <span class="nb">int</span> <span class="n">direction</span><span class="p">;</span>
<span class="p">}</span> <span class="n">listIter</span><span class="p">;</span>

<span class="n">typedef</span> <span class="n">struct</span> <span class="nb">list</span> <span class="p">{</span>
    <span class="c1">#the head node</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
    <span class="c1">#the tail node</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">tail</span><span class="p">;</span>
    <span class="n">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">dup</span><span class="p">)(</span><span class="n">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
    <span class="n">void</span> <span class="p">(</span><span class="o">*</span><span class="n">free</span><span class="p">)(</span><span class="n">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
    <span class="nb">int</span> <span class="p">(</span><span class="o">*</span><span class="n">match</span><span class="p">)(</span><span class="n">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">void</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span>
    <span class="c1">#the length of the list</span>
    <span class="n">unsigned</span> <span class="nb">long</span> <span class="nb">len</span><span class="p">;</span>
<span class="p">}</span> <span class="nb">list</span><span class="p">;</span>
</code></pre></div><p>Redis dictionary structure is implemented in dict.h/dictht file.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">typedef</span> <span class="n">struct</span> <span class="n">dictEntry</span> <span class="p">{</span>
    <span class="n">void</span> <span class="o">*</span><span class="n">key</span><span class="p">;</span>
    <span class="n">union</span> <span class="p">{</span>
        <span class="n">void</span> <span class="o">*</span><span class="n">val</span><span class="p">;</span>
        <span class="n">uint64_t</span> <span class="n">u64</span><span class="p">;</span>
        <span class="n">int64_t</span> <span class="n">s64</span><span class="p">;</span>
        <span class="n">double</span> <span class="n">d</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">v</span><span class="p">;</span>

    <span class="c1">#link to the next conflicted item with the same hash key</span>
    <span class="n">struct</span> <span class="n">dictEntry</span> <span class="o">*</span><span class="nb">next</span><span class="p">;</span> 
<span class="p">}</span> <span class="n">dictEntry</span><span class="p">;</span>

<span class="n">typedef</span> <span class="n">struct</span> <span class="n">dictType</span> <span class="p">{</span>
    <span class="n">uint64_t</span> <span class="p">(</span><span class="o">*</span><span class="n">hashFunction</span><span class="p">)(</span><span class="n">const</span> <span class="n">void</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span>
    <span class="c1">#key duplicate</span>
    <span class="n">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">keyDup</span><span class="p">)(</span><span class="n">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">,</span> <span class="n">const</span> <span class="n">void</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span>
    <span class="c1">#value duplicate</span>
    <span class="n">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">valDup</span><span class="p">)(</span><span class="n">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">,</span> <span class="n">const</span> <span class="n">void</span> <span class="o">*</span><span class="n">obj</span><span class="p">);</span>
    <span class="c1">#key compare</span>
    <span class="nb">int</span> <span class="p">(</span><span class="o">*</span><span class="n">keyCompare</span><span class="p">)(</span><span class="n">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">,</span> <span class="n">const</span> <span class="n">void</span> <span class="o">*</span><span class="n">key1</span><span class="p">,</span> <span class="n">const</span> <span class="n">void</span> <span class="o">*</span><span class="n">key2</span><span class="p">);</span>
    <span class="c1">#destruct key</span>
    <span class="n">void</span> <span class="p">(</span><span class="o">*</span><span class="n">keyDestructor</span><span class="p">)(</span><span class="n">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">,</span> <span class="n">void</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span>
    <span class="c1">#destruct val</span>
    <span class="n">void</span> <span class="p">(</span><span class="o">*</span><span class="n">valDestructor</span><span class="p">)(</span><span class="n">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">,</span> <span class="n">void</span> <span class="o">*</span><span class="n">obj</span><span class="p">);</span>
<span class="p">}</span> <span class="n">dictType</span><span class="p">;</span>

<span class="o">/*</span> <span class="n">This</span> <span class="ow">is</span> <span class="n">our</span> <span class="nb">hash</span> <span class="n">table</span> <span class="n">structure</span><span class="o">.</span> <span class="n">Every</span> <span class="n">dictionary</span> <span class="n">has</span> <span class="n">two</span> <span class="n">of</span> <span class="n">this</span> <span class="k">as</span> <span class="n">we</span>
 <span class="o">*</span> <span class="n">implement</span> <span class="n">incremental</span> <span class="n">rehashing</span><span class="p">,</span> <span class="k">for</span> <span class="n">the</span> <span class="n">old</span> <span class="n">to</span> <span class="n">the</span> <span class="n">new</span> <span class="n">table</span><span class="o">.</span> <span class="o">*/</span>
<span class="n">typedef</span> <span class="n">struct</span> <span class="n">dictht</span> <span class="p">{</span>
    <span class="n">dictEntry</span> <span class="o">**</span><span class="n">table</span><span class="p">;</span>
    <span class="n">unsigned</span> <span class="nb">long</span> <span class="n">size</span><span class="p">;</span>
    <span class="c1">#used for calculation of index, len - 1</span>
    <span class="n">unsigned</span> <span class="nb">long</span> <span class="n">sizemask</span><span class="p">;</span>
    <span class="c1">#already used count</span>
    <span class="n">unsigned</span> <span class="nb">long</span> <span class="n">used</span><span class="p">;</span>
<span class="p">}</span> <span class="n">dictht</span><span class="p">;</span>

<span class="c1">#this is the dict Data Structure</span>
<span class="n">typedef</span> <span class="n">struct</span> <span class="nb">dict</span> <span class="p">{</span>
    <span class="n">dictType</span> <span class="o">*</span><span class="nb">type</span><span class="p">;</span>
    <span class="n">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">;</span>
    <span class="c1">#there are two dictht object</span>
    <span class="n">dictht</span> <span class="n">ht</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="c1">#for empty dict, rehashindex = -1</span>
    <span class="nb">long</span> <span class="n">rehashidx</span><span class="p">;</span> <span class="o">/*</span> <span class="n">rehashing</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">progress</span> <span class="k">if</span> <span class="n">rehashidx</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*/</span>
    <span class="n">unsigned</span> <span class="nb">long</span> <span class="n">iterators</span><span class="p">;</span> <span class="o">/*</span> <span class="n">number</span> <span class="n">of</span> <span class="n">iterators</span> <span class="n">currently</span> <span class="n">running</span> <span class="o">*/</span>
<span class="p">}</span> <span class="nb">dict</span><span class="p">;</span>
</code></pre></div><p>To keep the dict load factor in a relative proper range. Rehash operation is requested including expanding and shrinking.</p>
<p>Besides, the rehashindex is used for step-rehash, where items in ht[0] will be rehashed to ht[1], when rehashindex equals used index, indicating that rehash is finished.</p>
<p>Some other notes on different other data structures.</p>
<ol>
<li>Integer set
<blockquote>
<p>element type in integer set can be automatically upgraded if necessary, however, the type can not be downgraded. The upgrade time complexity is O(N), as all elements have to be moved.</p>
</blockquote>
</li>
<li>Ziplist
<blockquote>
<p>time complexity of average push of Ziplist is O(N), though there is a chance of triggering continuous updates.</p>
</blockquote>
</li>
<li>Hash table vs Zip list
<blockquote>
<p>When the following two conditions are satisfied, Ziplist is used rather than Hash table.</p>
</blockquote>
<ul>
<li>the size of key and value is smaller than 64 bytes</li>
<li>the count of elements in this list is smaller than 512</li>
</ul>
</li>
<li>Ordered Set
<blockquote>
<p>this set is implemented through the combination of skip list and hash table. rank and range queries are implemented via skip list and normal query is implemented via hash table so that best performance is kept.</p>
</blockquote>
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>First Bad Version</title>
			<link>https://jasonyangshadow.win/posts/first-bad-version/</link>
			<pubDate>Sun, 14 Jun 2020 01:03:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/first-bad-version/</guid>
			<description>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
Suppose you have n versions [1, 2, &amp;hellip;, n] and you want to find out the first bad one, which causes all the following ones to be bad.</description>
			<content type="html"><![CDATA[<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>
<p>Suppose you have n versions [1, 2, &hellip;, n] and you want to find out the first bad one, which causes all the following ones to be bad.</p>
<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>
<p>Example:</p>
<pre><code>Given n = 5, and version = 4 is the first bad version.

call isBadVersion(3) -&gt; false
call isBadVersion(5) -&gt; true
call isBadVersion(4) -&gt; true

Then 4 is the first bad version. 
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The isBadVersion API is already defined for you.</span>
<span class="c1"># @param version, an integer</span>
<span class="c1"># @return an integer</span>
<span class="c1"># def isBadVersion(version):</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">firstBadVersion</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :type n: int
</span><span class="s2">        :rtype: int
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span>
        <span class="k">while</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">if</span> <span class="n">isBadVersion</span><span class="p">(</span><span class="n">mid</span><span class="p">):</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">return</span> <span class="n">r</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Merge Sort Counting Inversions</title>
			<link>https://jasonyangshadow.win/posts/merge-sort-counting-inversions/</link>
			<pubDate>Sun, 14 Jun 2020 00:12:31 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/merge-sort-counting-inversions/</guid>
			<description>problem descriptions:
https://www.hackerrank.com/challenges/ctci-merge-sort/problem
#!/bin/python3 import math import os import random import re import sys # Complete the countInversions function below. def merge(arr, left, right): count = 0 i = j = k = 0 left_len = len(left) right_len = len(right) while i &amp;lt; left_len and j &amp;lt; right_len: if left[i] &amp;lt;= right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 ## here, all items after i have to be reassigned count += left_len - i k += 1 while i &amp;lt; left_len: arr[k] = left[i] i, k = i+1, k+1 while j &amp;lt; right_len: arr[k] = right[j] j, k = j+ 1, k+1 return count def merge_sort(arr): if len(arr) &amp;gt; 1: mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] count = merge_sort(left) + merge_sort(right) + merge(arr, left, right) return count return 0 def countInversions(arr): return merge_sort(arr) if __name__ == &amp;#39;__main__&amp;#39;: fptr = open(os.</description>
			<content type="html"><![CDATA[<p>problem descriptions:<br>
<a href="https://www.hackerrank.com/challenges/ctci-merge-sort/problem">https://www.hackerrank.com/challenges/ctci-merge-sort/problem</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/bin/python3</span>

<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="c1"># Complete the countInversions function below.</span>
<span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">left_len</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
    <span class="n">right_len</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">left_len</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">right_len</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
            <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="c1">## here, all items after i have to be reassigned</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="n">left_len</span> <span class="o">-</span> <span class="n">i</span>
        <span class="n">k</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">left_len</span><span class="p">:</span>
        <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">i</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span>

    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">right_len</span><span class="p">:</span>
        <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
        <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">count</span>

<span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[:</span><span class="n">mid</span><span class="p">]</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">:]</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="o">+</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">right</span><span class="p">)</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">count</span>

    <span class="k">return</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">countInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">fptr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;OUTPUT_PATH&#39;</span><span class="p">],</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>

    <span class="n">t</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>

    <span class="k">for</span> <span class="n">t_itr</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>

        <span class="n">arr</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>

        <span class="n">result</span> <span class="o">=</span> <span class="n">countInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>

        <span class="n">fptr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Check if It Is a Straight Line</title>
			<link>https://jasonyangshadow.win/posts/check-if-it-is-a-straight-line/</link>
			<pubDate>Sat, 13 Jun 2020 22:51:11 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/check-if-it-is-a-straight-line/</guid>
			<description>Problem descriptions:
https://leetcode.com/problems/check-if-it-is-a-straight-line/
Solutions:
The slope for a line through any 2 points (x0, y0) and (x1, y1) is (y1 - y0) / (x1 - x0); Therefore, for any given 3 points (denote the 3rd point as (x, y)), if they are in a straight line, the slopes of the lines from the 3rd point to the 2nd point and the 2nd point to the 1st point must be equal: (y - y1) / (x - x1) = (y1 - y0) / (x1 - x0) In order to avoid being divided by 0, use multiplication form: (x1 - x0) * (y - y1) = (x - x1) * (y1 - y0) =&amp;gt; dx * (y - y1) = dy * (x - x1), where dx = x1 - x0 and dy = y1 - y0 class Solution: def checkStraightLine(self, coordinates: List[List[int]]) -&amp;gt; bool: (x0,y0), (x1,y1) = coordinates[:2] return all((y - y1) *(x1 - x0) == (x - x1) *(y1 - y0) for x, y in coordinates) </description>
			<content type="html"><![CDATA[<p>Problem descriptions:<br>
<a href="https://leetcode.com/problems/check-if-it-is-a-straight-line/">https://leetcode.com/problems/check-if-it-is-a-straight-line/</a></p>
<p>Solutions:</p>
<pre><code>The slope for a line through any 2 points (x0, y0) and (x1, y1) is (y1 - y0) / (x1 - x0); Therefore, for any given 3 points (denote the 3rd point as (x, y)), if they are in a straight line, the slopes of the lines from the 3rd point to the 2nd point and the 2nd point to the 1st point must be equal:

(y - y1) / (x - x1) = (y1 - y0) / (x1 - x0)

In order to avoid being divided by 0, use multiplication form:

(x1 - x0) * (y - y1) = (x - x1) * (y1 - y0) =&gt;
dx * (y - y1) = dy * (x - x1), where dx = x1 - x0 and dy = y1 - y0
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">checkStraightLine</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">coordinates</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="p">(</span><span class="n">x0</span><span class="p">,</span><span class="n">y0</span><span class="p">),</span> <span class="p">(</span><span class="n">x1</span><span class="p">,</span><span class="n">y1</span><span class="p">)</span> <span class="o">=</span> <span class="n">coordinates</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
        <span class="k">return</span> <span class="nb">all</span><span class="p">((</span><span class="n">y</span> <span class="o">-</span> <span class="n">y1</span><span class="p">)</span> <span class="o">*</span><span class="p">(</span><span class="n">x1</span> <span class="o">-</span> <span class="n">x0</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">x1</span><span class="p">)</span> <span class="o">*</span><span class="p">(</span><span class="n">y1</span> <span class="o">-</span> <span class="n">y0</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">coordinates</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Insert Delete Getrandom</title>
			<link>https://jasonyangshadow.win/posts/insert-delete-getrandom/</link>
			<pubDate>Sat, 13 Jun 2020 16:40:19 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/insert-delete-getrandom/</guid>
			<description>Design a data structure that supports all following operations in average O(1) time.
insert(val): Inserts an item val to the set if not already present. remove(val): Removes an item val from the set if present. getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.  Example:
// Init an empty set. RandomizedSet randomSet = new RandomizedSet(); // Inserts 1 to the set.</description>
			<content type="html"><![CDATA[<p>Design a data structure that supports all following operations in average O(1) time.</p>
<pre><code>insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
</code></pre>
<p>Example:</p>
<pre><code>// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();
</code></pre><p>The solution is quite easy. Just remember the pos and val of different elements.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">RandomizedSet</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dm</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dv</span> <span class="o">=</span> <span class="p">[]</span>
        

    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Inserts a value to the set. Returns true if the set did not already contain the specified element.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="n">val</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">dm</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">dm</span><span class="p">[</span><span class="n">val</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
        

    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Removes a value from the set. Returns true if the set contained the specified element.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="n">val</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">dm</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">pos1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dm</span><span class="p">[</span><span class="n">val</span><span class="p">]</span>
        <span class="n">last</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="p">[</span><span class="n">pos1</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="p">[</span><span class="n">pos1</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dm</span><span class="p">[</span><span class="n">last</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dm</span><span class="p">[</span><span class="n">val</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">dm</span><span class="p">[</span><span class="n">val</span><span class="p">]</span>
        <span class="k">return</span> <span class="bp">True</span>
        

    <span class="k">def</span> <span class="nf">getRandom</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Get a random element from the set.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">dv</span><span class="p">[</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">dm</span><span class="p">))]</span>


<span class="c1"># Your RandomizedSet object will be instantiated and called as such:</span>
<span class="c1"># obj = RandomizedSet()</span>
<span class="c1"># param_1 = obj.insert(val)</span>
<span class="c1"># param_2 = obj.remove(val)</span>
<span class="c1"># param_3 = obj.getRandom()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Fraudulent Activity Notifications</title>
			<link>https://jasonyangshadow.win/posts/fraudulent-activity-notifications/</link>
			<pubDate>Fri, 05 Jun 2020 14:50:12 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/fraudulent-activity-notifications/</guid>
			<description>Problem description is here:
https://www.hackerrank.com/challenges/fraudulent-activity-notifications/problem?h_l=interview&amp;amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;amp;playlist_slugs%5B%5D=sorting
Solution 1: Time limitation
#!/bin/python3 import math import os import random import re import sys import statistics # Complete the activityNotifications function below. def activityNotifications(expenditure, d): count = 0 for i in range(len(expenditure) - d - 1): sublist = expenditure[i:i+d] target = expenditure[i+d] if statistics.median(sublist) *2 &amp;lt;= target: count += 1 return count if __name__ == &amp;#39;__main__&amp;#39;: fptr = open(os.environ[&amp;#39;OUTPUT_PATH&amp;#39;], &amp;#39;w&amp;#39;) nd = input().split() n = int(nd[0]) d = int(nd[1]) expenditure = list(map(int, input().</description>
			<content type="html"><![CDATA[<p>Problem description is here:<br>
<a href="https://www.hackerrank.com/challenges/fraudulent-activity-notifications/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=sorting">https://www.hackerrank.com/challenges/fraudulent-activity-notifications/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=sorting</a></p>
<p>Solution 1: Time limitation</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/bin/python3</span>

<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">statistics</span>

<span class="c1"># Complete the activityNotifications function below.</span>
<span class="k">def</span> <span class="nf">activityNotifications</span><span class="p">(</span><span class="n">expenditure</span><span class="p">,</span> <span class="n">d</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">expenditure</span><span class="p">)</span> <span class="o">-</span> <span class="n">d</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">sublist</span> <span class="o">=</span> <span class="n">expenditure</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">d</span><span class="p">]</span>
        <span class="n">target</span> <span class="o">=</span> <span class="n">expenditure</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">d</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">statistics</span><span class="o">.</span><span class="n">median</span><span class="p">(</span><span class="n">sublist</span><span class="p">)</span> <span class="o">*</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">:</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">count</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">fptr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;OUTPUT_PATH&#39;</span><span class="p">],</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>

    <span class="n">nd</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>

    <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">nd</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

    <span class="n">d</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">nd</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="n">expenditure</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">activityNotifications</span><span class="p">(</span><span class="n">expenditure</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><p>Use counter</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/bin/python3</span>

<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">statistics</span>

<span class="c1"># Complete the activityNotifications function below.</span>
<span class="k">def</span> <span class="nf">activityNotifications</span><span class="p">(</span><span class="n">expenditure</span><span class="p">,</span> <span class="n">d</span><span class="p">):</span>
    <span class="n">notif</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">MAX</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">expenditure</span><span class="p">)</span> <span class="p">;</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">MAX</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">expenditure</span><span class="p">[:</span><span class="n">d</span><span class="p">]</span> <span class="p">:</span> <span class="n">c</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1">#median itself can be calculated via the counter array, as the index indicates the value</span>
    <span class="k">def</span> <span class="nf">median2</span><span class="p">():</span> <span class="c1"># combine counter array and median calculation return 2*median</span>
        <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">MAX</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">+=</span> <span class="n">c</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
            <span class="k">if</span> <span class="mi">2</span><span class="o">*</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="n">d</span> <span class="p">:</span> <span class="k">break</span>
        <span class="c1">#if d is odd number, should be the medium one</span>
        <span class="k">if</span> <span class="n">d</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="mi">2</span><span class="o">*</span><span class="n">s</span> <span class="o">&gt;</span> <span class="n">d</span> <span class="p">:</span> <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span>
        <span class="c1">#else should be the value</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="nb">next</span><span class="p">(</span> <span class="n">y</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">MAX</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">expenditure</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">expenditure</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">median2</span><span class="p">()</span> <span class="p">:</span> <span class="n">notif</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="c1">#remove the fisrt element in this window</span>
        <span class="n">c</span><span class="p">[</span><span class="n">expenditure</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">d</span><span class="p">]]</span> <span class="o">-=</span> <span class="mi">1</span> <span class="p">;</span> 
        <span class="c1">#append the last element to this window</span>
        <span class="n">c</span><span class="p">[</span><span class="n">expenditure</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>        
    <span class="k">return</span> <span class="n">notif</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">fptr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;OUTPUT_PATH&#39;</span><span class="p">],</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>

    <span class="n">nd</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>

    <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">nd</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

    <span class="n">d</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">nd</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="n">expenditure</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">activityNotifications</span><span class="p">(</span><span class="n">expenditure</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sorting Comparator</title>
			<link>https://jasonyangshadow.win/posts/sorting-comparator/</link>
			<pubDate>Fri, 05 Jun 2020 14:10:18 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sorting-comparator/</guid>
			<description>Problem description comes here:
https://www.hackerrank.com/challenges/ctci-comparator-sorting/problem?h_l=interview&amp;amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;amp;playlist_slugs%5B%5D=sorting
from functools import cmp_to_key class Player: def __init__(self, name, score): self.name = name self.score = score def __repr__(self): return &amp;#34;%s%s&amp;#34; %(self.name, self.score) def comparator(a, b): if a.score &amp;lt; b.score: return 1 elif a.score == b.score: if a.name &amp;lt; b.name: return -1 elif a.name &amp;gt; b.name: return 1 return 0 else: return -1 n = int(input()) data = [] for i in range(n): name, score = input().</description>
			<content type="html"><![CDATA[<p>Problem description comes here:<br>
<a href="https://www.hackerrank.com/challenges/ctci-comparator-sorting/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=sorting">https://www.hackerrank.com/challenges/ctci-comparator-sorting/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=sorting</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">cmp_to_key</span>
<span class="k">class</span> <span class="nc">Player</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">score</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span>
    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&#34;</span><span class="si">%s</span><span class="s2"> </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">score</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">comparator</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">score</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">score</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">a</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="n">score</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">name</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">name</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">elif</span> <span class="n">a</span><span class="o">.</span><span class="n">name</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">name</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>

<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">name</span><span class="p">,</span> <span class="n">score</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">score</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
    <span class="n">player</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>
    <span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
    
<span class="n">data</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">cmp_to_key</span><span class="p">(</span><span class="n">Player</span><span class="o">.</span><span class="n">comparator</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">score</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Invert Binary Tree</title>
			<link>https://jasonyangshadow.win/posts/invert-binary-tree/</link>
			<pubDate>Mon, 01 Jun 2020 20:42:03 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/invert-binary-tree/</guid>
			<description>Invert a binary tree.
Example:
Input: 4 / \ 2 7 / \ / \ 1 3 6 9 Output: 4 / \ 7 2 / \ / \ 9 6 3 1 Trivia: This problem was inspired by this original tweet by Max Howell:
Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so f*** off.
# Definition for a binary tree node.</description>
			<content type="html"><![CDATA[<p>Invert a binary tree.</p>
<p>Example:</p>
<pre><code>Input:

     4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:

     4
   /   \
  7     2
 / \   / \
9   6 3   1
</code></pre><p>Trivia:
This problem was inspired by this original tweet by Max Howell:</p>
<p>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so f*** off.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
<span class="c1">#         self.val = val</span>
<span class="c1">#         self.left = left</span>
<span class="c1">#         self.right = right</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">invertTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">root</span>
        <span class="n">rleft</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
        <span class="n">rright</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
        <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">rright</span><span class="p">,</span> <span class="n">rleft</span>
        <span class="k">return</span> <span class="n">root</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Frequency Queries</title>
			<link>https://jasonyangshadow.win/posts/frequency-queries/</link>
			<pubDate>Mon, 01 Jun 2020 17:57:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/frequency-queries/</guid>
			<description>Problem Description:
https://www.hackerrank.com/challenges/frequency-queries/problem?h_l=interview&amp;amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;amp;playlist_slugs%5B%5D=dictionaries-hashmaps
Use two dict, one is for the type of {value: count}, the other one is the {value_count: count}
#!/bin/python3 import math import os import random import re import sys import collections # Complete the freqQuery function below. def freqQuery(queries): d1 = collections.defaultdict(int) d2 = collections.defaultdict(int) res = [] for o,v in queries: if o == 1: #here d1[v] is the old value #update value associated count  d2[d1[v]] = max(0, d2[d1[v]]-1) d1[v] += 1 d2[d1[v]] += 1 elif o == 2: #d1[v] is the old value d2[d1[v]] = max(0, d2[d1[v]]-1) d1[v] = max(0, d1[v]-1) if d1[v] &amp;gt; 0: d2[d1[v]] += 1 else: if d2[v] &amp;gt; 0: res.</description>
			<content type="html"><![CDATA[<p>Problem Description:<br>
<a href="https://www.hackerrank.com/challenges/frequency-queries/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=dictionaries-hashmaps">https://www.hackerrank.com/challenges/frequency-queries/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=dictionaries-hashmaps</a></p>
<p>Use two dict, one is for the type of {value: count}, the other one is the {value_count: count}</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/bin/python3</span>

<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">collections</span>

<span class="c1"># Complete the freqQuery function below.</span>
<span class="k">def</span> <span class="nf">freqQuery</span><span class="p">(</span><span class="n">queries</span><span class="p">):</span>
    <span class="n">d1</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">d2</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">o</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">queries</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">o</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="c1">#here d1[v] is the old value</span>
            <span class="c1">#update value associated count </span>
            <span class="n">d2</span><span class="p">[</span><span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">d2</span><span class="p">[</span><span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">d2</span><span class="p">[</span><span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">o</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="c1">#d1[v] is the old value</span>
            <span class="n">d2</span><span class="p">[</span><span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">d2</span><span class="p">[</span><span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">d2</span><span class="p">[</span><span class="n">d1</span><span class="p">[</span><span class="n">v</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">d2</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">fptr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;OUTPUT_PATH&#39;</span><span class="p">],</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>

    <span class="n">q</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>

    <span class="n">queries</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
        <span class="n">queries</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">())))</span>

    <span class="n">ans</span> <span class="o">=</span> <span class="n">freqQuery</span><span class="p">(</span><span class="n">queries</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">ans</span><span class="p">)))</span>
    <span class="n">fptr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Count Triplets</title>
			<link>https://jasonyangshadow.win/posts/count-triplets/</link>
			<pubDate>Mon, 01 Jun 2020 14:10:44 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/count-triplets/</guid>
			<description>Problem Description:
https://www.hackerrank.com/challenges/count-triplets-1/problem?h_l=interview&amp;amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;amp;playlist_slugs%5B%5D=dictionaries-hashmaps
Here, we use two defaultdict class for tracing two maps:
 v2, map contains middle item in triple v3, map contains final triple items  #!/bin/python3 import math import os import random import re import sys import collections # Complete the countTriplets function below. def countTriplets(arr, r): v2 = collections.defaultdict(int) v3 = collections.defaultdict(int) count = 0 for k in arr: if k in v3: #here the count is added because there are already v3[k] count of v2 # 1, 3, 3, 9 #v3[9] = 2 count += v3[k] if k in v2: v3[k*r] += v2[k] #potential next v2 element, for example, current number is 9 and r is 3, the next potential item in v2 is 27, if we find 27 ,then we can check if 81 inside v3, and then form a triple result v2[k*r] += 1 return count if __name__ == &amp;#39;__main__&amp;#39;: fptr = open(os.</description>
			<content type="html"><![CDATA[<p>Problem Description:<br>
<a href="https://www.hackerrank.com/challenges/count-triplets-1/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=dictionaries-hashmaps">https://www.hackerrank.com/challenges/count-triplets-1/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=dictionaries-hashmaps</a></p>
<p>Here, we use two defaultdict class for tracing two maps:</p>
<ol>
<li>v2, map contains middle item in triple</li>
<li>v3, map contains final triple items</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/bin/python3</span>

<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">collections</span>

<span class="c1"># Complete the countTriplets function below.</span>
<span class="k">def</span> <span class="nf">countTriplets</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
    <span class="n">v2</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">v3</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">v3</span><span class="p">:</span>
        <span class="c1">#here the count is added because there are already v3[k] count of v2</span>
        <span class="c1"># 1, 3, 3, 9</span>
        <span class="c1">#v3[9] = 2</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="n">v3</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">v2</span><span class="p">:</span>
            <span class="n">v3</span><span class="p">[</span><span class="n">k</span><span class="o">*</span><span class="n">r</span><span class="p">]</span> <span class="o">+=</span> <span class="n">v2</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
        <span class="c1">#potential next v2 element, for example, current number is 9 and r is 3, the next potential item in v2 is 27, if we find 27 ,then we can check if 81 inside v3, and then form a triple result</span>
        <span class="n">v2</span><span class="p">[</span><span class="n">k</span><span class="o">*</span><span class="n">r</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">count</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">fptr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;OUTPUT_PATH&#39;</span><span class="p">],</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>

    <span class="n">nr</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>

    <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">nr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

    <span class="n">r</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">nr</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="n">arr</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>

    <span class="n">ans</span> <span class="o">=</span> <span class="n">countTriplets</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sherlock and Anagrams</title>
			<link>https://jasonyangshadow.win/posts/sherlock-and-anagrams/</link>
			<pubDate>Mon, 01 Jun 2020 12:37:33 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sherlock-and-anagrams/</guid>
			<description>Problem Description:
https://www.hackerrank.com/challenges/sherlock-and-anagrams/problem?h_l=interview&amp;amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;amp;playlist_slugs%5B%5D=dictionaries-hashmaps
Here we have to first find all substrings and then compare substrings with the same length and count.
By using python packages collections and itertools, we can write this algorithms in several lines
#!/bin/python3 import math import os import random import re import sys import collections import itertools # Complete the sherlockAndAnagrams function below. def sherlockAndAnagrams(s): count = [] for i in range(1, len(s)+1): #get all substrings, starts from 0 and length is i a = [&amp;#34;&amp;#34;.</description>
			<content type="html"><![CDATA[<p>Problem Description:<br>
<a href="https://www.hackerrank.com/challenges/sherlock-and-anagrams/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=dictionaries-hashmaps">https://www.hackerrank.com/challenges/sherlock-and-anagrams/problem?h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=dictionaries-hashmaps</a></p>
<p>Here we have to first find all substrings and then compare substrings with the same length and count.</p>
<p>By using python packages collections and itertools, we can write this algorithms in several lines</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/bin/python3</span>

<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">collections</span>
<span class="kn">import</span> <span class="nn">itertools</span>

<span class="c1"># Complete the sherlockAndAnagrams function below.</span>
<span class="k">def</span> <span class="nf">sherlockAndAnagrams</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="c1">#get all substrings, starts from 0 and length is i</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="n">i</span><span class="p">]))</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
        <span class="c1">#count all equal strings</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">combinations</span><span class="p">([</span><span class="s1">&#39;#&#39;</span><span class="p">]</span><span class="o">*</span><span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="mi">2</span><span class="p">)))</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>
        <span class="n">count</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">fptr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;OUTPUT_PATH&#39;</span><span class="p">],</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>

    <span class="n">q</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>

    <span class="k">for</span> <span class="n">q_itr</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>

        <span class="n">result</span> <span class="o">=</span> <span class="n">sherlockAndAnagrams</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

        <span class="n">fptr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="n">fptr</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Kmp</title>
			<link>https://jasonyangshadow.win/posts/kmp.algorithms/</link>
			<pubDate>Mon, 18 May 2020 13:35:42 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/kmp.algorithms/</guid>
			<description>KMP algorithm python implementation class KMP: #calcualte next array def partial(self,pattern): ret = [0] for i in range(1, len(pattern)): #j is intialized as prvious value j = ret[i -1] #if could not match #j is set to prvious next value of j -1  while j &amp;gt; 0 and pattern[j] != pattern[i]: j = ret[j-1] #if match =&amp;gt; j + 1 else j ret.append(j+1 if pattern[j] == pattern[i] else j) return ret def search(self, T, P): partial, ret, j = self.</description>
			<content type="html"><![CDATA[<h1 id="kmp-algorithm-python-implementation">KMP algorithm python implementation</h1>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">KMP</span><span class="p">:</span>
    <span class="c1">#calcualte next array</span>
    <span class="k">def</span> <span class="nf">partial</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">pattern</span><span class="p">):</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">)):</span>
            <span class="c1">#j is intialized as prvious value</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">ret</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="c1">#if could not match</span>
            <span class="c1">#j is set to prvious next value of j -1 </span>
            <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">pattern</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">ret</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="c1">#if match =&gt; j + 1 else j</span>
            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span> <span class="k">if</span> <span class="n">pattern</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">else</span> <span class="n">j</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ret</span>
    
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">P</span><span class="p">):</span>
        <span class="n">partial</span><span class="p">,</span> <span class="n">ret</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="n">P</span><span class="p">),</span> <span class="p">[],</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">T</span><span class="p">)):</span>
            <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">partial</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">j</span><span class="o">+=</span> <span class="mi">1</span>
            <span class="c1">#one match occurs</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">P</span><span class="p">):</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
                <span class="c1">#j is set to its previous match, next match starts from previous best matchj, if not appliable, than reduce value until 0, meaning starting from start</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">partial</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="n">ret</span>

<span class="k">if</span> <span class="vm">__name__</span><span class="o">==</span><span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="s2">&#34;abc&#34;</span>    
    <span class="n">t1</span> <span class="o">=</span> <span class="s2">&#34;abcdabdfesdfaddabc&#34;</span>

    <span class="n">kmp</span> <span class="o">=</span> <span class="n">KMP</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">kmp</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">p1</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Concatenated Words</title>
			<link>https://jasonyangshadow.win/posts/concatenated-words/</link>
			<pubDate>Sun, 26 Apr 2020 14:41:19 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/concatenated-words/</guid>
			<description>Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words. A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.
Example: Input: [&amp;ldquo;cat&amp;rdquo;,&amp;ldquo;cats&amp;rdquo;,&amp;ldquo;catsdogcats&amp;rdquo;,&amp;ldquo;dog&amp;rdquo;,&amp;ldquo;dogcatsdog&amp;rdquo;,&amp;ldquo;hippopotamuses&amp;rdquo;,&amp;ldquo;rat&amp;rdquo;,&amp;ldquo;ratcatdogcat&amp;rdquo;]
Output: [&amp;ldquo;catsdogcats&amp;rdquo;,&amp;ldquo;dogcatsdog&amp;rdquo;,&amp;ldquo;ratcatdogcat&amp;rdquo;]
Explanation: &amp;ldquo;catsdogcats&amp;rdquo; can be concatenated by &amp;ldquo;cats&amp;rdquo;, &amp;ldquo;dog&amp;rdquo; and &amp;ldquo;cats&amp;rdquo;; &amp;ldquo;dogcatsdog&amp;rdquo; can be concatenated by &amp;ldquo;dog&amp;rdquo;, &amp;ldquo;cats&amp;rdquo; and &amp;ldquo;dog&amp;rdquo;; &amp;ldquo;ratcatdogcat&amp;rdquo; can be concatenated by &amp;ldquo;rat&amp;rdquo;, &amp;ldquo;cat&amp;rdquo;, &amp;ldquo;dog&amp;rdquo; and &amp;ldquo;cat&amp;rdquo;.</description>
			<content type="html"><![CDATA[<p>Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.</p>
<p>Example:
Input: [&ldquo;cat&rdquo;,&ldquo;cats&rdquo;,&ldquo;catsdogcats&rdquo;,&ldquo;dog&rdquo;,&ldquo;dogcatsdog&rdquo;,&ldquo;hippopotamuses&rdquo;,&ldquo;rat&rdquo;,&ldquo;ratcatdogcat&rdquo;]</p>
<p>Output: [&ldquo;catsdogcats&rdquo;,&ldquo;dogcatsdog&rdquo;,&ldquo;ratcatdogcat&rdquo;]</p>
<p>Explanation: &ldquo;catsdogcats&rdquo; can be concatenated by &ldquo;cats&rdquo;, &ldquo;dog&rdquo; and &ldquo;cats&rdquo;;
&ldquo;dogcatsdog&rdquo; can be concatenated by &ldquo;dog&rdquo;, &ldquo;cats&rdquo; and &ldquo;dog&rdquo;;
&ldquo;ratcatdogcat&rdquo; can be concatenated by &ldquo;rat&rdquo;, &ldquo;cat&rdquo;, &ldquo;dog&rdquo; and &ldquo;cat&rdquo;.
Note:
The number of elements of the given array will not exceed 10,000
The length sum of elements in the given array will not exceed 600,000.
All the input string will only include lower case letters.
The returned elements order does not matter.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Trie</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">isEnd</span> <span class="o">=</span> <span class="bp">False</span>
        
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">Trie</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
                <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">Trie</span><span class="p">()</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
        <span class="n">node</span><span class="o">.</span><span class="n">isEnd</span> <span class="o">=</span> <span class="bp">True</span>
    
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">isEnd</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">isEnd</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">:</span>
                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                    <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
        
        
    <span class="k">def</span> <span class="nf">findAllConcatenatedWordsInADict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Search Autocomplete System</title>
			<link>https://jasonyangshadow.win/posts/design-search-autocomplete-system/</link>
			<pubDate>Sun, 26 Apr 2020 13:51:06 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-search-autocomplete-system/</guid>
			<description>Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character &amp;lsquo;#&#39;). For each character they type except &amp;lsquo;#&amp;rsquo;, you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:
The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.</description>
			<content type="html"><![CDATA[<p>Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character &lsquo;#'). For each character they type except &lsquo;#&rsquo;, you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:</p>
<p>The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.
The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).
If less than 3 hot sentences exist, then just return as many as you can.
When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.
Your job is to implement the following functions:</p>
<p>The constructor function:</p>
<p>AutocompleteSystem(String[] sentences, int[] times): This is the constructor. The input is historical data. Sentences is a string array consists of previously typed sentences. Times is the corresponding times a sentence has been typed. Your system should record these historical data.</p>
<p>Now, the user wants to input a new sentence. The following function will provide the next character the user types:</p>
<p>List<String> input(char c): The input c is the next character typed by the user. The character will only be lower-case letters (&lsquo;a&rsquo; to &lsquo;z&rsquo;), blank space (&rsquo; &lsquo;) or a special character ('#'). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.</p>
<p>Example:
Operation: AutocompleteSystem([&ldquo;i love you&rdquo;, &ldquo;island&rdquo;,&ldquo;ironman&rdquo;, &ldquo;i love leetcode&rdquo;], [5,3,2,2])
The system have already tracked down the following sentences and their corresponding times:
&ldquo;i love you&rdquo; : 5 times
&ldquo;island&rdquo; : 3 times
&ldquo;ironman&rdquo; : 2 times
&ldquo;i love leetcode&rdquo; : 2 times
Now, the user begins another search:</p>
<p>Operation: input(&lsquo;i&rsquo;)
Output: [&ldquo;i love you&rdquo;, &ldquo;island&rdquo;,&ldquo;i love leetcode&rdquo;]
Explanation:
There are four sentences that have prefix &ldquo;i&rdquo;. Among them, &ldquo;ironman&rdquo; and &ldquo;i love leetcode&rdquo; have same hot degree. Since ' ' has ASCII code 32 and &lsquo;r&rsquo; has ASCII code 114, &ldquo;i love leetcode&rdquo; should be in front of &ldquo;ironman&rdquo;. Also we only need to output top 3 hot sentences, so &ldquo;ironman&rdquo; will be ignored.</p>
<p>Operation: input(&rsquo; &lsquo;)
Output: [&ldquo;i love you&rdquo;,&ldquo;i love leetcode&rdquo;]
Explanation:
There are only two sentences that have prefix &ldquo;i &ldquo;.</p>
<p>Operation: input(&lsquo;a&rsquo;)
Output: []
Explanation:
There are no sentences that have prefix &ldquo;i a&rdquo;.</p>
<p>Operation: input('#')
Output: []
Explanation:
The user finished the input, the sentence &ldquo;i a&rdquo; should be saved as a historical sentence in system. And the following input will be counted as a new search.</p>
<p>Note:</p>
<p>The input sentence will always start with a letter and end with &lsquo;#&rsquo;, and only one blank space will exist between two words.
The number of complete sentences that to be searched won&rsquo;t exceed 100. The length of each sentence including those in the historical data won&rsquo;t exceed 100.
Please use double-quote instead of single-quote when you write test cases even for a character input.
Please remember to RESET your class variables declared in class AutocompleteSystem, as static/class variables are persisted across multiple test cases. Please see here for more details.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Trie</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">isEnd</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">hot</span> <span class="o">=</span> <span class="mi">0</span>
        
<span class="k">class</span> <span class="nc">AutocompleteSystem</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sentences</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">times</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">Trie</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">term</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
        <span class="k">for</span> <span class="n">sen</span><span class="p">,</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sentences</span><span class="p">,</span> <span class="n">times</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">sen</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="s2">&#34;#&#34;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">term</span> <span class="o">+=</span> <span class="n">c</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">term</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">term</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">term</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
            
        
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sentence</span><span class="p">,</span> <span class="n">time</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">sentence</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">ch</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
                <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span> <span class="o">=</span> <span class="n">Trie</span><span class="p">()</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span>
        
        <span class="n">node</span><span class="o">.</span><span class="n">isEnd</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">node</span><span class="o">.</span><span class="n">hot</span> <span class="o">-=</span> <span class="n">time</span>
    
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sen</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">path</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">sen</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">res</span>
            <span class="n">path</span> <span class="o">+=</span> <span class="n">c</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">c</span><span class="p">]</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">res</span><span class="p">)[:</span><span class="mi">3</span><span class="p">]]</span>
        
    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">isEnd</span><span class="p">:</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">hot</span><span class="p">,</span> <span class="n">path</span><span class="p">))</span>
        
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">c</span><span class="p">],</span> <span class="n">path</span> <span class="o">+</span> <span class="n">c</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        


<span class="c1"># Your AutocompleteSystem object will be instantiated and called as such:</span>
<span class="c1"># obj = AutocompleteSystem(sentences, times)</span>
<span class="c1"># param_1 = obj.input(c)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Convert Sorted List to Binary Search Tree</title>
			<link>https://jasonyangshadow.win/posts/convert-sorted-list-to-binary-search-tree/</link>
			<pubDate>Sun, 26 Apr 2020 12:30:27 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/convert-sorted-list-to-binary-search-tree/</guid>
			<description>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
Example:
Given the sorted linked list: [-10,-3,0,5,9], One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST: 0 / \ -3 9 / / -10 5 # Definition for singly-linked list.</description>
			<content type="html"><![CDATA[<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<p>Example:</p>
<pre><code>Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for singly-linked list.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.next = None</span>

<span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sortedListToBST</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">ls</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">ls</span><span class="p">[</span><span class="n">start</span><span class="p">])</span>
            
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">ls</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
            <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">ls</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">ls</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">root</span>
        
        <span class="n">ls</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="n">head</span><span class="p">:</span>
            <span class="n">ls</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span>
        
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">ls</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ls</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Task Scheduler</title>
			<link>https://jasonyangshadow.win/posts/task-scheduler/</link>
			<pubDate>Sun, 26 Apr 2020 12:20:05 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/task-scheduler/</guid>
			<description>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.
However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.</description>
			<content type="html"><![CDATA[<p>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.</p>
<p>However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.</p>
<p>You need to return the least number of intervals the CPU will take to finish all the given tasks.</p>
<p>Example:</p>
<pre><code>Input: tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2
Output: 8
Explanation: A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.
</code></pre><p>Constraints:</p>
<p>The number of tasks is in the range [1, 10000].
The integer n is in the range [0, 100].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">leastInterval</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tasks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">task_count</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">tasks</span><span class="p">)</span>
        <span class="n">current_time</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">current_heap</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">task_count</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
            <span class="n">heappush</span><span class="p">(</span><span class="n">current_heap</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="n">v</span><span class="p">,</span> <span class="n">k</span><span class="p">))</span> 


        <span class="k">while</span> <span class="n">current_heap</span><span class="p">:</span> 
            <span class="n">index</span><span class="p">,</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[]</span>
            <span class="k">while</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
                <span class="n">current_time</span> <span class="o">+=</span> <span class="mi">1</span> 
                <span class="k">if</span> <span class="n">current_heap</span><span class="p">:</span>
                    <span class="n">timing</span><span class="p">,</span> <span class="n">taskid</span> <span class="o">=</span> <span class="n">heappop</span><span class="p">(</span><span class="n">current_heap</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">timing</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>

                        <span class="n">temp</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">timing</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">taskid</span><span class="p">))</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">current_heap</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">temp</span><span class="p">:</span>  
                    <span class="k">break</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">temp</span><span class="p">:</span>
                <span class="n">heappush</span><span class="p">(</span><span class="n">current_heap</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">current_time</span> 
</code></pre></div><p>Explanation detail is here:<br>
<a href="https://leetcode.com/problems/task-scheduler/discuss/130786/Python-solution-with-detailed-explanation">https://leetcode.com/problems/task-scheduler/discuss/130786/Python-solution-with-detailed-explanation</a></p>
]]></content>
		</item>
		
		<item>
			<title>Find the Closest Palindrome</title>
			<link>https://jasonyangshadow.win/posts/find-the-closest-palindrome/</link>
			<pubDate>Fri, 24 Apr 2020 13:42:18 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-the-closest-palindrome/</guid>
			<description>Given an integer n, find the closest integer (not including itself), which is a palindrome.
The &amp;lsquo;closest&amp;rsquo; is defined as absolute difference minimized between two integers.
Example 1:
Input: &amp;quot;123&amp;quot; Output: &amp;quot;121&amp;quot; Note: The input n is a positive integer represented by string, whose length will not exceed 18. If there is a tie, return the smaller one as answer.
class Solution: def nearestPalindromic(self, n: str) -&amp;gt; str: K = len(n) candidates = [str(10**k + d) for k in (K-1, K) for d in (-1, 1)] prefix = n[:(K+1)//2] P = int(prefix) for start in map(str, (P-1,P,P+1)): candidates.</description>
			<content type="html"><![CDATA[<p>Given an integer n, find the closest integer (not including itself), which is a palindrome.</p>
<p>The &lsquo;closest&rsquo; is defined as absolute difference minimized between two integers.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;123&quot;
Output: &quot;121&quot;
</code></pre><p>Note:
The input n is a positive integer represented by string, whose length will not exceed 18.
If there is a tie, return the smaller one as answer.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">nearestPalindromic</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">K</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="n">candidates</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="n">k</span> <span class="o">+</span> <span class="n">d</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="n">K</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">K</span><span class="p">)</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]</span>
        <span class="n">prefix</span> <span class="o">=</span> <span class="n">n</span><span class="p">[:(</span><span class="n">K</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">]</span>
        <span class="n">P</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">start</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="p">(</span><span class="n">P</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">P</span><span class="p">,</span><span class="n">P</span><span class="o">+</span><span class="mi">1</span><span class="p">)):</span>
            <span class="n">candidates</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="p">(</span><span class="n">start</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="k">if</span> <span class="n">K</span><span class="o">%</span><span class="mi">2</span> <span class="k">else</span> <span class="n">start</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="c1">#print(candidates)</span>
        
        <span class="k">def</span> <span class="nf">delta</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
            <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        
        
        <span class="n">ans</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">cand</span> <span class="ow">in</span> <span class="n">candidates</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cand</span> <span class="o">!=</span> <span class="n">n</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">cand</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;00&#39;</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">ans</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">delta</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">delta</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">delta</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span> <span class="o">==</span> <span class="n">delta</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">int</span><span class="p">(</span><span class="n">ans</span><span class="p">)):</span>
                    <span class="n">ans</span> <span class="o">=</span> <span class="n">cand</span>
        
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div><p>For example, if the input is &ldquo;12345&rdquo;, the candidates are [&lsquo;9999&rsquo;, &lsquo;10001&rsquo;, &lsquo;99999&rsquo;, &lsquo;100001&rsquo;, &lsquo;12221&rsquo;, &lsquo;12321&rsquo;, &lsquo;12421&rsquo;]</p>
]]></content>
		</item>
		
		<item>
			<title>01 Matrix</title>
			<link>https://jasonyangshadow.win/posts/01-matrix/</link>
			<pubDate>Fri, 24 Apr 2020 12:03:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/01-matrix/</guid>
			<description>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.
The distance between two adjacent cells is 1.
Example 1:
Input: [[0,0,0], [0,1,0], [0,0,0]] Output: [[0,0,0], [0,1,0], [0,0,0]] Example 2:
Input: [[0,0,0], [0,1,0], [1,1,1]] Output: [[0,0,0], [0,1,0], [1,2,1]] Note:
The number of elements of the given matrix will not exceed 10,000. There are at least one 0 in the given matrix. The cells are adjacent in only four directions: up, down, left and right.</description>
			<content type="html"><![CDATA[<p>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.</p>
<p>The distance between two adjacent cells is 1.</p>
<p>Example 1:</p>
<pre><code>Input:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
</code></pre><p>Example 2:</p>
<pre><code>Input:
[[0,0,0],
 [0,1,0],
 [1,1,1]]

Output:
[[0,0,0],
 [0,1,0],
 [1,2,1]]
</code></pre><p>Note:</p>
<p>The number of elements of the given matrix will not exceed 10,000.
There are at least one 0 in the given matrix.
The cells are adjacent in only four directions: up, down, left and right.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">updateMatrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">row</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
        <span class="n">col</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="k">def</span> <span class="nf">neighbor</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">ni</span><span class="p">,</span> <span class="n">nj</span> <span class="ow">in</span> <span class="p">[[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">],[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">],[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">],[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]]:</span>
                <span class="k">if</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">ni</span><span class="o">&lt;</span><span class="n">row</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">nj</span><span class="o">&lt;</span><span class="n">col</span> <span class="ow">and</span> <span class="n">output</span><span class="p">[</span><span class="n">ni</span><span class="p">][</span><span class="n">nj</span><span class="p">]</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
                <span class="c1">#only if it is not visited</span>
                    <span class="k">yield</span> <span class="n">ni</span><span class="p">,</span><span class="n">nj</span>
        
        <span class="c1">#val is either 0/1</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[[</span><span class="n">val</span><span class="o">*</span><span class="mi">200</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">r</span><span class="p">]</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">]</span>
        <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">col</span><span class="p">)</span> <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">])</span>
        
        <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
            <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">ni</span><span class="p">,</span> <span class="n">nj</span> <span class="ow">in</span> <span class="n">neighbor</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">ni</span><span class="p">,</span><span class="n">nj</span><span class="p">))</span>
                <span class="n">output</span><span class="p">[</span><span class="n">ni</span><span class="p">][</span><span class="n">nj</span><span class="p">]</span> <span class="o">=</span> <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">output</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Ugly Number 2</title>
			<link>https://jasonyangshadow.win/posts/ugly-number-2/</link>
			<pubDate>Fri, 24 Apr 2020 11:26:11 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/ugly-number-2/</guid>
			<description>Write a program to find the n-th ugly number.
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.
Example:
Input: n = 10 Output: 12 Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers. Note:
1 is typically treated as an ugly number. n does not exceed 1690.
class Solution: def nthUglyNumber(self, n: int) -&amp;gt; int: ugly = [1] i2 = i3 = i5 =0 while len(ugly) &amp;lt; n: while ugly[i2]*2 &amp;lt;= ugly[-1]: i2 += 1 while ugly[i3]*3 &amp;lt;= ugly[-1]: i3 += 1 while ugly[i5]*5 &amp;lt;= ugly[-1]: i5 += 1 ugly.</description>
			<content type="html"><![CDATA[<p>Write a program to find the n-th ugly number.</p>
<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.</p>
<p>Example:</p>
<pre><code>Input: n = 10
Output: 12
Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.
</code></pre><p>Note:</p>
<p>1 is typically treated as an ugly number.
n does not exceed 1690.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">nthUglyNumber</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">ugly</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">i2</span> <span class="o">=</span> <span class="n">i3</span> <span class="o">=</span> <span class="n">i5</span> <span class="o">=</span><span class="mi">0</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">ugly</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">ugly</span><span class="p">[</span><span class="n">i2</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">ugly</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span> <span class="n">i2</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">ugly</span><span class="p">[</span><span class="n">i3</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span> <span class="o">&lt;=</span> <span class="n">ugly</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span> <span class="n">i3</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">ugly</span><span class="p">[</span><span class="n">i5</span><span class="p">]</span><span class="o">*</span><span class="mi">5</span> <span class="o">&lt;=</span> <span class="n">ugly</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span> <span class="n">i5</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">ugly</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">ugly</span><span class="p">[</span><span class="n">i2</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">ugly</span><span class="p">[</span><span class="n">i3</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span> <span class="n">ugly</span><span class="p">[</span><span class="n">i5</span><span class="p">]</span><span class="o">*</span><span class="mi">5</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">ugly</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Solve the Equation</title>
			<link>https://jasonyangshadow.win/posts/solve-the-equation/</link>
			<pubDate>Wed, 22 Apr 2020 16:43:33 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/solve-the-equation/</guid>
			<description>Solve a given equation and return the value of x in the form of string &amp;ldquo;x=#value&amp;rdquo;. The equation contains only &amp;lsquo;+&amp;rsquo;, &amp;lsquo;-&amp;rsquo; operation, the variable x and its coefficient.
If there is no solution for the equation, return &amp;ldquo;No solution&amp;rdquo;.
If there are infinite solutions for the equation, return &amp;ldquo;Infinite solutions&amp;rdquo;.
If there is exactly one solution for the equation, we ensure that the value of x is an integer.</description>
			<content type="html"><![CDATA[<p>Solve a given equation and return the value of x in the form of string &ldquo;x=#value&rdquo;. The equation contains only &lsquo;+&rsquo;, &lsquo;-&rsquo; operation, the variable x and its coefficient.</p>
<p>If there is no solution for the equation, return &ldquo;No solution&rdquo;.</p>
<p>If there are infinite solutions for the equation, return &ldquo;Infinite solutions&rdquo;.</p>
<p>If there is exactly one solution for the equation, we ensure that the value of x is an integer.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;x+5-3+x=6+x-2&quot;
Output: &quot;x=2&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;x=x&quot;
Output: &quot;Infinite solutions&quot;
</code></pre><p>Example 3:</p>
<pre><code>Input: &quot;2x=x&quot;
Output: &quot;x=0&quot;
</code></pre><p>Example 4:</p>
<pre><code>Input: &quot;2x+3x-6x=x+2&quot;
Output: &quot;x=-1&quot;
</code></pre><p>Example 5:</p>
<pre><code>Input: &quot;x=x+2&quot;
Output: &quot;No solution&quot;
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">solveEquation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">equation</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">side</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">eq</span><span class="p">,</span> <span class="n">sign</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">isx</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;(=)|([-+]?)(\d*)(x?)&#39;</span><span class="p">,</span><span class="n">equation</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">eq</span><span class="p">:</span>
                <span class="n">side</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">elif</span> <span class="n">isx</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">+=</span> <span class="n">side</span> <span class="o">*</span><span class="nb">int</span><span class="p">(</span><span class="n">sign</span> <span class="o">+</span> <span class="s1">&#39;1&#39;</span><span class="p">)</span><span class="o">*</span><span class="nb">int</span><span class="p">(</span><span class="n">num</span> <span class="ow">or</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">num</span><span class="p">:</span>
                <span class="n">a</span> <span class="o">-=</span> <span class="n">side</span> <span class="o">*</span><span class="nb">int</span><span class="p">(</span><span class="n">sign</span> <span class="o">+</span> <span class="n">num</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="s1">&#39;x=</span><span class="si">%d</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">a</span> <span class="o">/</span> <span class="n">x</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="k">else</span> <span class="s1">&#39;No solution&#39;</span> <span class="k">if</span> <span class="n">a</span> <span class="k">else</span> <span class="s1">&#39;Infinite solutions&#39;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Repeated DNA Sequences</title>
			<link>https://jasonyangshadow.win/posts/repeated-dna-sequences/</link>
			<pubDate>Wed, 22 Apr 2020 15:58:12 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/repeated-dna-sequences/</guid>
			<description>All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: &amp;ldquo;ACGAATTCCG&amp;rdquo;. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.
Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.
Example:
Input: s = &amp;quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&amp;quot; Output: [&amp;quot;AAAAACCCCC&amp;quot;, &amp;quot;CCCCCAAAAA&amp;quot;] class Solution: def findRepeatedDnaSequences(self, s: str) -&amp;gt; List[str]: r, d = set(), set() for i in range(len(s)-9): sub = s[i:i+10] if sub in d: r.</description>
			<content type="html"><![CDATA[<p>All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: &ldquo;ACGAATTCCG&rdquo;. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.</p>
<p>Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.</p>
<p>Example:</p>
<pre><code>Input: s = &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;

Output: [&quot;AAAAACCCCC&quot;, &quot;CCCCCAAAAA&quot;]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findRepeatedDnaSequences</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">r</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(),</span> <span class="nb">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="mi">9</span><span class="p">):</span>
            <span class="n">sub</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
                <span class="n">r</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">d</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Zigzag Conversion</title>
			<link>https://jasonyangshadow.win/posts/zigzag-conversion/</link>
			<pubDate>Wed, 22 Apr 2020 15:27:51 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/zigzag-conversion/</guid>
			<description>The string &amp;ldquo;PAYPALISHIRING&amp;rdquo; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P A H N A P L S I I G Y I R And then read line by line: &amp;quot;PAHNAPLSIIGYIR&amp;quot; Write the code that will take a string and make this conversion given a number of rows:
string convert(string s, int numRows); Example 1:</description>
			<content type="html"><![CDATA[<p>The string &ldquo;PAYPALISHIRING&rdquo; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<pre><code>P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: &quot;PAHNAPLSIIGYIR&quot;
</code></pre><p>Write the code that will take a string and make this conversion given a number of rows:</p>
<p>string convert(string s, int numRows);
Example 1:</p>
<pre><code>Input: s = &quot;PAYPALISHIRING&quot;, numRows = 3
Output: &quot;PAHNAPLSIIGYIR&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input: s = &quot;PAYPALISHIRING&quot;, numRows = 4
Output: &quot;PINALSIGYAHRPI&quot;
Explanation:

P     I    N
A   L S  I G
Y A   H R
P     I
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">numRows</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">numRows</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">numRows</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">s</span>
        
        <span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">]</span><span class="o">*</span><span class="n">numRows</span>
        <span class="n">index</span><span class="p">,</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
        <span class="c1">#the order is 1,2,3,2,1,2,3... </span>
        <span class="c1">#use step to control</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="n">L</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+=</span> <span class="n">x</span>
            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">index</span> <span class="o">==</span> <span class="n">numRows</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">step</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="n">index</span> <span class="o">+=</span> <span class="n">step</span>
        <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Search in Rotated Sorted Array 2</title>
			<link>https://jasonyangshadow.win/posts/search-in-rotated-sorted-array-2/</link>
			<pubDate>Wed, 22 Apr 2020 14:54:22 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/search-in-rotated-sorted-array-2/</guid>
			<description>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
You are given a target value to search. If found in the array return true, otherwise return false.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0 Output: true Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3 Output: false Follow up:
This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.</description>
			<content type="html"><![CDATA[<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).</p>
<p>You are given a target value to search. If found in the array return true, otherwise return false.</p>
<p>Example 1:</p>
<pre><code>Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
</code></pre><p>Follow up:</p>
<p>This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="c1">#find the target</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            
            <span class="c1">#left part is sorted</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                    <span class="n">end</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            
            <span class="c1">#right part is sorted</span>
            <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">end</span><span class="p">]:</span>
                    <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">end</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">start</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Remove Duplicates From Sorted List 2</title>
			<link>https://jasonyangshadow.win/posts/remove-duplicates-from-sorted-list-2/</link>
			<pubDate>Wed, 22 Apr 2020 11:28:02 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/remove-duplicates-from-sorted-list-2/</guid>
			<description>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Return the linked list sorted as well.
Example 1:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5 Output: 1-&amp;gt;2-&amp;gt;5 Example 2:
Input: 1-&amp;gt;1-&amp;gt;1-&amp;gt;2-&amp;gt;3 Output: 2-&amp;gt;3 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def deleteDuplicates(self, head: ListNode) -&amp;gt; ListNode: dummy = ListNode(0) dummy.</description>
			<content type="html"><![CDATA[<p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.</p>
<p>Return the linked list sorted as well.</p>
<p>Example 1:</p>
<pre><code>Input: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5
Output: 1-&gt;2-&gt;5
</code></pre><p>Example 2:</p>
<pre><code>Input: 1-&gt;1-&gt;1-&gt;2-&gt;3
Output: 2-&gt;3
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for singly-linked list.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.next = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">deleteDuplicates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="n">dummy</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">dummy</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span>
        
        <span class="n">pre</span> <span class="o">=</span> <span class="n">dummy</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span> <span class="ow">and</span> <span class="n">cur</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">cur</span> <span class="ow">and</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span> <span class="ow">and</span> <span class="n">cur</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
                <span class="n">pre</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">.</span><span class="n">next</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
        
        <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="n">next</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>One Edit Distance</title>
			<link>https://jasonyangshadow.win/posts/one-edit-distance/</link>
			<pubDate>Tue, 21 Apr 2020 12:24:59 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/one-edit-distance/</guid>
			<description>Given two strings s and t, determine if they are both one edit distance apart.
Note:
There are 3 possiblities to satisify one edit distance apart:
Insert a character into s to get t Delete a character from s to get t Replace a character of s to get t Example 1:
Input: s = &amp;quot;ab&amp;quot;, t = &amp;quot;acb&amp;quot; Output: true Explanation: We can insert &#39;c&#39; into s to get t.</description>
			<content type="html"><![CDATA[<p>Given two strings s and t, determine if they are both one edit distance apart.</p>
<p>Note:</p>
<p>There are 3 possiblities to satisify one edit distance apart:</p>
<p>Insert a character into s to get t
Delete a character from s to get t
Replace a character of s to get t
Example 1:</p>
<pre><code>Input: s = &quot;ab&quot;, t = &quot;acb&quot;
Output: true
Explanation: We can insert 'c' into s to get t.
</code></pre><p>Example 2:</p>
<pre><code>Input: s = &quot;cab&quot;, t = &quot;ad&quot;
Output: false
Explanation: We cannot get t from s by only one step.
</code></pre><p>Example 3:</p>
<pre><code>Input: s = &quot;1203&quot;, t = &quot;1213&quot;
Output: true
Explanation: We can replace '0' with '1' to get t.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isOneEditDistance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">t</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="c1">#force len(s) &lt; len(t), so that deletion is not needed</span>
        <span class="k">if</span> <span class="n">l1</span> <span class="o">&gt;</span> <span class="n">l2</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">isOneEditDistance</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">s</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">l2</span> <span class="o">-</span> <span class="n">l1</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">l1</span> <span class="o">==</span> <span class="n">l2</span><span class="p">:</span>
                    <span class="c1">#replacement</span>
                    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="c1">#insertion</span>
                    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>
                <span class="k">break</span>
        <span class="c1">#s == t[:-1] is used for comparing &#34;a&#34; &amp; &#34;&#34;</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">==</span> <span class="n">t</span> <span class="ow">or</span> <span class="n">s</span> <span class="o">==</span> <span class="n">t</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>4sum</title>
			<link>https://jasonyangshadow.win/posts/4sum/</link>
			<pubDate>Tue, 21 Apr 2020 11:13:39 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/4sum/</guid>
			<description>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note:
The solution set must not contain duplicate quadruplets.
Example:
Given array nums = [1, 0, -1, 0, -2, 2], and target = 0. A solution set is: [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] class Solution: def fourSum(self, nums: List[int], target: int) -&amp;gt; List[List[int]]: def findNsum(nums, target, N, cur): #nums here are sorted in increasing order.</description>
			<content type="html"><![CDATA[<p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p>Note:</p>
<p>The solution set must not contain duplicate quadruplets.</p>
<p>Example:</p>
<pre><code>Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">fourSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        
        <span class="k">def</span> <span class="nf">findNsum</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">cur</span><span class="p">):</span>
            <span class="c1">#nums here are sorted in increasing order.</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="ow">or</span> <span class="n">N</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="ow">or</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">N</span> <span class="o">&gt;</span> <span class="n">target</span> <span class="ow">or</span> <span class="n">nums</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">N</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="c1">#2 sum problem</span>
            <span class="k">if</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
                <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
                    <span class="n">s</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
                    <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span> <span class="o">+</span> <span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]])</span>
                        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                            <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                            <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span>
                        <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span>
                    <span class="k">elif</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                        <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
            <span class="c1">#reduce to N-1 problem</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                        <span class="n">findNsum</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cur</span> <span class="o">+</span> <span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">findNsum</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">nums</span><span class="p">),</span> <span class="n">target</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="p">[])</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Valid Parenthesis String</title>
			<link>https://jasonyangshadow.win/posts/valid-parenthesis-string/</link>
			<pubDate>Tue, 21 Apr 2020 10:42:08 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/valid-parenthesis-string/</guid>
			<description>Given a string containing only three types of characters: &amp;lsquo;(&amp;rsquo;, &amp;lsquo;)&amp;rsquo; and &amp;lsquo;*&amp;rsquo;, write a function to check whether this string is valid. We define the validity of a string by these rules:
Any left parenthesis &amp;lsquo;(&amp;rsquo; must have a corresponding right parenthesis &amp;lsquo;)&amp;rsquo;. Any right parenthesis &amp;lsquo;)&amp;rsquo; must have a corresponding left parenthesis &amp;lsquo;(&amp;rsquo;. Left parenthesis &amp;lsquo;(&amp;rsquo; must go before the corresponding right parenthesis &amp;lsquo;)&amp;rsquo;. &amp;lsquo;*&amp;rsquo; could be treated as a single right parenthesis &amp;lsquo;)&amp;rsquo; or a single left parenthesis &amp;lsquo;(&amp;rsquo; or an empty string.</description>
			<content type="html"><![CDATA[<p>Given a string containing only three types of characters: &lsquo;(&rsquo;, &lsquo;)&rsquo; and &lsquo;*&rsquo;, write a function to check whether this string is valid. We define the validity of a string by these rules:</p>
<p>Any left parenthesis &lsquo;(&rsquo; must have a corresponding right parenthesis &lsquo;)&rsquo;.
Any right parenthesis &lsquo;)&rsquo; must have a corresponding left parenthesis &lsquo;(&rsquo;.
Left parenthesis &lsquo;(&rsquo; must go before the corresponding right parenthesis &lsquo;)&rsquo;.
&lsquo;*&rsquo; could be treated as a single right parenthesis &lsquo;)&rsquo; or a single left parenthesis &lsquo;(&rsquo; or an empty string.
An empty string is also valid.
Example 1:</p>
<pre><code>Input: &quot;()&quot;
Output: True
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;(*)&quot;
Output: True
</code></pre><p>Example 3:</p>
<pre><code>Input: &quot;(*))&quot;
Output: True
</code></pre><p>Note:
The string size will be in the range [1, 100].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">checkValidString</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">cmin</span> <span class="o">=</span> <span class="n">cmax</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span><span class="p">:</span>
                <span class="n">cmin</span> <span class="o">+=</span><span class="mi">1</span>
                <span class="n">cmax</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span><span class="p">:</span>
                <span class="n">cmax</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">cmin</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">cmin</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">:</span>
                <span class="n">cmax</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">cmin</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">cmin</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">cmax</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="n">cmin</span> <span class="o">==</span> <span class="mi">0</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>132 Pattern</title>
			<link>https://jasonyangshadow.win/posts/132-pattern/</link>
			<pubDate>Tue, 21 Apr 2020 09:29:28 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/132-pattern/</guid>
			<description>Given a sequence of n integers a1, a2, &amp;hellip;, an, a 132 pattern is a subsequence ai, aj, ak such that i &amp;lt; j &amp;lt; k and ai &amp;lt; ak &amp;lt; aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.
Note: n will be less than 15,000.
Example 1:
Input: [1, 2, 3, 4] Output: False Explanation: There is no 132 pattern in the sequence.</description>
			<content type="html"><![CDATA[<p>Given a sequence of n integers a1, a2, &hellip;, an, a 132 pattern is a subsequence ai, aj, ak such that i &lt; j &lt; k and ai &lt; ak &lt; aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p>
<p>Note: n will be less than 15,000.</p>
<p>Example 1:</p>
<pre><code>Input: [1, 2, 3, 4]

Output: False

Explanation: There is no 132 pattern in the sequence.
</code></pre><p>Example 2:</p>
<pre><code>Input: [3, 1, 4, 2]

Output: True

Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
</code></pre><p>Example 3:</p>
<pre><code>Input: [-1, 3, 2, 0]

Output: True

Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">find132pattern</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        
        <span class="n">st</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">s3</span> <span class="o">=</span> <span class="o">-</span><span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">s3</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">while</span> <span class="n">st</span> <span class="ow">and</span> <span class="n">st</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
                <span class="n">s3</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="n">st</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Word Frequency</title>
			<link>https://jasonyangshadow.win/posts/word-frequency/</link>
			<pubDate>Tue, 21 Apr 2020 08:47:12 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/word-frequency/</guid>
			<description>Write a bash script to calculate the frequency of each word in a text file words.txt.
For simplicity sake, you may assume:
words.txt contains only lowercase characters and space &#39; &#39; characters. Each word must consist of lowercase characters only. Words are separated by one or more whitespace characters. Example:
Assume that words.txt has the following content:
the day is sunny the the the sunny is is Your script should output the following, sorted by descending frequency:</description>
			<content type="html"><![CDATA[<p>Write a bash script to calculate the frequency of each word in a text file words.txt.</p>
<p>For simplicity sake, you may assume:</p>
<p>words.txt contains only lowercase characters and space ' ' characters.
Each word must consist of lowercase characters only.
Words are separated by one or more whitespace characters.
Example:</p>
<p>Assume that words.txt has the following content:</p>
<p>the day is sunny the the
the sunny is is
Your script should output the following, sorted by descending frequency:</p>
<p>the 4
is 3
sunny 2
day 1
Note:</p>
<p>Don&rsquo;t worry about handling ties, it is guaranteed that each word&rsquo;s frequency count is unique.
Could you write it in one-line using Unix pipes?</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Read from the file words.txt and output the word frequency list to stdout.</span>
cat words.txt <span class="p">|</span> tr -s <span class="s1">&#39; &#39;</span> <span class="s1">&#39;\n&#39;</span> <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> sort -r <span class="p">|</span> awk <span class="s1">&#39;{print $2, $1}&#39;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Consecutive Sequence</title>
			<link>https://jasonyangshadow.win/posts/longest-consecutive-sequence/</link>
			<pubDate>Sun, 19 Apr 2020 20:02:07 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-consecutive-sequence/</guid>
			<description>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
Your algorithm should run in O(n) complexity.
Example:
Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. class Solution: def longestConsecutive(self, nums: List[int]) -&amp;gt; int: nums = set(nums) best = 0 for x in nums: if x - 1 not in nums: y = x + 1 while y in nums: y+=1 best = max(best, y -x) return best </description>
			<content type="html"><![CDATA[<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>
<p>Your algorithm should run in O(n) complexity.</p>
<p>Example:</p>
<pre><code>Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestConsecutive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">nums</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">best</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
                <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">while</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
                    <span class="n">y</span><span class="o">+=</span><span class="mi">1</span>
                <span class="n">best</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">best</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">best</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Insert Into a Sorted Circular Linked List</title>
			<link>https://jasonyangshadow.win/posts/insert-into-a-sorted-circular-linked-list/</link>
			<pubDate>Sun, 19 Apr 2020 19:52:20 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/insert-into-a-sorted-circular-linked-list/</guid>
			<description>Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value insertVal into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.
If there are multiple suitable places for insertion, you may choose any place to insert the new value.</description>
			<content type="html"><![CDATA[<p>Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value insertVal into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.</p>
<p>If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.</p>
<p>If the list is empty (i.e., given node is null), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/01/19/example_1_before_65p.jpg" alt="image"></p>
<pre><code>Input: head = [3,4,1], insertVal = 2
Output: [3,4,1,2]
Explanation: In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.
</code></pre><p><img src="https://assets.leetcode.com/uploads/2019/01/19/example_1_after_65p.jpg" alt="image"></p>
<p>Example 2:</p>
<pre><code>Input: head = [], insertVal = 1
Output: [1]
Explanation: The list is empty (given head is null). We create a new single circular list and return the reference to that single node.
</code></pre><p>Example 3:</p>
<pre><code>Input: head = [1], insertVal = 0
Output: [1,0]
</code></pre><p>Constraints:</p>
<p>0 &lt;= Number of Nodes &lt;= 5 * 10^4
-10^6 &lt;= Node.val &lt;= 10^6
-10^6 &lt;= insertVal &lt;= 10^6</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># Definition for a Node.
</span><span class="s2">class Node:
</span><span class="s2">    def __init__(self, val=None, next=None):
</span><span class="s2">        self.val = val
</span><span class="s2">        self.next = next
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="s1">&#39;Node&#39;</span><span class="p">,</span> <span class="n">insertVal</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;Node&#39;</span><span class="p">:</span>
        <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">insertVal</span><span class="p">,</span> <span class="n">head</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="n">head</span><span class="p">:</span>
            <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">insertVal</span><span class="p">)</span>
            <span class="n">new_node</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">new_node</span>
            <span class="k">return</span> <span class="n">new_node</span>
        
        <span class="n">node</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span> <span class="ow">and</span> <span class="p">(</span><span class="n">insertVal</span> <span class="o">&lt;=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">val</span> <span class="ow">or</span> <span class="n">insertVal</span> <span class="o">&gt;=</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">):</span>
                <span class="k">break</span>
            <span class="k">elif</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">insertVal</span> <span class="o">&lt;=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">elif</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span> <span class="o">==</span> <span class="n">head</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
        
        <span class="n">new_node</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
        <span class="n">node</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">new_node</span>
        <span class="k">return</span> <span class="n">head</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Palindrome Permutation 2</title>
			<link>https://jasonyangshadow.win/posts/palindrome-permutation-2/</link>
			<pubDate>Sun, 19 Apr 2020 18:51:23 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/palindrome-permutation-2/</guid>
			<description>Given a string s, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.
Example 1:
Input: &amp;quot;aabb&amp;quot; Output: [&amp;quot;abba&amp;quot;, &amp;quot;baab&amp;quot;] Example 2:
Input: &amp;quot;abc&amp;quot; Output: [] class Solution: def generatePalindromes(self, s: str) -&amp;gt; List[str]: count = collections.Counter(s) mid = [k for k, v in count.items() if v % 2 == 1] if len(mid) &amp;gt; 1: return [] mid = &amp;#39;&amp;#39; if mid == [] else mid[0] half = &amp;#39;&amp;#39;.</description>
			<content type="html"><![CDATA[<p>Given a string s, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;aabb&quot;
Output: [&quot;abba&quot;, &quot;baab&quot;]
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;abc&quot;
Output: []
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generatePalindromes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">[</span><span class="n">k</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">count</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">v</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        
        <span class="n">mid</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="k">if</span> <span class="n">mid</span> <span class="o">==</span> <span class="p">[]</span> <span class="k">else</span> <span class="n">mid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">half</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">k</span> <span class="o">*</span> <span class="p">(</span><span class="n">v</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">count</span><span class="o">.</span><span class="n">items</span><span class="p">()])</span>
        <span class="n">half</span> <span class="o">=</span> <span class="p">[</span><span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">half</span><span class="p">]</span>
        
        <span class="k">def</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="n">tmp</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">end</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">tmp</span><span class="p">):</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                <span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span> <span class="o">+</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">cur</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">end</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">half</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">half</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
                        <span class="k">continue</span>
                    <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">tmp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">half</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                    <span class="n">backtrack</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="n">tmp</span><span class="p">)</span>
                    <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
                    <span class="n">tmp</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">backtrack</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">half</span><span class="p">),[])</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Palindrome Partition</title>
			<link>https://jasonyangshadow.win/posts/palindrome-partition/</link>
			<pubDate>Sun, 19 Apr 2020 07:53:14 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/palindrome-partition/</guid>
			<description>Given a string s, partition s such that every substring of the partition is a palindrome.
Return all possible palindrome partitioning of s.
Example:
Input: &amp;quot;aab&amp;quot; Output: [ [&amp;quot;aa&amp;quot;,&amp;quot;b&amp;quot;], [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;] ] class Solution: def partition(self, s: str) -&amp;gt; List[List[str]]: def backtrack(start, end, tmp): if start == end: ans.append(tmp[:]) for i in range(start, end): cur = s[start:i+1] if cur == cur[::-1]: tmp.append(cur) backtrack(i+1, end, tmp) tmp.pop() ans = [] backtrack(0, len(s), []) return ans </description>
			<content type="html"><![CDATA[<p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<p>Example:</p>
<pre><code>Input: &quot;aab&quot;
Output:
[
  [&quot;aa&quot;,&quot;b&quot;],
  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]]:</span>
        <span class="k">def</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">tmp</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">:</span>
                <span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">[:])</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="n">cur</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">tmp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
                    <span class="n">backtrack</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">tmp</span><span class="p">)</span>
                    <span class="n">tmp</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">backtrack</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="p">[])</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Permutations 2</title>
			<link>https://jasonyangshadow.win/posts/permutations-2/</link>
			<pubDate>Sat, 18 Apr 2020 19:39:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/permutations-2/</guid>
			<description>Given a collection of numbers that might contain duplicates, return all possible unique permutations.
Example:
Input: [1,1,2] Output: [ [1,1,2], [1,2,1], [2,1,1] ] class Solution: def permuteUnique(self, nums: List[int]) -&amp;gt; List[List[int]]: def backtrack(tmp, size): if len(tmp) == size: ans.append(tmp[:]) else: for i in range(size): if visited[i] or ( i&amp;gt; 0 and nums[i-1] == nums[i] and not visited[i-1]): continue visited[i] = True tmp.append(nums[i]) backtrack(tmp, size) tmp.pop() visited[i] = False ans = [] visited = [False]*len(nums) nums.</description>
			<content type="html"><![CDATA[<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>
<p>Example:</p>
<pre><code>Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">permuteUnique</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">def</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span> <span class="o">==</span> <span class="n">size</span><span class="p">:</span>
                <span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">[:])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="p">(</span> <span class="n">i</span><span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
                        <span class="k">continue</span>
                    <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">tmp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                    <span class="n">backtrack</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
                    <span class="n">tmp</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                    <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">nums</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
        <span class="n">backtrack</span><span class="p">([],</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Continuous Subarray Sum</title>
			<link>https://jasonyangshadow.win/posts/continuous-subarray-sum/</link>
			<pubDate>Sat, 18 Apr 2020 17:11:41 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/continuous-subarray-sum/</guid>
			<description>Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.
Example 1:
Input: [23, 2, 4, 6, 7], k=6 Output: True Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.</description>
			<content type="html"><![CDATA[<p>Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.</p>
<p>Example 1:</p>
<pre><code>Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
</code></pre><p>Example 2:</p>
<pre><code>Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
</code></pre><p>Note:</p>
<p>The length of the array won&rsquo;t exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">checkSubarraySum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">mapping</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">accumulate</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">key</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">%</span> <span class="n">k</span> <span class="k">if</span> <span class="n">k</span> <span class="k">else</span> <span class="n">prefix</span>
            <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">mapping</span><span class="p">:</span>
                <span class="n">mapping</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">elif</span> <span class="n">i</span> <span class="o">-</span> <span class="n">mapping</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Closet Leaf in a Binary Tree</title>
			<link>https://jasonyangshadow.win/posts/closet-leaf-in-a-binary-tree/</link>
			<pubDate>Fri, 17 Apr 2020 15:39:18 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/closet-leaf-in-a-binary-tree/</guid>
			<description>Given a binary tree where every node has a unique value, and a target key k, find the value of the nearest leaf node to target k in the tree.
Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.
In the following examples, the input tree is represented in flattened form row by row.</description>
			<content type="html"><![CDATA[<p>Given a binary tree where every node has a unique value, and a target key k, find the value of the nearest leaf node to target k in the tree.</p>
<p>Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.</p>
<p>In the following examples, the input tree is represented in flattened form row by row. The actual root tree given will be a TreeNode object.</p>
<p>Example 1:</p>
<pre><code>Input:
root = [1, 3, 2], k = 1
Diagram of binary tree:
          1
         / \
        3   2

Output: 2 (or 3)

Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.
</code></pre><p>Example 2:</p>
<pre><code>Input:
root = [1], k = 1
Output: 1

Explanation: The nearest leaf node is the root node itself.
</code></pre><p>Example 3:</p>
<pre><code>Input:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6

Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.
</code></pre><p>Note:
root represents a binary tree with at least 1 node and at most 1000 nodes.
Every node has a unique node.val in range [1, 1000].
There exists some node in the given binary tree for which node.val == k.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findClosestLeaf</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1">#find the target k in tree firstly      </span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">pre</span><span class="p">,</span> <span class="n">dic</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">root</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">root</span>
            
            <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">root</span><span class="p">,</span> <span class="n">dic</span><span class="p">)</span> <span class="ow">or</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">root</span><span class="p">,</span> <span class="n">dic</span><span class="p">)</span>
        
        
        <span class="n">node</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">dic</span><span class="p">)</span>
        <span class="n">q</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">]</span>
        <span class="n">visit</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
            <span class="c1">#get the first item in position 0</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">visit</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">curr</span><span class="p">)</span>
            <span class="c1">#we found it, return its val</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">curr</span><span class="o">.</span><span class="n">left</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">curr</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">curr</span><span class="o">.</span><span class="n">val</span>
            <span class="c1">#go left child</span>
            <span class="k">if</span> <span class="n">curr</span><span class="o">.</span><span class="n">left</span> <span class="ow">and</span> <span class="n">curr</span><span class="o">.</span><span class="n">left</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">visit</span><span class="p">:</span>
                <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">curr</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="c1">#then go right child</span>
            <span class="k">if</span> <span class="n">curr</span><span class="o">.</span><span class="n">right</span> <span class="ow">and</span> <span class="n">curr</span><span class="o">.</span><span class="n">right</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">visit</span><span class="p">:</span>
                <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">curr</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            <span class="c1">#then go to parent</span>
            <span class="k">if</span> <span class="n">curr</span> <span class="ow">in</span> <span class="n">dic</span> <span class="ow">and</span> <span class="n">dic</span><span class="p">[</span><span class="n">curr</span><span class="p">]</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">dic</span><span class="p">[</span><span class="n">curr</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">visit</span><span class="p">:</span>
                <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">curr</span><span class="p">])</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Phone Directory</title>
			<link>https://jasonyangshadow.win/posts/design-phone-directory/</link>
			<pubDate>Fri, 17 Apr 2020 15:16:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-phone-directory/</guid>
			<description>Design a Phone Directory which supports the following operations:
get: Provide a number which is not assigned to anyone. check: Check if a number is available or not. release: Recycle or release a number. Example:
// Init a phone directory containing a total of 3 numbers: 0, 1, and 2. PhoneDirectory directory = new PhoneDirectory(3); // It can return any available phone number. Here we assume it returns 0. directory.get(); // Assume it returns 1.</description>
			<content type="html"><![CDATA[<p>Design a Phone Directory which supports the following operations:</p>
<p>get: Provide a number which is not assigned to anyone.
check: Check if a number is available or not.
release: Recycle or release a number.
Example:</p>
<pre><code>// Init a phone directory containing a total of 3 numbers: 0, 1, and 2.
PhoneDirectory directory = new PhoneDirectory(3);

// It can return any available phone number. Here we assume it returns 0.
directory.get();

// Assume it returns 1.
directory.get();

// The number 2 is available, so return true.
directory.check(2);

// It returns 2, the only number that is left.
directory.get();

// The number 2 is no longer available, so return false.
directory.check(2);

// Release number 2 back to the pool.
directory.release(2);

// Number 2 is available again, return true.
directory.check(2);
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">PhoneDirectory</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">maxNumbers</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here
</span><span class="s2">        @param maxNumbers - The maximum numbers that can be stored in the phone directory.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">maxNumbers</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Provide a number which is not assigned to anyone.
</span><span class="s2">        @return - Return an available number. Return -1 if none is available.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)):</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">return</span> <span class="n">i</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        

    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Check if a number is available or not.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">number</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
        

    <span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Recycle or release a number.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">number</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>


<span class="c1"># Your PhoneDirectory object will be instantiated and called as such:</span>
<span class="c1"># obj = PhoneDirectory(maxNumbers)</span>
<span class="c1"># param_1 = obj.get()</span>
<span class="c1"># param_2 = obj.check(number)</span>
<span class="c1"># obj.release(number)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Confusing Number 2</title>
			<link>https://jasonyangshadow.win/posts/confusing-number-2/</link>
			<pubDate>Wed, 15 Apr 2020 16:42:44 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/confusing-number-2/</guid>
			<description>We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid.
A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.(Note that the rotated number can be greater than the original number.</description>
			<content type="html"><![CDATA[<p>We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid.</p>
<p>A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.(Note that the rotated number can be greater than the original number.)</p>
<p>Given a positive integer N, return the number of confusing numbers between 1 and N inclusive.</p>
<p>Example 1:</p>
<pre><code>Input: 20
Output: 6
Explanation: 
The confusing numbers are [6,9,10,16,18,19].
6 converts to 9.
9 converts to 6.
10 converts to 01 which is just 1.
16 converts to 91.
18 converts to 81.
19 converts to 61.
</code></pre><p>Example 2:</p>
<pre><code>Input: 100
Output: 19
Explanation: 
The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].
</code></pre><p>Note:</p>
<p>1 &lt;= N &lt;= 10^9</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">confusingNumberII</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">valid</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>
        <span class="n">m</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">:</span><span class="mi">9</span><span class="p">,</span><span class="mi">8</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">:</span><span class="mi">6</span><span class="p">}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">def</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">rotation</span><span class="p">,</span> <span class="n">digit</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="n">v</span> <span class="o">!=</span> <span class="n">rotation</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">valid</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">v</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">:</span>
                    <span class="n">backtrack</span><span class="p">(</span><span class="n">v</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">digit</span> <span class="o">+</span> <span class="n">rotation</span><span class="p">,</span> <span class="mi">10</span><span class="o">*</span><span class="n">digit</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">N</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span> <span class="n">backtrack</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">N</span> <span class="o">&gt;=</span> <span class="mi">6</span><span class="p">:</span> <span class="n">backtrack</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">N</span> <span class="o">&gt;=</span> <span class="mi">8</span><span class="p">:</span> <span class="n">backtrack</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">N</span> <span class="o">&gt;=</span> <span class="mi">9</span><span class="p">:</span> <span class="n">backtrack</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> 
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Shortest Distance From All Buildings</title>
			<link>https://jasonyangshadow.win/posts/shortest-distance-from-all-buildings/</link>
			<pubDate>Wed, 15 Apr 2020 15:08:39 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/shortest-distance-from-all-buildings/</guid>
			<description>You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:
Each 0 marks an empty land which you can pass by freely. Each 1 marks a building which you cannot pass through. Each 2 marks an obstacle which you cannot pass through.</description>
			<content type="html"><![CDATA[<p>You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:</p>
<p>Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
Example:</p>
<pre><code>Input: [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 7 

Explanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2),
             the point (1,2) is an ideal empty land to build a house, as the total 
             travel distance of 3+3+1=7 is minimal. So return 7.
</code></pre><p>Note:
There will be at least one building. If it is not possible to build such house according to the above rules, return -1.</p>
<p>Use hit to record how many times a 0 grid has been reached and use distSum to record the sum of distance from all 1 grids to this 0 grid. A powerful pruning is that during the BFS we use count1 to count how many 1 grids we reached. If count1 &lt; buildings then we know not all 1 grids are connected are we can return -1 immediately, which greatly improved speed (beat 100% submissions).</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">shortestDistance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">grid</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">M</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">buildings</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">sum</span><span class="p">(</span><span class="n">val</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">grid</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">line</span> <span class="k">if</span> <span class="n">val</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">hit</span><span class="p">,</span> <span class="n">distSum</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">)],</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">)]</span>
    
        <span class="k">def</span> <span class="nf">BFS</span><span class="p">(</span><span class="n">start_x</span><span class="p">,</span> <span class="n">start_y</span><span class="p">):</span>
            <span class="n">visited</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">)]</span>
            <span class="n">visited</span><span class="p">[</span><span class="n">start_x</span><span class="p">][</span><span class="n">start_y</span><span class="p">],</span> <span class="n">count1</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">([(</span><span class="n">start_x</span><span class="p">,</span> <span class="n">start_y</span><span class="p">,</span> <span class="mi">0</span><span class="p">)])</span>
            <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
                <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)):</span>
                    <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">M</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                        <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                        <span class="k">if</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                            <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">dist</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
                            <span class="n">hit</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                            <span class="n">distSum</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dist</span> <span class="o">+</span> <span class="mi">1</span>
                        <span class="k">elif</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                            <span class="n">count1</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="n">count1</span> <span class="o">==</span> <span class="n">buildings</span>  
    
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="k">if</span> <span class="ow">not</span> <span class="n">BFS</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="nb">min</span><span class="p">([</span><span class="n">distSum</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="ow">and</span> <span class="n">hit</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">buildings</span><span class="p">]</span> <span class="ow">or</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Capacity to Ship Packages Within D Days</title>
			<link>https://jasonyangshadow.win/posts/capacity-to-ship-packages-within-d-days/</link>
			<pubDate>Wed, 15 Apr 2020 13:44:48 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/capacity-to-ship-packages-within-d-days/</guid>
			<description>A conveyor belt has packages that must be shipped from one port to another within D days.
The i-th package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.
Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within D days.</description>
			<content type="html"><![CDATA[<p>A conveyor belt has packages that must be shipped from one port to another within D days.</p>
<p>The i-th package on the conveyor belt has a weight of weights[i].  Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.</p>
<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within D days.</p>
<p>Example 1:</p>
<pre><code>Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5
Output: 15
Explanation: 
A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10

Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. 
</code></pre><p>Example 2:</p>
<pre><code>Input: weights = [3,2,2,4,1,4], D = 3
Output: 6
Explanation: 
A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:
1st day: 3, 2
2nd day: 2, 4
3rd day: 1, 4
</code></pre><p>Example 3:</p>
<pre><code>Input: weights = [1,2,3,1,1], D = 4
Output: 3
Explanation: 
1st day: 1
2nd day: 2
3rd day: 3
4th day: 1, 1
</code></pre><p>Note:</p>
<p>1 &lt;= D &lt;= weights.length &lt;= 50000
1 &lt;= weights[i] &lt;= 500</p>
<p>Use binary search to find proper minimum capacity.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">shipWithinDays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">weights</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">D</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">weights</span><span class="p">),</span> <span class="nb">sum</span><span class="p">(</span><span class="n">weights</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">mid</span><span class="p">,</span> <span class="n">need</span> <span class="p">,</span><span class="n">cur</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">weights</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">cur</span> <span class="o">+</span> <span class="n">w</span> <span class="o">&gt;</span> <span class="n">mid</span><span class="p">:</span>
                    <span class="n">need</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">cur</span> <span class="o">+=</span> <span class="n">w</span>
            <span class="k">if</span> <span class="n">need</span> <span class="o">&gt;</span> <span class="n">D</span><span class="p">:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">return</span> <span class="n">left</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximum Size Subarray Sum Equals K</title>
			<link>https://jasonyangshadow.win/posts/maximum-size-subarray-sum-equals-k/</link>
			<pubDate>Wed, 15 Apr 2020 13:25:25 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-size-subarray-sum-equals-k/</guid>
			<description>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn&amp;rsquo;t one, return 0 instead.
Note: The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.
Example 1:
Input: nums = [1, -1, 5, -2, 3], k = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.</description>
			<content type="html"><![CDATA[<p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn&rsquo;t one, return 0 instead.</p>
<p>Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.</p>
<p>Example 1:</p>
<pre><code>Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [-2, -1, 2, 1], k = 1
Output: 2 
Explanation: The subarray [-1, 2] sums to 1 and is the longest.
Follow Up:
Can you do it in O(n) time?
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSubArrayLen</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">ans</span><span class="p">,</span> <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        <span class="n">mp</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">}</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">acc</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">acc</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">mp</span><span class="p">:</span>
                <span class="n">mp</span><span class="p">[</span><span class="n">acc</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">if</span> <span class="n">acc</span> <span class="o">-</span><span class="n">k</span> <span class="ow">in</span> <span class="n">mp</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="n">mp</span><span class="p">[</span><span class="n">acc</span><span class="o">-</span><span class="n">k</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Divide Chocolate</title>
			<link>https://jasonyangshadow.win/posts/divide-chocolate/</link>
			<pubDate>Tue, 14 Apr 2020 17:55:42 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/divide-chocolate/</guid>
			<description>You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array sweetness.
You want to share the chocolate with your K friends so you start cutting the chocolate bar into K+1 pieces using K cuts, each piece consists of some consecutive chunks.
Being generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.</description>
			<content type="html"><![CDATA[<p>You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array sweetness.</p>
<p>You want to share the chocolate with your K friends so you start cutting the chocolate bar into K+1 pieces using K cuts, each piece consists of some consecutive chunks.</p>
<p>Being generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.</p>
<p>Find the maximum total sweetness of the piece you can get by cutting the chocolate bar optimally.</p>
<p>Example 1:</p>
<pre><code>Input: sweetness = [1,2,3,4,5,6,7,8,9], K = 5
Output: 6
Explanation: You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]
</code></pre><p>Example 2:</p>
<pre><code>Input: sweetness = [5,6,7,8,9,1,2,3,4], K = 8
Output: 1
Explanation: There is only one way to cut the bar into 9 pieces.
</code></pre><p>Example 3:</p>
<pre><code>Input: sweetness = [1,2,2,1,2,2,1,2,2], K = 2
Output: 5
Explanation: You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]
</code></pre><p>Constraints:</p>
<p>0 &lt;= K &lt; sweetness.length &lt;= 10^4
1 &lt;= sweetness[i] &lt;= 10^5</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maximizeSweetness</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sweetness</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">K</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="n">sweetness</span><span class="p">)</span><span class="o">//</span><span class="p">(</span><span class="n">K</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cuts</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">sweetness</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">+=</span> <span class="n">a</span>
                <span class="k">if</span> <span class="n">cur</span> <span class="o">&gt;=</span> <span class="n">mid</span><span class="p">:</span>
                    <span class="n">cuts</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">if</span> <span class="n">cuts</span> <span class="o">&gt;</span> <span class="n">K</span><span class="p">:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">right</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Guess the Word</title>
			<link>https://jasonyangshadow.win/posts/guess-the-word/</link>
			<pubDate>Tue, 14 Apr 2020 17:00:50 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/guess-the-word/</guid>
			<description>This problem is an interactive problem new to the LeetCode platform.
We are given a word list of unique words, each word is 6 letters long, and one word in this list is chosen as secret.
You may call master.guess(word) to guess a word. The guessed word should have type string and must be from the original list with 6 lowercase letters.
This function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word.</description>
			<content type="html"><![CDATA[<p>This problem is an interactive problem new to the LeetCode platform.</p>
<p>We are given a word list of unique words, each word is 6 letters long, and one word in this list is chosen as secret.</p>
<p>You may call master.guess(word) to guess a word.  The guessed word should have type string and must be from the original list with 6 lowercase letters.</p>
<p>This function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word.  Also, if your guess is not in the given wordlist, it will return -1 instead.</p>
<p>For each test case, you have 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or less calls to master.guess and at least one of these guesses was the secret, you pass the testcase.</p>
<p>Besides the example test case below, there will be 5 additional test cases, each with 100 words in the word list.  The letters of each word in those testcases were chosen independently at random from &lsquo;a&rsquo; to &lsquo;z&rsquo;, such that every word in the given word lists is unique.</p>
<p>Example 1:</p>
<pre><code>Input: secret = &quot;acckzz&quot;, wordlist = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;]

Explanation:

master.guess(&quot;aaaaaa&quot;) returns -1, because &quot;aaaaaa&quot; is not in wordlist.
master.guess(&quot;acckzz&quot;) returns 6, because &quot;acckzz&quot; is secret and has all 6 matches.
master.guess(&quot;ccbazz&quot;) returns 3, because &quot;ccbazz&quot; has 3 matches.
master.guess(&quot;eiowzz&quot;) returns 2, because &quot;eiowzz&quot; has 2 matches.
master.guess(&quot;abcczz&quot;) returns 4, because &quot;abcczz&quot; has 4 matches.
</code></pre><p>We made 5 calls to master.guess and one of them was the secret, so we pass the test case.
Note:  Any solutions that attempt to circumvent the judge will result in disqualification.</p>
<p>There is no exact correct solution, as we need to randomly check if our guess is correct.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># This is Master&#39;s API interface.</span>
<span class="c1"># You should not implement it, or speculate about its implementation</span>
<span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># class Master:</span>
<span class="c1">#     def guess(self, word: str) -&gt; int:</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findSecretWord</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">wordlist</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">master</span><span class="p">:</span> <span class="s1">&#39;Master&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">w1</span><span class="p">,</span><span class="n">w2</span><span class="p">):</span>
            <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">w1</span><span class="p">,</span><span class="n">w2</span><span class="p">))</span>
        
        <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">wordlist</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
            <span class="n">g</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">wordlist</span><span class="p">)</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">master</span><span class="o">.</span><span class="n">guess</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
            <span class="n">wordlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordlist</span> <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">w</span><span class="p">))</span> <span class="o">==</span> <span class="n">x</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Employee Free Time</title>
			<link>https://jasonyangshadow.win/posts/employee-free-time/</link>
			<pubDate>Tue, 14 Apr 2020 16:41:24 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/employee-free-time/</guid>
			<description>We are given a list schedule of employees, which represents the working time for each employee.
Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.
Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.
(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].</description>
			<content type="html"><![CDATA[<p>We are given a list schedule of employees, which represents the working time for each employee.</p>
<p>Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.</p>
<p>Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.</p>
<p>(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined).  Also, we wouldn&rsquo;t include intervals like [5, 5] in our answer, as they have zero length.</p>
<p>Example 1:</p>
<pre><code>Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation: There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].
We discard any intervals that contain inf as they aren't finite.
</code></pre><p>Example 2:</p>
<pre><code>Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
Output: [[5,6],[7,9]]
</code></pre><p>Constraints:</p>
<p>1 &lt;= schedule.length , schedule[i].length &lt;= 50
0 &lt;= schedule[i].start &lt; schedule[i].end &lt;= 10^8</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># Definition for an Interval.
</span><span class="s2">class Interval:
</span><span class="s2">    def __init__(self, start: int = None, end: int = None):
</span><span class="s2">        self.start = start
</span><span class="s2">        self.end = end
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">employeeFreeTime</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">schedule</span><span class="p">:</span> <span class="s1">&#39;[[Interval]]&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;[Interval]&#39;</span><span class="p">:</span>
        <span class="n">ints</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">schedule</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">],</span> <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">start</span><span class="p">)</span>
        <span class="n">res</span><span class="p">,</span> <span class="n">pre</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">ints</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ints</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">pre</span><span class="o">.</span><span class="n">end</span> <span class="ow">and</span> <span class="n">i</span><span class="o">.</span><span class="n">end</span> <span class="o">&gt;</span> <span class="n">pre</span><span class="o">.</span><span class="n">end</span><span class="p">:</span>
                <span class="n">pre</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">end</span>
            <span class="k">elif</span> <span class="n">i</span><span class="o">.</span><span class="n">start</span> <span class="o">&gt;</span> <span class="n">pre</span><span class="o">.</span><span class="n">end</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Interval</span><span class="p">(</span><span class="n">pre</span><span class="o">.</span><span class="n">end</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">start</span><span class="p">))</span>
                <span class="n">pre</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Domino Rotations for Equal Row</title>
			<link>https://jasonyangshadow.win/posts/minimum-domino-rotations-for-equal-row/</link>
			<pubDate>Tue, 14 Apr 2020 12:29:37 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-domino-rotations-for-equal-row/</guid>
			<description>In a row of dominoes, A[i] and B[i] represent the top and bottom halves of the i-th domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)
We may rotate the i-th domino, so that A[i] and B[i] swap values.
Return the minimum number of rotations so that all the values in A are the same, or all the values in B are the same.</description>
			<content type="html"><![CDATA[<p>In a row of dominoes, A[i] and B[i] represent the top and bottom halves of the i-th domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)</p>
<p>We may rotate the i-th domino, so that A[i] and B[i] swap values.</p>
<p>Return the minimum number of rotations so that all the values in A are the same, or all the values in B are the same.</p>
<p>If it cannot be done, return -1.</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/03/08/domino.png" alt="image"></p>
<pre><code>Input: A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]
Output: 2
Explanation: 
The first figure represents the dominoes as given by A and B: before we do any rotations.
If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.
</code></pre><p>Example 2:</p>
<pre><code>Input: A = [3,5,1,2,3], B = [3,6,3,3,4]
Output: -1
Explanation: 
In this case, it is not possible to rotate the dominoes to make one row of values equal.
</code></pre><p>Note:</p>
<p>1 &lt;= A[i], B[i] &lt;= 6
2 &lt;= A.length == B.length &lt;= 20000</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minDominoRotations</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">B</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">B</span><span class="p">[</span><span class="mi">0</span><span class="p">]]:</span>
            <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">x</span> <span class="ow">in</span> <span class="n">d</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">)):</span>
                <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">-</span> <span class="nb">max</span><span class="p">(</span><span class="n">A</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">B</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Divide Array in Sets of K Consecutive Numbers</title>
			<link>https://jasonyangshadow.win/posts/divide-array-in-sets-of-k-consecutive-numbers/</link>
			<pubDate>Tue, 14 Apr 2020 12:10:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/divide-array-in-sets-of-k-consecutive-numbers/</guid>
			<description>Given an array of integers nums and a positive integer k, find whether it&amp;rsquo;s possible to divide this array into sets of k consecutive numbers Return True if its possible otherwise return False.
Example 1:
Input: nums = [1,2,3,3,4,4,5,6], k = 4 Output: true Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6]. Example 2:
Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3 Output: true Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].</description>
			<content type="html"><![CDATA[<p>Given an array of integers nums and a positive integer k, find whether it&rsquo;s possible to divide this array into sets of k consecutive numbers
Return True if its possible otherwise return False.</p>
<p>Example 1:</p>
<pre><code>Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].
</code></pre><p>Example 3:</p>
<pre><code>Input: nums = [3,3,2,2,1,1], k = 3
Output: true
</code></pre><p>Example 4:</p>
<pre><code>Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.
</code></pre><p>Constraints:</p>
<p>1 &lt;= nums.length &lt;= 10^5
1 &lt;= nums[i] &lt;= 10^9
1 &lt;= k &lt;= nums.length</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isPossibleDivide</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">keys</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">count</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">count</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">key</span><span class="o">+</span><span class="n">k</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">:</span>
                        <span class="k">return</span> <span class="bp">False</span>
                    <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="n">num</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximum of Absolute Value Expression</title>
			<link>https://jasonyangshadow.win/posts/maximum-of-absolute-value-expression/</link>
			<pubDate>Mon, 13 Apr 2020 11:03:48 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-of-absolute-value-expression/</guid>
			<description>Given two arrays of integers with equal lengths, return the maximum value of:
|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|
where the maximum is taken over all 0 &amp;lt;= i, j &amp;lt; arr1.length.
Example 1:
Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6] Output: 13 Example 2:
Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] Output: 20 Constraints:
2 &amp;lt;= arr1.length == arr2.length &amp;lt;= 40000 -10^6 &amp;lt;= arr1[i], arr2[i] &amp;lt;= 10^6</description>
			<content type="html"><![CDATA[<p>Given two arrays of integers with equal lengths, return the maximum value of:</p>
<p>|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|</p>
<p>where the maximum is taken over all 0 &lt;= i, j &lt; arr1.length.</p>
<p>Example 1:</p>
<pre><code>Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
Output: 13
</code></pre><p>Example 2:</p>
<pre><code>Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
Output: 20
</code></pre><p>Constraints:</p>
<p>2 &lt;= arr1.length == arr2.length &lt;= 40000
-10^6 &lt;= arr1[i], arr2[i] &lt;= 10^6</p>
<p>TLE version</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxAbsValExpr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">arr2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr1</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr1</span><span class="p">)):</span>
                <span class="n">res</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="nb">abs</span><span class="p">(</span><span class="n">arr1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr1</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr2</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div><p>Explanation is here:<br>
<a href="https://leetcode.com/problems/maximum-of-absolute-value-expression/discuss/340075/c%2B%2B-beats-100-(both-time-and-memory)-with-algorithm-and-image">https://leetcode.com/problems/maximum-of-absolute-value-expression/discuss/340075/c%2B%2B-beats-100-(both-time-and-memory)-with-algorithm-and-image</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxAbsValExpr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">arr2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">arr1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">arr2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr1</span><span class="p">))]</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="n">arr1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">arr2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr1</span><span class="p">))]</span>
        <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">arr1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr1</span><span class="p">))]</span>
        <span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="n">arr1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr1</span><span class="p">))]</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">max</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Image Overlap</title>
			<link>https://jasonyangshadow.win/posts/image-overlap/</link>
			<pubDate>Mon, 13 Apr 2020 10:50:30 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/image-overlap/</guid>
			<description>Two images A and B are given, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)
We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image. After, the overlap of this translation is the number of positions that have a 1 in both images.</description>
			<content type="html"><![CDATA[<p>Two images A and B are given, represented as binary, square matrices of the same size.  (A binary matrix has only 0s and 1s as values.)</p>
<p>We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.  After, the overlap of this translation is the number of positions that have a 1 in both images.</p>
<p>(Note also that a translation does not include any kind of rotation.)</p>
<p>What is the largest possible overlap?</p>
<p>Example 1:</p>
<pre><code>Input: A = [[1,1,0],
            [0,1,0],
            [0,1,0]]
       B = [[0,0,0],
            [0,1,1],
            [0,0,1]]
Output: 3
Explanation: We slide A to right by 1 unit and down by 1 unit.
</code></pre><p>Notes:</p>
<p>1 &lt;= A.length = A[0].length = B.length = B[0].length &lt;= 30
0 &lt;= A[i][j], B[i][j] &lt;= 1</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">largestOverlap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">B</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
                <span class="k">if</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">b</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">t1</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">t2</span> <span class="ow">in</span> <span class="n">b</span><span class="p">:</span>
                <span class="n">t3</span> <span class="o">=</span> <span class="p">(</span><span class="n">t2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">t1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">t2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">t1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">d</span><span class="p">[</span><span class="n">t3</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="n">t3</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Campus Bikes</title>
			<link>https://jasonyangshadow.win/posts/campus-bikes/</link>
			<pubDate>Mon, 13 Apr 2020 10:02:39 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/campus-bikes/</guid>
			<description>On a campus represented as a 2D grid, there are N workers and M bikes, with N &amp;lt;= M. Each worker and bike is a 2D coordinate on this grid.
Our goal is to assign a bike to each worker. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other, and assign the bike to that worker. (If there are multiple (worker, bike) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index).</description>
			<content type="html"><![CDATA[<p>On a campus represented as a 2D grid, there are N workers and M bikes, with N &lt;= M. Each worker and bike is a 2D coordinate on this grid.</p>
<p>Our goal is to assign a bike to each worker. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other, and assign the bike to that worker. (If there are multiple (worker, bike) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index). We repeat this process until there are no available workers.</p>
<p>The Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.</p>
<p>Return a vector ans of length N, where ans[i] is the index (0-indexed) of the bike that the i-th worker is assigned to.</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/03/06/1261_example_1_v2.png" alt="image"></p>
<pre><code>Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
Output: [1,0]
Explanation: 
Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is [1, 0].
</code></pre><p>Example 2:<br>
<img src="https://assets.leetcode.com/uploads/2019/03/06/1261_example_2_v2.png" alt="image"></p>
<pre><code>Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
Output: [0,2,1]
Explanation: 
Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is [0,2,1].
</code></pre><p>Note:</p>
<p>0 &lt;= workers[i][j], bikes[i][j] &lt; 1000
All worker and bike locations are distinct.
1 &lt;= workers.length &lt;= bikes.length &lt;= 1000</p>
<p>A native algorithms</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">assignBikes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">workers</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">bikes</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">distance</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">workers</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bikes</span><span class="p">)):</span>
                <span class="n">dist</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">workers</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">bikes</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="n">workers</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">bikes</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">distance</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">dist</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span>
        
        <span class="n">distance</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
        
        <span class="n">token</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">workers</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">dist</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">distance</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">j</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">token</span><span class="p">:</span>
                <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span>
                <span class="n">token</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div><p>An optimized algorithms</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">assignBikes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">workers</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">bikes</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">distances</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2001</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">workers</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span><span class="p">,(</span><span class="n">x_b</span><span class="p">,</span> <span class="n">y_b</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">bikes</span><span class="p">):</span>
                <span class="n">distance</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">x_b</span><span class="p">)</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">y_b</span><span class="p">)</span>
                <span class="n">distances</span><span class="p">[</span><span class="n">distance</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
        
        <span class="n">used_bike</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="n">assigns</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">workers</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">distance</span> <span class="ow">in</span> <span class="n">distances</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">worker</span><span class="p">,</span> <span class="n">bike</span> <span class="ow">in</span> <span class="n">distance</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">assigns</span><span class="p">[</span><span class="n">worker</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">bike</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">used_bike</span><span class="p">:</span>
                    <span class="n">used_bike</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">bike</span><span class="p">)</span>
                    <span class="n">assigns</span><span class="p">[</span><span class="n">worker</span><span class="p">]</span> <span class="o">=</span> <span class="n">bike</span>
        
        <span class="k">return</span> <span class="n">assigns</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Paint Fence</title>
			<link>https://jasonyangshadow.win/posts/paint-fence/</link>
			<pubDate>Mon, 13 Apr 2020 09:42:14 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/paint-fence/</guid>
			<description>There is a fence with n posts, each post can be painted with one of the k colors.
You have to paint all the posts such that no more than two adjacent fence posts have the same color.
Return the total number of ways you can paint the fence.
Note: n and k are non-negative integers.
Example:
Input: n = 3, k = 2 Output: 6 Explanation: Take c1 as color 1, c2 as color 2.</description>
			<content type="html"><![CDATA[<p>There is a fence with n posts, each post can be painted with one of the k colors.</p>
<p>You have to paint all the posts such that no more than two adjacent fence posts have the same color.</p>
<p>Return the total number of ways you can paint the fence.</p>
<p>Note:
n and k are non-negative integers.</p>
<p>Example:</p>
<pre><code>Input: n = 3, k = 2
Output: 6
Explanation: Take c1 as color 1, c2 as color 2. All possible ways are:

            post1  post2  post3      
 -----      -----  -----  -----       
   1         c1     c1     c2 
   2         c1     c2     c1 
   3         c1     c2     c2 
   4         c2     c1     c1  
   5         c2     c1     c2
   6         c2     c2     c1
</code></pre><pre><code>Explanation:  
If n == 1, there would be k-ways to paint.

if n == 2, there would be two situations:

2.1 You paint same color with the previous post: k*1 ways to paint, named it as same
2.2 You paint differently with the previous post: k*(k-1) ways to paint this way, named it as dif
So, you can think, if n &gt;= 3, you can always maintain these two situations,
You either paint the same color with the previous one, or differently.

Since there is a rule: &quot;no more than two adjacent fence posts have the same color.&quot;

We can further analyze:

from 2.1, since previous two are in the same color, next one you could only paint differently, and it would form one part of &quot;paint differently&quot; case in the n == 3 level, and the number of ways to paint this way would equal to same*(k-1).
from 2.2, since previous two are not the same, you can either paint the same color this time (dif*1) ways to do so, or stick to paint differently (dif*(k-1)) times.
Here you can conclude, when seeing back from the next level, ways to paint the same, or variable same would equal to dif*1 = dif, and ways to paint differently, variable dif, would equal to same*(k-1)+dif*(k-1) = (same + dif)*(k-1)
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numWays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">k</span>
        <span class="n">same</span><span class="p">,</span> <span class="n">dif</span> <span class="o">=</span> <span class="n">k</span><span class="p">,</span> <span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">same</span><span class="p">,</span> <span class="n">dif</span> <span class="o">=</span> <span class="n">dif</span><span class="p">,</span> <span class="p">(</span><span class="n">same</span> <span class="o">+</span> <span class="n">dif</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">same</span> <span class="o">+</span> <span class="n">dif</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Robot Room Cleaner</title>
			<link>https://jasonyangshadow.win/posts/robot-room-cleaner/</link>
			<pubDate>Sun, 12 Apr 2020 18:37:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/robot-room-cleaner/</guid>
			<description>Given a robot cleaner in a room modeled as a grid.
Each cell in the grid can be empty or blocked.
The robot cleaner with 4 given APIs can move forward, turn left or turn right. Each turn it made is 90 degrees.
When it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell.
Design an algorithm to clean the entire room using only the 4 given APIs shown below.</description>
			<content type="html"><![CDATA[<p>Given a robot cleaner in a room modeled as a grid.</p>
<p>Each cell in the grid can be empty or blocked.</p>
<p>The robot cleaner with 4 given APIs can move forward, turn left or turn right. Each turn it made is 90 degrees.</p>
<p>When it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell.</p>
<p>Design an algorithm to clean the entire room using only the 4 given APIs shown below.</p>
<pre><code>interface Robot {
  // returns true if next cell is open and robot moves into the cell.
  // returns false if next cell is obstacle and robot stays on the current cell.
  boolean move();

  // Robot will stay on the same cell after calling turnLeft/turnRight.
  // Each turn will be 90 degrees.
  void turnLeft();
  void turnRight();

  // Clean the current cell.
  void clean();
}
</code></pre><p>Example:</p>
<pre><code>Input:
room = [
  [1,1,1,1,1,0,1,1],
  [1,1,1,1,1,0,1,1],
  [1,0,1,1,1,1,1,1],
  [0,0,0,1,0,0,0,0],
  [1,1,1,1,1,1,1,1]
],
row = 1,
col = 3

Explanation:
All grids in the room are marked by either 0 or 1.
0 means the cell is blocked, while 1 means the cell is accessible.
The robot initially starts at the position of row=1, col=3.
From the top left corner, its position is one row below and three columns right.
Notes:
</code></pre><p>The input is only given to initialize the room and the robot&rsquo;s position internally. You must solve this problem &ldquo;blindfolded&rdquo;. In other words, you must control the robot using only the mentioned 4 APIs, without knowing the room layout and the initial robot&rsquo;s position.
The robot&rsquo;s initial position will always be in an accessible cell.
The initial direction of the robot will be facing up.
All accessible cells are connected, which means the all cells marked as 1 will be accessible by the robot.
Assume all four edges of the grid are all surrounded by wall.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># This is the robot&#39;s control interface.</span>
<span class="c1"># You should not implement it, or speculate about its implementation</span>
<span class="c1"># &#34;&#34;&#34;</span>
<span class="c1">#class Robot:</span>
<span class="c1">#    def move(self):</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#        Returns true if the cell in front is open and robot moves into the cell.</span>
<span class="c1">#        Returns false if the cell in front is blocked and robot stays in the current cell.</span>
<span class="c1">#        :rtype bool</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#</span>
<span class="c1">#    def turnLeft(self):</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#        Robot will stay in the same cell after calling turnLeft/turnRight.</span>
<span class="c1">#        Each turn will be 90 degrees.</span>
<span class="c1">#        :rtype void</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#</span>
<span class="c1">#    def turnRight(self):</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#        Robot will stay in the same cell after calling turnLeft/turnRight.</span>
<span class="c1">#        Each turn will be 90 degrees.</span>
<span class="c1">#        :rtype void</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#</span>
<span class="c1">#    def clean(self):</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#        Clean the current cell.</span>
<span class="c1">#        :rtype void</span>
<span class="c1">#        &#34;&#34;&#34;</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">cleanRoom</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">robot</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :type robot: Robot
</span><span class="s2">        :rtype: None
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="c1">#up, right, down, left</span>
        <span class="n">dirs</span> <span class="o">=</span> <span class="p">[[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
        <span class="n">path</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">clean</span><span class="p">()</span>
            <span class="n">path</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
            <span class="c1">#try 4 diretion from up, right, down, left</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">4</span><span class="p">):</span>
                <span class="n">nx</span> <span class="o">=</span> <span class="n">dirs</span><span class="p">[</span><span class="n">n</span><span class="o">%</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span>
                <span class="n">ny</span> <span class="o">=</span> <span class="n">dirs</span><span class="p">[</span><span class="n">n</span><span class="o">%</span><span class="mi">4</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">path</span> <span class="ow">and</span> <span class="n">robot</span><span class="o">.</span><span class="n">move</span><span class="p">():</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">,</span><span class="n">n</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span>
                
                <span class="c1">#we have to turn robot face</span>
                <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            
            <span class="c1">#backtrack to previous position but turning to another direction</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">move</span><span class="p">()</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            
        
        <span class="n">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># This is the robot&#39;s control interface.</span>
<span class="c1"># You should not implement it, or speculate about its implementation</span>
<span class="c1"># &#34;&#34;&#34;</span>
<span class="c1">#class Robot:</span>
<span class="c1">#    def move(self):</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#        Returns true if the cell in front is open and robot moves into the cell.</span>
<span class="c1">#        Returns false if the cell in front is blocked and robot stays in the current cell.</span>
<span class="c1">#        :rtype bool</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#</span>
<span class="c1">#    def turnLeft(self):</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#        Robot will stay in the same cell after calling turnLeft/turnRight.</span>
<span class="c1">#        Each turn will be 90 degrees.</span>
<span class="c1">#        :rtype void</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#</span>
<span class="c1">#    def turnRight(self):</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#        Robot will stay in the same cell after calling turnLeft/turnRight.</span>
<span class="c1">#        Each turn will be 90 degrees.</span>
<span class="c1">#        :rtype void</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#</span>
<span class="c1">#    def clean(self):</span>
<span class="c1">#        &#34;&#34;&#34;</span>
<span class="c1">#        Clean the current cell.</span>
<span class="c1">#        :rtype void</span>
<span class="c1">#        &#34;&#34;&#34;</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">cleanRoom</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">robot</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :type robot: Robot
</span><span class="s2">        :rtype: None
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">dirs</span> <span class="o">=</span> <span class="p">[[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
        <span class="n">path</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        
        <span class="k">def</span> <span class="nf">goback</span><span class="p">():</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">move</span><span class="p">()</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            <span class="n">robot</span><span class="o">.</span><span class="n">clean</span><span class="p">()</span>
            <span class="n">path</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">4</span><span class="p">):</span>
                <span class="n">nx</span> <span class="o">=</span> <span class="n">dirs</span><span class="p">[</span><span class="n">n</span><span class="o">%</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span>
                <span class="n">ny</span> <span class="o">=</span> <span class="n">dirs</span><span class="p">[</span><span class="n">n</span><span class="o">%</span><span class="mi">4</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">path</span> <span class="ow">and</span> <span class="n">robot</span><span class="o">.</span><span class="n">move</span><span class="p">():</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">,</span><span class="n">n</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span>
                    <span class="n">goback</span><span class="p">()</span>
                
                <span class="n">robot</span><span class="o">.</span><span class="n">turnRight</span><span class="p">()</span>
            
        
        <span class="n">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximum Sum of Two Non-overlapping Subarrays</title>
			<link>https://jasonyangshadow.win/posts/maximum-sum-of-two-nonoverlapping-subarrays/</link>
			<pubDate>Sun, 12 Apr 2020 16:01:12 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-sum-of-two-nonoverlapping-subarrays/</guid>
			<description>Given an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths L and M. (For clarification, the L-length subarray could occur before or after the M-length subarray.)
Formally, return the largest V for which V = (A[i] + A[i+1] + &amp;hellip; + A[i+L-1]) + (A[j] + A[j+1] + &amp;hellip; + A[j+M-1]) and either:
0 &amp;lt;= i &amp;lt; i + L - 1 &amp;lt; j &amp;lt; j + M - 1 &amp;lt; A.</description>
			<content type="html"><![CDATA[<p>Given an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths L and M.  (For clarification, the L-length subarray could occur before or after the M-length subarray.)</p>
<p>Formally, return the largest V for which V = (A[i] + A[i+1] + &hellip; + A[i+L-1]) + (A[j] + A[j+1] + &hellip; + A[j+M-1]) and either:</p>
<p>0 &lt;= i &lt; i + L - 1 &lt; j &lt; j + M - 1 &lt; A.length, or
0 &lt;= j &lt; j + M - 1 &lt; i &lt; i + L - 1 &lt; A.length.</p>
<p>Example 1:</p>
<pre><code>Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
</code></pre><p>Example 2:</p>
<pre><code>Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
</code></pre><p>Example 3:</p>
<pre><code>Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.
</code></pre><p>Note:</p>
<p>L &gt;= 1
M &gt;= 1
L + M &lt;= A.length &lt;= 1000
0 &lt;= A[i] &lt;= 1000</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSumTwoNoOverlap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">L</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">M</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1">#prefix sum</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
            <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        
        <span class="n">res</span><span class="p">,</span> <span class="n">lmax</span><span class="p">,</span> <span class="n">mmax</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">L</span><span class="o">+</span><span class="n">M</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">M</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">L</span><span class="o">+</span><span class="n">M</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
            <span class="c1">#lmax is sum of L items before last M items</span>
            <span class="n">lmax</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">lmax</span><span class="p">,</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">M</span><span class="p">]</span> <span class="o">-</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">M</span><span class="o">-</span><span class="n">L</span><span class="p">])</span>
            <span class="c1">#mmax is sum of M items before last L items</span>
            <span class="n">mmax</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">mmax</span><span class="p">,</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">L</span><span class="p">]</span> <span class="o">-</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">M</span><span class="o">-</span><span class="n">L</span><span class="p">])</span>
            <span class="c1">#total value,  lmax + sum of M items, no overlapping here</span>
            <span class="c1">#lmax or mmax may be maximum value of previous L items/M items</span>
            <span class="n">res</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">lmax</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">M</span><span class="p">],</span> <span class="n">mmax</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">L</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Count Servers That Communicate</title>
			<link>https://jasonyangshadow.win/posts/count-servers-that-communicate/</link>
			<pubDate>Sun, 12 Apr 2020 15:21:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/count-servers-that-communicate/</guid>
			<description>You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.
Return the number of servers that communicate with any other server.
Example 1:
Input: grid = [[1,0],[0,1]] Output: 0 Explanation: No servers can communicate with others.</description>
			<content type="html"><![CDATA[<p>You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.</p>
<p>Return the number of servers that communicate with any other server.</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-6.jpg" alt="image"></p>
<pre><code>Input: grid = [[1,0],[0,1]]
Output: 0
Explanation: No servers can communicate with others.
</code></pre><p>Example 2:<br>
<img src="https://assets.leetcode.com/uploads/2019/11/13/untitled-diagram-4.jpg" alt="image"></p>
<pre><code>Input: grid = [[1,0],[1,1]]
Output: 3
Explanation: All three servers can communicate with at least one other server.
</code></pre><p>Example 3:<br>
<img src="https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-1-3.jpg" alt="image"></p>
<pre><code>Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
Output: 4
Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.
</code></pre><p>Constraints:</p>
<p>m == grid.length
n == grid[i].length
1 &lt;= m &lt;= 250
1 &lt;= n &lt;= 250
grid[i][j] == 0 or 1</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">countServers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">),</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                    <span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">Y</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    
        <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="ow">and</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">Y</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">):</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Wiggle Sort</title>
			<link>https://jasonyangshadow.win/posts/wiggle-sort/</link>
			<pubDate>Sun, 12 Apr 2020 14:32:59 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/wiggle-sort/</guid>
			<description>Given an unsorted array nums, reorder it in-place such that nums[0] &amp;lt;= nums[1] &amp;gt;= nums[2] &amp;lt;= nums[3]&amp;hellip;.
Example:
Input: nums = [3,5,2,1,6,4] Output: One possible answer is [3,5,1,6,2,4] class Solution: def wiggleSort(self, nums: List[int]) -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34; Do not return anything, modify nums in-place instead. &amp;#34;&amp;#34;&amp;#34; if not nums: return n = len(nums) for i in range(1, n, 2): if nums[i] &amp;lt; nums[i-1]: nums[i-1], nums[i] = nums[i], nums[i-1] if i + 1 &amp;lt; n and nums[i] &amp;lt; nums[i+1]: nums[i], nums[i+1] = nums[i+1], nums[i] </description>
			<content type="html"><![CDATA[<p>Given an unsorted array nums, reorder it in-place such that nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]&hellip;.</p>
<p>Example:</p>
<pre><code>Input: nums = [3,5,2,1,6,4]
Output: One possible answer is [3,5,1,6,2,4]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">wiggleSort</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify nums in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">return</span>
        
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            
            <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest String Chain</title>
			<link>https://jasonyangshadow.win/posts/longest-string-chain/</link>
			<pubDate>Sun, 12 Apr 2020 12:43:43 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-string-chain/</guid>
			<description>Given a list of words, each word consists of English lowercase letters.
Let&amp;rsquo;s say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2. For example, &amp;ldquo;abc&amp;rdquo; is a predecessor of &amp;ldquo;abac&amp;rdquo;.
A word chain is a sequence of words [word_1, word_2, &amp;hellip;, word_k] with k &amp;gt;= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.</description>
			<content type="html"><![CDATA[<p>Given a list of words, each word consists of English lowercase letters.</p>
<p>Let&rsquo;s say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.  For example, &ldquo;abc&rdquo; is a predecessor of &ldquo;abac&rdquo;.</p>
<p>A word chain is a sequence of words [word_1, word_2, &hellip;, word_k] with k &gt;= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.</p>
<p>Return the longest possible length of a word chain with words chosen from the given list of words.</p>
<p>Example 1:</p>
<pre><code>Input: [&quot;a&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bca&quot;,&quot;bda&quot;,&quot;bdca&quot;]
Output: 4
Explanation: one of the longest word chain is &quot;a&quot;,&quot;ba&quot;,&quot;bda&quot;,&quot;bdca&quot;.
</code></pre><p>Note:</p>
<p>1 &lt;= words.length &lt;= 1000
1 &lt;= words[i].length &lt;= 16
words[i] only consists of English lowercase letters.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestStrChain</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span> <span class="nb">len</span><span class="p">):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">w</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)))</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Is Graph Bipartite</title>
			<link>https://jasonyangshadow.win/posts/is-graph-bipartite/</link>
			<pubDate>Sat, 11 Apr 2020 14:45:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/is-graph-bipartite/</guid>
			<description>Given an undirected graph, return true if and only if it is bipartite.
Recall that a graph is bipartite if we can split it&amp;rsquo;s set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.
The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.</description>
			<content type="html"><![CDATA[<p>Given an undirected graph, return true if and only if it is bipartite.</p>
<p>Recall that a graph is bipartite if we can split it&rsquo;s set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.</p>
<p>The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i] does not contain i, and it doesn&rsquo;t contain any element twice.</p>
<p>Example 1:</p>
<pre><code>Input: [[1,3], [0,2], [1,3], [0,2]]
Output: true
Explanation: 
The graph looks like this:
0----1
|    |
|    |
3----2
We can divide the vertices into two groups: {0, 2} and {1, 3}.
</code></pre><p>Example 2:</p>
<pre><code>Input: [[1,2,3], [0,2], [0,1,3], [0,2]]
Output: false
Explanation: 
The graph looks like this:
0----1
| \  |
|  \ |
3----2
We cannot find a way to divide the set of nodes into two independent subsets.
</code></pre><p>Note:</p>
<p>graph will have length in range [1, 100].
graph[i] will contain integers in range [0, graph.length - 1].
graph[i] will not contain i or duplicate values.
The graph is undirected: if any element j is in graph[i], then i will be in graph[j].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isBipartite</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">graph</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">color</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">graph</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">color</span><span class="p">:</span>
                <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">]</span>
                <span class="n">color</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
                    <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                    <span class="k">for</span> <span class="n">nei</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
                        <span class="k">if</span> <span class="n">nei</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">color</span><span class="p">:</span>
                            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nei</span><span class="p">)</span>
                            <span class="n">color</span><span class="p">[</span><span class="n">nei</span><span class="p">]</span> <span class="o">=</span> <span class="n">color</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">^</span> <span class="mi">1</span>
                        <span class="k">elif</span> <span class="n">color</span><span class="p">[</span><span class="n">nei</span><span class="p">]</span> <span class="o">==</span> <span class="n">color</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
                            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Area Rectangle</title>
			<link>https://jasonyangshadow.win/posts/minimum-area-rectangle/</link>
			<pubDate>Sat, 11 Apr 2020 14:30:15 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-area-rectangle/</guid>
			<description>Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.
If there isn&amp;rsquo;t any rectangle, return 0.
Example 1:
Input: [[1,1],[1,3],[3,1],[3,3],[2,2]] Output: 4 Example 2:
Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]] Output: 2 Note:
1 &amp;lt;= points.length &amp;lt;= 500 0 &amp;lt;= points[i][0] &amp;lt;= 40000 0 &amp;lt;= points[i][1] &amp;lt;= 40000 All points are distinct.
class Solution: def minAreaRect(self, points: List[List[int]]) -&amp;gt; int: seen = set() res = float(&amp;#34;inf&amp;#34;) for x1,y1 in points: for x2,y2 in seen: if (x1,y2) in seen and (x2,y1) in seen: area = abs(x1-x2) * abs(y2-y1) if area and area &amp;lt; res: res = area seen.</description>
			<content type="html"><![CDATA[<p>Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.</p>
<p>If there isn&rsquo;t any rectangle, return 0.</p>
<p>Example 1:</p>
<pre><code>Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4
</code></pre><p>Example 2:</p>
<pre><code>Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2
</code></pre><p>Note:</p>
<p>1 &lt;= points.length &lt;= 500
0 &lt;= points[i][0] &lt;= 40000
0 &lt;= points[i][1] &lt;= 40000
All points are distinct.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minAreaRect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">points</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="n">res</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">x1</span><span class="p">,</span><span class="n">y1</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">x2</span><span class="p">,</span><span class="n">y2</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">x1</span><span class="p">,</span><span class="n">y2</span><span class="p">)</span> <span class="ow">in</span> <span class="n">seen</span> <span class="ow">and</span> <span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">y1</span><span class="p">)</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                    <span class="n">area</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">x1</span><span class="o">-</span><span class="n">x2</span><span class="p">)</span> <span class="o">*</span> <span class="nb">abs</span><span class="p">(</span><span class="n">y2</span><span class="o">-</span><span class="n">y1</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">area</span> <span class="ow">and</span> <span class="n">area</span> <span class="o">&lt;</span> <span class="n">res</span><span class="p">:</span>
                        <span class="n">res</span> <span class="o">=</span> <span class="n">area</span>
            <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">x1</span><span class="p">,</span><span class="n">y1</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="n">res</span> <span class="k">if</span> <span class="n">res</span> <span class="o">&lt;</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Spiral Matrix 2</title>
			<link>https://jasonyangshadow.win/posts/spiral-matrix-2/</link>
			<pubDate>Sat, 11 Apr 2020 14:17:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/spiral-matrix-2/</guid>
			<description>Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.
Example:
Input: 3 Output: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ] class Solution: def generateMatrix(self, n: int) -&amp;gt; List[List[int]]: if not n: return [] res = [[0]*n for _ in range(n)] left, right, top, down, num = 0, n-1, 0, n-1, 1 while left &amp;lt;= right and top &amp;lt;= down: for i in range(left, right + 1): res[top][i] = num num += 1 top += 1 for i in range(top, down + 1): res[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): res[down][i] = num num += 1 down -= 1 for i in range(down, top - 1, -1): res[i][left] = num num += 1 left += 1 return res </description>
			<content type="html"><![CDATA[<p>Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.</p>
<p>Example:</p>
<pre><code>Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generateMatrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">n</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">n</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">down</span><span class="p">,</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span> <span class="ow">and</span> <span class="n">top</span> <span class="o">&lt;=</span> <span class="n">down</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">res</span><span class="p">[</span><span class="n">top</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
                <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">top</span> <span class="o">+=</span> <span class="mi">1</span>
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">top</span><span class="p">,</span> <span class="n">down</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
                <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">res</span><span class="p">[</span><span class="n">down</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
                <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">down</span> <span class="o">-=</span> <span class="mi">1</span>
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">down</span><span class="p">,</span> <span class="n">top</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
                <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Student Attendence Record 2</title>
			<link>https://jasonyangshadow.win/posts/student-attendence-record-2/</link>
			<pubDate>Sat, 11 Apr 2020 14:06:22 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/student-attendence-record-2/</guid>
			<description>Given a positive integer n, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 109 + 7.
A student attendance record is a string that only contains the following three characters:
&amp;lsquo;A&amp;rsquo; : Absent. &amp;lsquo;L&amp;rsquo; : Late. &amp;lsquo;P&amp;rsquo; : Present. A record is regarded as rewardable if it doesn&amp;rsquo;t contain more than one &amp;lsquo;A&amp;rsquo; (absent) or more than two continuous &amp;lsquo;L&amp;rsquo; (late).</description>
			<content type="html"><![CDATA[<p>Given a positive integer n, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 109 + 7.</p>
<p>A student attendance record is a string that only contains the following three characters:</p>
<p>&lsquo;A&rsquo; : Absent.
&lsquo;L&rsquo; : Late.
&lsquo;P&rsquo; : Present.
A record is regarded as rewardable if it doesn&rsquo;t contain more than one &lsquo;A&rsquo; (absent) or more than two continuous &lsquo;L&rsquo; (late).</p>
<p>Example 1:</p>
<pre><code>Input: n = 2
Output: 8 
Explanation:
There are 8 records with length 2 will be regarded as rewardable:
&quot;PP&quot; , &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;
Only &quot;AA&quot; won't be regarded as rewardable owing to more than one absent times. 
</code></pre><p>Note: The value of n won&rsquo;t exceed 100,000.</p>
<p>The solution is here:
<a href="https://leetcode.com/problems/student-attendance-record-ii/solution/">https://leetcode.com/problems/student-attendance-record-ii/solution/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">checkRecord</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">3</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="n">mod</span> <span class="o">=</span> <span class="mi">1000000007</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
            <span class="n">dp</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span><span class="o">%</span> <span class="mi">1000000007</span><span class="p">)</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">%</span> <span class="mi">1000000007</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="mi">1000000007</span>
            <span class="n">result</span> <span class="o">%=</span> <span class="mi">1000000007</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>String Transforms Into Anther String</title>
			<link>https://jasonyangshadow.win/posts/string-transforms-into-anther-string/</link>
			<pubDate>Sat, 11 Apr 2020 13:31:02 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/string-transforms-into-anther-string/</guid>
			<description>Given two strings str1 and str2 of the same length, determine whether you can transform str1 into str2 by doing zero or more conversions.
In one conversion you can convert all occurrences of one character in str1 to any other lowercase English character.
Return true if and only if you can transform str1 into str2.
Example 1:
Input: str1 = &amp;quot;aabcc&amp;quot;, str2 = &amp;quot;ccdee&amp;quot; Output: true Explanation: Convert &#39;c&#39; to &#39;e&#39; then &#39;b&#39; to &#39;d&#39; then &#39;a&#39; to &#39;c&#39;.</description>
			<content type="html"><![CDATA[<p>Given two strings str1 and str2 of the same length, determine whether you can transform str1 into str2 by doing zero or more conversions.</p>
<p>In one conversion you can convert all occurrences of one character in str1 to any other lowercase English character.</p>
<p>Return true if and only if you can transform str1 into str2.</p>
<p>Example 1:</p>
<pre><code>Input: str1 = &quot;aabcc&quot;, str2 = &quot;ccdee&quot;
Output: true
Explanation: Convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. Note that the order of conversions matter.
</code></pre><p>Example 2:</p>
<pre><code>Input: str1 = &quot;leetcode&quot;, str2 = &quot;codeleet&quot;
Output: false
Explanation: There is no way to transform str1 to str2.
</code></pre><p>Note:</p>
<p>1 &lt;= str1.length == str2.length &lt;= 10^4
Both str1 and str2 contain only lowercase English letters.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">canConvert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">str1</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">str2</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">str1</span> <span class="o">==</span> <span class="n">str2</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span><span class="n">str2</span><span class="p">):</span>
            <span class="c1">#here we tried to test if i can be replaced by j and all other occurrences of i are all j</span>
            <span class="k">if</span> <span class="n">dp</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">!=</span> <span class="n">j</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="c1">#at last, we should make sure all chars smaller than 26, as we have to make at least one temp char</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">str2</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">26</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Number of Atoms</title>
			<link>https://jasonyangshadow.win/posts/number-of-atoms/</link>
			<pubDate>Sat, 11 Apr 2020 13:07:45 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/number-of-atoms/</guid>
			<description>Given a chemical formula (given as a string), return the count of each atom.
An atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.
1 or more digits representing the count of that element may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.</description>
			<content type="html"><![CDATA[<p>Given a chemical formula (given as a string), return the count of each atom.</p>
<p>An atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.</p>
<p>1 or more digits representing the count of that element may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.</p>
<p>Two formulas concatenated together produce another formula. For example, H2O2He3Mg4 is also a formula.</p>
<p>A formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.</p>
<p>Given a formula, output the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.</p>
<p>Example 1:</p>
<pre><code>Input: 
formula = &quot;H2O&quot;
Output: &quot;H2O&quot;
Explanation: 
The count of elements are {'H': 2, 'O': 1}.
</code></pre><p>Example 2:</p>
<pre><code>Input: 
formula = &quot;Mg(OH)2&quot;
Output: &quot;H2MgO2&quot;
Explanation: 
The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.
</code></pre><p>Example 3:</p>
<pre><code>Input: 
formula = &quot;K4(ON(SO3)2)2&quot;
Output: &quot;K4N2O14S4&quot;
Explanation: 
The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.
</code></pre><p>Note:</p>
<p>All atom names consist of lowercase letters, except for the first character which is uppercase.
The length of formula will be in the range [1, 1000].
formula will only consist of letters, digits, and round parentheses, and is a valid formula as defined in the problem.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">countOfAtoms</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">formula</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">formula</span><span class="p">)</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">()]</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">formula</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span><span class="p">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">())</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">formula</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span><span class="p">:</span>
                <span class="n">top</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">i_start</span> <span class="o">=</span> <span class="n">i</span>
                <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="ow">and</span> <span class="n">formula</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isdigit</span><span class="p">():</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">multiplicity</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">formula</span><span class="p">[</span><span class="n">i_start</span><span class="p">:</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="mi">1</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">top</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
                    <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">name</span><span class="p">]</span> <span class="o">+=</span> <span class="n">v</span> <span class="o">*</span> <span class="n">multiplicity</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">i_start</span> <span class="o">=</span> <span class="n">i</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="ow">and</span> <span class="n">formula</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">islower</span><span class="p">():</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">name</span> <span class="o">=</span> <span class="n">formula</span><span class="p">[</span><span class="n">i_start</span><span class="p">:</span><span class="n">i</span><span class="p">]</span>
                <span class="n">i_start</span> <span class="o">=</span> <span class="n">i</span>
                <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="ow">and</span> <span class="n">formula</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isdigit</span><span class="p">():</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">multiplicity</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">formula</span><span class="p">[</span><span class="n">i_start</span><span class="p">:</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">name</span><span class="p">]</span> <span class="o">+=</span> <span class="n">multiplicity</span>
        
        <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">name</span> <span class="o">+</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">name</span><span class="p">])</span> <span class="k">if</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">name</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
                      <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Diagonal Traverse</title>
			<link>https://jasonyangshadow.win/posts/diagonal-traverse/</link>
			<pubDate>Fri, 10 Apr 2020 12:48:56 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/diagonal-traverse/</guid>
			<description>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.
Example:
Input: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
Output: [1,2,4,7,5,3,6,8,9]
Explanation: Note:
The total number of elements of the given matrix will not exceed 10,000.
class Solution: def findDiagonalOrder(self, matrix: List[List[int]]) -&amp;gt; List[int]: res = [] lines = collections.</description>
			<content type="html"><![CDATA[<p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.</p>
<p>Example:</p>
<p>Input:
[
[ 1, 2, 3 ],
[ 4, 5, 6 ],
[ 7, 8, 9 ]
]</p>
<p>Output:  [1,2,4,7,5,3,6,8,9]</p>
<p>Explanation:
<img src="https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png" alt="image"></p>
<p>Note:</p>
<p>The total number of elements of the given matrix will not exceed 10,000.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findDiagonalOrder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
        
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">k</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="n">lines</span><span class="p">[</span><span class="n">k</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="n">lines</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Stream of Characters</title>
			<link>https://jasonyangshadow.win/posts/stream-of-characters/</link>
			<pubDate>Fri, 10 Apr 2020 12:28:55 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/stream-of-characters/</guid>
			<description>Implement the StreamChecker class as follows:
StreamChecker(words): Constructor, init the data structure with the given words. query(letter): returns true if and only if for some k &amp;gt;= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.
Example:
StreamChecker streamChecker = new StreamChecker([&amp;quot;cd&amp;quot;,&amp;quot;f&amp;quot;,&amp;quot;kl&amp;quot;]); // init the dictionary. streamChecker.query(&#39;a&#39;); // return false streamChecker.query(&#39;b&#39;); // return false streamChecker.</description>
			<content type="html"><![CDATA[<p>Implement the StreamChecker class as follows:</p>
<p>StreamChecker(words): Constructor, init the data structure with the given words.
query(letter): returns true if and only if for some k &gt;= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.</p>
<p>Example:</p>
<pre><code>StreamChecker streamChecker = new StreamChecker([&quot;cd&quot;,&quot;f&quot;,&quot;kl&quot;]); // init the dictionary.
streamChecker.query('a');          // return false
streamChecker.query('b');          // return false
streamChecker.query('c');          // return false
streamChecker.query('d');          // return true, because 'cd' is in the wordlist
streamChecker.query('e');          // return false
streamChecker.query('f');          // return true, because 'f' is in the wordlist
streamChecker.query('g');          // return false
streamChecker.query('h');          // return false
streamChecker.query('i');          // return false
streamChecker.query('j');          // return false
streamChecker.query('k');          // return false
streamChecker.query('l');          // return true, because 'kl' is in the wordlist
</code></pre><p>Note:</p>
<p>1 &lt;= words.length &lt;= 2000
1 &lt;= words[i].length &lt;= 2000
Words will only consist of lowercase English letters.
Queries will only consist of lowercase English letters.
The number of queries is at most 40000.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">StreamChecker</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dic</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">set</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">letter</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">s</span> <span class="o">+=</span> <span class="n">letter</span>
        <span class="k">return</span> <span class="nb">any</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">s</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">letter</span><span class="p">])</span>


<span class="c1"># Your StreamChecker object will be instantiated and called as such:</span>
<span class="c1"># obj = StreamChecker(words)</span>
<span class="c1"># param_1 = obj.query(letter)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Fraction to Recurring Decimal</title>
			<link>https://jasonyangshadow.win/posts/fraction-to-recurring-decimal/</link>
			<pubDate>Fri, 10 Apr 2020 09:18:00 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/fraction-to-recurring-decimal/</guid>
			<description>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.
If the fractional part is repeating, enclose the repeating part in parentheses.
Example 1:
Input: numerator = 1, denominator = 2 Output: &amp;quot;0.5&amp;quot; Example 2:
Input: numerator = 2, denominator = 1 Output: &amp;quot;2&amp;quot; Example 3:
Input: numerator = 2, denominator = 3 Output: &amp;quot;0.(6)&amp;quot; class Solution: def fractionToDecimal(self, numerator: int, denominator: int) -&amp;gt; str: n,d = numerator, denominator if n == 0: return &amp;#34;0&amp;#34; if d == 0: return res = [] if n * d &amp;lt; 0: res.</description>
			<content type="html"><![CDATA[<p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>
<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>
<p>Example 1:</p>
<pre><code>Input: numerator = 1, denominator = 2
Output: &quot;0.5&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input: numerator = 2, denominator = 1
Output: &quot;2&quot;
</code></pre><p>Example 3:</p>
<pre><code>Input: numerator = 2, denominator = 3
Output: &quot;0.(6)&quot;
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">fractionToDecimal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">numerator</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">denominator</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">n</span><span class="p">,</span><span class="n">d</span> <span class="o">=</span> <span class="n">numerator</span><span class="p">,</span> <span class="n">denominator</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;0&#34;</span>
        <span class="k">if</span> <span class="n">d</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">*</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span>
        
        <span class="n">n</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="nb">abs</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="o">//</span><span class="n">d</span><span class="p">))</span>
        <span class="n">l</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="n">d</span>
        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">)</span>
            <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">while</span> <span class="n">l</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>
                    <span class="n">res</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">l</span><span class="p">],</span><span class="s2">&#34;(&#34;</span><span class="p">)</span>
                    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span>
                    <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">dic</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
                    <span class="n">div</span><span class="p">,</span> <span class="n">l</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">l</span><span class="o">*</span><span class="mi">10</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
                    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">div</span><span class="p">))</span>
            <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Snake Game</title>
			<link>https://jasonyangshadow.win/posts/design-snake-game/</link>
			<pubDate>Fri, 10 Apr 2020 09:00:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-snake-game/</guid>
			<description>Design a Snake game that is played on a device with screen size = width x height. Play the game online if you are not familiar with the game.
The snake is initially positioned at the top left corner (0,0) with length = 1 unit.
You are given a list of food&amp;rsquo;s positions in row-column order. When a snake eats the food, its length and the game&amp;rsquo;s score both increase by 1.</description>
			<content type="html"><![CDATA[<p>Design a Snake game that is played on a device with screen size = width x height. Play the game online if you are not familiar with the game.</p>
<p>The snake is initially positioned at the top left corner (0,0) with length = 1 unit.</p>
<p>You are given a list of food&rsquo;s positions in row-column order. When a snake eats the food, its length and the game&rsquo;s score both increase by 1.</p>
<p>Each food appears one by one on the screen. For example, the second food will not appear until the first food was eaten by the snake.</p>
<p>When a food does appear on the screen, it is guaranteed that it will not appear on a block occupied by the snake.</p>
<p>Example:</p>
<pre><code>Given width = 3, height = 2, and food = [[1,2],[0,1]].

Snake snake = new Snake(width, height, food);

Initially the snake appears at position (0,0) and the food at (1,2).

|S| | |
| | |F|

snake.move(&quot;R&quot;); -&gt; Returns 0

| |S| |
| | |F|

snake.move(&quot;D&quot;); -&gt; Returns 0

| | | |
| |S|F|

snake.move(&quot;R&quot;); -&gt; Returns 1 (Snake eats the first food and right after that, the second food appears at (0,1) )

| |F| |
| |S|S|

snake.move(&quot;U&quot;); -&gt; Returns 1

| |F|S|
| | |S|

snake.move(&quot;L&quot;); -&gt; Returns 2 (Snake eats the second food)

| |S|S|
| | |S|

snake.move(&quot;U&quot;); -&gt; Returns -1 (Game over because snake collides with border)
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">SnakeGame</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">food</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        @param width - screen width
</span><span class="s2">        @param height - screen height 
</span><span class="s2">        @param food - A list of food positions
</span><span class="s2">        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">snake</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">food</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">(</span><span class="n">food</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">direct</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;U&#39;</span><span class="p">:[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="s1">&#39;L&#39;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="s1">&#39;R&#39;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="s1">&#39;D&#39;</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]}</span>

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">direction</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Moves the snake.
</span><span class="s2">        @param direction - &#39;U&#39; = Up, &#39;L&#39; = Left, &#39;R&#39; = Right, &#39;D&#39; = Down 
</span><span class="s2">        @return The game&#39;s score after the move. Return -1 if game over. 
</span><span class="s2">        Game over when snake crosses the screen boundary or bites its body.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">newhead</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">snake</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">direct</span><span class="p">[</span><span class="n">direction</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">snake</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">direct</span><span class="p">[</span><span class="n">direction</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">newhead</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">newhead</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">height</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">newhead</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">newhead</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">width</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">newhead</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">snake</span> <span class="ow">and</span> <span class="n">newhead</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">snake</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">food</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">food</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">newhead</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="n">newhead</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">food</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="n">newhead</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">snake</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>


<span class="c1"># Your SnakeGame object will be instantiated and called as such:</span>
<span class="c1"># obj = SnakeGame(width, height, food)</span>
<span class="c1"># param_1 = obj.move(direction)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Knight Moves</title>
			<link>https://jasonyangshadow.win/posts/minimum-knight-moves/</link>
			<pubDate>Fri, 10 Apr 2020 08:36:15 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-knight-moves/</guid>
			<description>In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].
A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.
Return the minimum number of steps needed to move the knight to the square [x, y]. It is guaranteed the answer exists.
Example 1:</description>
			<content type="html"><![CDATA[<p>In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].</p>
<p>A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.<br>
<img src="https://assets.leetcode.com/uploads/2018/10/12/knight.png" alt="image"><br>
Return the minimum number of steps needed to move the knight to the square [x, y].  It is guaranteed the answer exists.</p>
<p>Example 1:</p>
<p>Input: x = 2, y = 1
Output: 1
Explanation: [0, 0] → [2, 1]
Example 2:</p>
<p>Input: x = 5, y = 5
Output: 4
Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]</p>
<p>Constraints:</p>
<p>|x| + |y| &lt;= 300</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minKnightMoves</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="nd">@lru_cache</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span> 
        <span class="k">def</span> <span class="nf">DP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>
            <span class="k">elif</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">2</span>
            <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">DP</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nb">abs</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">2</span><span class="p">)),</span><span class="n">DP</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">2</span><span class="p">),</span><span class="nb">abs</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)))</span><span class="o">+</span><span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">DP</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">abs</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Bomb Enemy</title>
			<link>https://jasonyangshadow.win/posts/bomb-enemy/</link>
			<pubDate>Fri, 10 Apr 2020 06:25:33 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/bomb-enemy/</guid>
			<description>Given a 2D grid, each cell is either a wall &amp;lsquo;W&amp;rsquo;, an enemy &amp;lsquo;E&amp;rsquo; or empty &amp;lsquo;0&amp;rsquo; (the number zero), return the maximum enemies you can kill using one bomb. The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed. Note: You can only put the bomb at an empty cell.</description>
			<content type="html"><![CDATA[<p>Given a 2D grid, each cell is either a wall &lsquo;W&rsquo;, an enemy &lsquo;E&rsquo; or empty &lsquo;0&rsquo; (the number zero), return the maximum enemies you can kill using one bomb.
The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.
Note: You can only put the bomb at an empty cell.</p>
<p>Example:</p>
<pre><code>Input: [[&quot;0&quot;,&quot;E&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;E&quot;,&quot;0&quot;,&quot;W&quot;,&quot;E&quot;],[&quot;0&quot;,&quot;E&quot;,&quot;0&quot;,&quot;0&quot;]]
Output: 3 
Explanation: For the given grid,

0 E 0 0 
E 0 W E 
0 E 0 0

Placing a bomb at (1,1) kills 3 enemies.
</code></pre><p>Add enemies from each direction, i.e, left, right, top, bottom. and find the maximum one.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxKilledEnemies</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="n">max_hits</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">nums</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">))]</span>
        
        <span class="c1">#from left</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
            <span class="n">row_hits</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;E&#39;</span><span class="p">:</span>
                    <span class="n">row_hits</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;W&#39;</span><span class="p">:</span>
                    <span class="n">row_hits</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">row_hits</span>
        
        <span class="c1">#from right</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
            <span class="n">row_hits</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;W&#39;</span><span class="p">:</span>
                    <span class="n">row_hits</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">elif</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;E&#39;</span><span class="p">:</span>
                    <span class="n">row_hits</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">row_hits</span>
        
        <span class="c1">#from top</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
            <span class="n">col_hits</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;E&#39;</span><span class="p">:</span>
                    <span class="n">col_hits</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;W&#39;</span><span class="p">:</span>
                    <span class="n">col_hits</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">col_hits</span>
        
        <span class="c1">#from bottom</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
            <span class="n">col_hits</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;E&#39;</span><span class="p">:</span>
                    <span class="n">col_hits</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;W&#39;</span><span class="p">:</span>
                    <span class="n">col_hits</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">col_hits</span>
                    <span class="n">max_hits</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_hits</span><span class="p">,</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="n">max_hits</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Number of Matching Subsequences</title>
			<link>https://jasonyangshadow.win/posts/number-of-matching-subsequences/</link>
			<pubDate>Thu, 09 Apr 2020 15:42:18 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/number-of-matching-subsequences/</guid>
			<description>Given string S and a dictionary of words words, find the number of words[i] that is a subsequence of S.
Example : Input: S = &amp;quot;abcde&amp;quot; words = [&amp;quot;a&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;acd&amp;quot;, &amp;quot;ace&amp;quot;] Output: 3 Explanation: There are three words in words that are a subsequence of S: &amp;quot;a&amp;quot;, &amp;quot;acd&amp;quot;, &amp;quot;ace&amp;quot;. Note:
All words in words and S will only consists of lowercase letters. The length of S will be in the range of [1, 50000].</description>
			<content type="html"><![CDATA[<p>Given string S and a dictionary of words words, find the number of words[i] that is a subsequence of S.</p>
<pre><code>Example :
Input: 
S = &quot;abcde&quot;
words = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]
Output: 3
Explanation: There are three words in words that are a subsequence of S: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;.
</code></pre><p>Note:</p>
<p>All words in words and S will only consists of lowercase letters.
The length of S will be in the range of [1, 50000].
The length of words will be in the range of [1, 5000].
The length of words[i] will be in the range of [1, 50].</p>
<p>TLE version</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numMatchingSubseq</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">S</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">S</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">count</span>
</code></pre></div><p>binary search algorithms</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numMatchingSubseq</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">S</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1">#w_i is the current index for word, d_i is the index in S, each time we need to make sure d_i is increasing</span>
        <span class="k">def</span> <span class="nf">ismatch</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">w_i</span><span class="p">,</span> <span class="n">d_i</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">w_i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">):</span> <span class="k">return</span> <span class="bp">True</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">dict_idx</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">w_i</span><span class="p">]]</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">d_i</span> <span class="o">&gt;</span> <span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span> <span class="k">return</span> <span class="bp">False</span>
            <span class="c1">#get the item in list, the index is the position of inserting d_i into l, but return is the item in original list. Should use bisect_left here</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="n">bisect</span><span class="o">.</span><span class="n">bisect_left</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">d_i</span><span class="p">)]</span>
            <span class="c1">#keep d_i increasing</span>
            <span class="k">return</span> <span class="n">ismatch</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">w_i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            
        <span class="n">dict_idx</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)):</span>
            <span class="n">dict_idx</span><span class="p">[</span><span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">ismatch</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sequence Reconstruction</title>
			<link>https://jasonyangshadow.win/posts/sequence-reconstruction/</link>
			<pubDate>Wed, 08 Apr 2020 17:52:57 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sequence-reconstruction/</guid>
			<description>Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.</description>
			<content type="html"><![CDATA[<p>Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.</p>
<p>Example 1:</p>
<pre><code>Input:
org: [1,2,3], seqs: [[1,2],[1,3]]

Output:
false

Explanation:
[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.
</code></pre><p>Example 2:</p>
<pre><code>Input:
org: [1,2,3], seqs: [[1,2]]

Output:
false

Explanation:
The reconstructed sequence can only be [1,2].
</code></pre><p>Example 3:</p>
<pre><code>Input:
org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]

Output:
true

Explanation:
The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].
</code></pre><p>Example 4:</p>
<pre><code>Input:
org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]

Output:
true
</code></pre><p>UPDATE (2017/1/8):
The seqs parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes.</p>
<p>For org to be uniquely reconstructible from seqs we need to satisfy 2 conditions:</p>
<p>Every sequence in seqs should be a subsequence in org. This part is obvious.
Every 2 consecutive elements in org should be consecutive elements in some sequence from seqs. Why is that? Well, suppose condition 1 is satisfied. Then for 2 any consecutive elements x and y in org we have 2 options.
We have both xand y in some sequence from seqs. Then (as condition 1 is satisfied) they must be consequtive elements in this sequence.
There is no sequence in seqs that contains both x and y. In this case we cannot uniquely reconstruct org from seqs as sequence with x and y switched would also be a valid original sequence for seqs.
So this are 2 necessary criterions. It is pretty easy to see that this are also sufficient criterions for org to be uniquely reconstructible (there is only 1 way to reconstruct sequence when we know that condition 2 is satisfied).</p>
<p>To implement this idea I have idxs hash that maps item to its index in org sequence to check condition 1. And I have pairs set that holds all consequitive element pairs for sequences from seqs to check condition 2 (I also consider first elements to be paired with previous undefined elements, it is necessary to check this).</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sequenceReconstruction</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">org</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">seqs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">index</span> <span class="o">=</span> <span class="p">{</span><span class="n">num</span><span class="p">:</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([</span><span class="bp">None</span><span class="p">]</span> <span class="o">+</span> <span class="n">org</span><span class="p">)}</span>
        <span class="n">pairs</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="nb">zip</span><span class="p">([</span><span class="bp">None</span><span class="p">]</span> <span class="o">+</span> <span class="n">org</span><span class="p">,</span> <span class="n">org</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">seq</span> <span class="ow">in</span> <span class="n">seqs</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">([</span><span class="bp">None</span><span class="p">]</span> <span class="o">+</span> <span class="n">seq</span><span class="p">,</span> <span class="n">seq</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">index</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">index</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">pairs</span><span class="o">.</span><span class="n">discard</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
        <span class="k">return</span> <span class="ow">not</span> <span class="n">pairs</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Clone Graph</title>
			<link>https://jasonyangshadow.win/posts/clone-graph/</link>
			<pubDate>Wed, 08 Apr 2020 16:34:02 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/clone-graph/</guid>
			<description>Given a reference of a node in a connected undirected graph.
Return a deep copy (clone) of the graph.
Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.
class Node { public int val; public List&amp;lt;Node&amp;gt; neighbors; } Test case format:
For simplicity sake, each node&amp;rsquo;s value is the same as the node&amp;rsquo;s index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on.</description>
			<content type="html"><![CDATA[<p>Given a reference of a node in a connected undirected graph.</p>
<p>Return a deep copy (clone) of the graph.</p>
<p>Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.</p>
<pre><code>class Node {
    public int val;
    public List&lt;Node&gt; neighbors;
}
</code></pre><p>Test case format:</p>
<p>For simplicity sake, each node&rsquo;s value is the same as the node&rsquo;s index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.</p>
<p>Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p>
<p>The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.</p>
<p><img src="https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png" alt="image"></p>
<pre><code>Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># Definition for a Node.
</span><span class="s2">class Node:
</span><span class="s2">    def __init__(self, val = 0, neighbors = []):
</span><span class="s2">        self.val = val
</span><span class="s2">        self.neighbors = neighbors
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">cloneGraph</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">:</span> <span class="s1">&#39;Node&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;Node&#39;</span><span class="p">:</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="p">:</span>
                <span class="k">return</span>
            
            <span class="n">np</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">neighbors</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">val</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>
                    <span class="n">np</span><span class="o">.</span><span class="n">neighbors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">n</span><span class="o">.</span><span class="n">val</span><span class="p">])</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">np</span><span class="o">.</span><span class="n">neighbors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
            
            <span class="k">return</span> <span class="n">np</span>
        
        <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Car Fleet</title>
			<link>https://jasonyangshadow.win/posts/car-fleet/</link>
			<pubDate>Wed, 08 Apr 2020 16:19:51 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/car-fleet/</guid>
			<description>N cars are going to the same destination along a one lane road. The destination is target miles away.
Each car i has a constant speed speed[i] (in miles per hour), and initial position position[i] miles towards the target along the road.
A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.
The distance between these two cars is ignored - they are assumed to have the same position.</description>
			<content type="html"><![CDATA[<p>N cars are going to the same destination along a one lane road.  The destination is target miles away.</p>
<p>Each car i has a constant speed speed[i] (in miles per hour), and initial position position[i] miles towards the target along the road.</p>
<p>A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.</p>
<p>The distance between these two cars is ignored - they are assumed to have the same position.</p>
<p>A car fleet is some non-empty set of cars driving at the same position and same speed.  Note that a single car is also a car fleet.</p>
<p>If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.</p>
<p>How many car fleets will arrive at the destination?</p>
<p>Example 1:</p>
<pre><code>Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 and 8 become a fleet, meeting each other at 12.
The car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.
The cars starting at 5 and 3 become a fleet, meeting each other at 6.
Note that no other cars meet these fleets before the destination, so the answer is 3.
</code></pre><p>Note:</p>
<p>0 &lt;= N &lt;= 10 ^ 4
0 &lt; target &lt;= 10 ^ 6
0 &lt; speed[i] &lt;= 10 ^ 6
0 &lt;= position[i] &lt; target
All initial positions are different.</p>
<p>Time-space diagrams can be very helpful. Just look at the example shown in the picture. Vehicle 1 is the closest to the target, therefore, it will definitely lead a fleet since no one behind it can pass it. The initial position of vehicle 2 is a little farther away than vehicle 1, but its speed is faster (steeper slope). Ideally, if vehicle 1 does not exist, vehicle 2 will arrive at the target before t1. However, since in reality vehicle 1 is in front of it, it will join the fleet led by vehicle 1 at the black point. For vehicle 3, its ideal arrival time (dist/vel) is larger than the fleet in front of it, so itself will form a fleet.<br>
<img src="https://assets.leetcode.com/users/joinyoung/image_1552620441.png" alt="image"></p>
<p>Therefore, the steps are:</p>
<ol>
<li>Sort the vehicles by the (pos, vel) pair.</li>
<li>Since the first vehicle will always lead a fleet, starting from the second vehicle, compare each vehicle&rsquo;s ideal arrival time with the arrival time of the fleet in front of it, i.e., stack[-1]. If its ideal arrival time is earlier, it will join the fleet in front of it. Otherwise, it will lead a new fleet and we append its arrival time into stack.</li>
<li>Finally, stack contains the arrival times of the fleets and the length of stack will be the number of distinct arrival times, i.e., the number of fleet.</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">carFleet</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">position</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">speed</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1">#start from the nearest position to target(destination), if dist/s is larger than privious one, meaning that it will catch up with the previous one. A crosspoint.</span>
        <span class="k">for</span> <span class="n">p</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="n">speed</span><span class="p">))[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">dist</span> <span class="o">=</span> <span class="n">target</span> <span class="o">-</span> <span class="n">p</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">stack</span><span class="p">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dist</span><span class="o">/</span><span class="n">s</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">dist</span><span class="o">/</span><span class="n">s</span> <span class="o">&gt;</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dist</span><span class="o">/</span><span class="n">s</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Window Substring</title>
			<link>https://jasonyangshadow.win/posts/minimum-window-substring/</link>
			<pubDate>Wed, 08 Apr 2020 14:24:37 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-window-substring/</guid>
			<description>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).
Example:
Input: S = &amp;quot;ADOBECODEBANC&amp;quot;, T = &amp;quot;ABC&amp;quot; Output: &amp;quot;BANC&amp;quot; Note:
If there is no such window in S that covers all characters in T, return the empty string &amp;ldquo;&amp;rdquo;. If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</description>
			<content type="html"><![CDATA[<p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).</p>
<p>Example:</p>
<pre><code>Input: S = &quot;ADOBECODEBANC&quot;, T = &quot;ABC&quot;
Output: &quot;BANC&quot;
</code></pre><p>Note:</p>
<p>If there is no such window in S that covers all characters in T, return the empty string &ldquo;&rdquo;.
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minWindow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="c1">#need dict, if need[c] &gt; 0 means we really lack of c in string, if need[c] &lt; 0 meaning that we have additional c inside string.(not lacked) in s</span>
        <span class="n">need</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="n">missing</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        
        <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">char</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">need</span><span class="p">[</span><span class="n">char</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">missing</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">need</span><span class="p">[</span><span class="n">char</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="c1">#print(j,char,need,missing)</span>
            <span class="c1">#do not missing all required chars in t, then shrinking from left</span>
            <span class="k">if</span> <span class="n">missing</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1">#print(&#39;---before---&#39;,need,i,j)</span>
                <span class="c1">#because we have additional s[i], i.e, need[s[i]] &lt; 0, we can continously increase i</span>
                <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="ow">and</span> <span class="n">need</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">need</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                
                <span class="c1">#print(&#39;---end---&#39;,need,i,j)</span>
                <span class="c1">#then we encountered lacking of i</span>
                <span class="n">need</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">missing</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="c1">#update start,end, if end == 0 for intialized version, we directly set start,end</span>
                <span class="k">if</span> <span class="n">end</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span><span class="o">-</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">:</span>
                    <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span>
                <span class="c1">#shrink from left, increasing i</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">]</span>
</code></pre></div><pre><code>input:
&quot;ABECODEBANC&quot;
&quot;ABC&quot;

debug:
1 A Counter({'B': 1, 'C': 1, 'A': 0}) 2
2 B Counter({'C': 1, 'A': 0, 'B': 0}) 1
3 E Counter({'C': 1, 'A': 0, 'B': 0, 'E': -1}) 1
4 C Counter({'A': 0, 'B': 0, 'C': 0, 'E': -1}) 0
---before--- Counter({'A': 0, 'B': 0, 'C': 0, 'E': -1}) 0 4
---end--- Counter({'A': 0, 'B': 0, 'C': 0, 'E': -1}) 0 4
5 O Counter({'A': 1, 'B': 0, 'C': 0, 'E': -1, 'O': -1}) 1
6 D Counter({'A': 1, 'B': 0, 'C': 0, 'E': -1, 'O': -1, 'D': -1}) 1
7 E Counter({'A': 1, 'B': 0, 'C': 0, 'O': -1, 'D': -1, 'E': -2}) 1
8 B Counter({'A': 1, 'C': 0, 'B': -1, 'O': -1, 'D': -1, 'E': -2}) 1
9 A Counter({'A': 0, 'C': 0, 'B': -1, 'O': -1, 'D': -1, 'E': -2}) 0
---before--- Counter({'A': 0, 'C': 0, 'B': -1, 'O': -1, 'D': -1, 'E': -2}) 1 9
---end--- Counter({'A': 0, 'B': 0, 'C': 0, 'E': -1, 'O': -1, 'D': -1}) 3 9
10 N Counter({'C': 1, 'A': 0, 'B': 0, 'E': -1, 'O': -1, 'D': -1, 'N': -1}) 1
11 C Counter({'A': 0, 'B': 0, 'C': 0, 'E': -1, 'O': -1, 'D': -1, 'N': -1}) 0
---before--- Counter({'A': 0, 'B': 0, 'C': 0, 'E': -1, 'O': -1, 'D': -1, 'N': -1}) 4 11
---end--- Counter({'A': 0, 'B': 0, 'C': 0, 'E': 0, 'O': 0, 'D': 0, 'N': -1}) 7 11
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Shortest Way to Form String</title>
			<link>https://jasonyangshadow.win/posts/shortest-way-to-form-string/</link>
			<pubDate>Wed, 08 Apr 2020 12:18:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/shortest-way-to-form-string/</guid>
			<description>From any string, we can form a subsequence of that string by deleting some number of characters (possibly no deletions). Given two strings source and target, return the minimum number of subsequences of source such that their concatenation equals target. If the task is impossible, return -1. Example 1: Input: source = &amp;quot;abc&amp;quot;, target = &amp;quot;abcbc&amp;quot; Output: 2 Explanation: The target &amp;quot;abcbc&amp;quot; can be formed by &amp;quot;abc&amp;quot; and &amp;quot;bc&amp;quot;, which</description>
			<content type="html"><![CDATA[<p>From any string, we can form a subsequence of that string by deleting some number of characters (possibly no deletions).</p>
<p>Given two strings source and target, return the minimum number of subsequences of source such that their concatenation equals target. If the task is impossible, return -1.</p>
<p>Example 1:</p>
<pre><code>Input: source = &quot;abc&quot;, target = &quot;abcbc&quot;
Output: 2
Explanation: The target &quot;abcbc&quot; can be formed by &quot;abc&quot; and &quot;bc&quot;, which are subsequences of source &quot;abc&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input: source = &quot;abc&quot;, target = &quot;acdbc&quot;
Output: -1
Explanation: The target string cannot be constructed from the subsequences of source string due to the character &quot;d&quot; in target string.
</code></pre><p>Example 3:</p>
<pre><code>Input: source = &quot;xyz&quot;, target = &quot;xzyxz&quot;
Output: 3
Explanation: The target string can be constructed as follows &quot;xz&quot; + &quot;y&quot; + &quot;xz&quot;.
</code></pre><p>Constraints:</p>
<p>Both the source and target strings consist of only lowercase English letters from &ldquo;a&rdquo;-&ldquo;z&rdquo;.
The lengths of source and target string are between 1 and 1000.</p>
<p>Greedy search. O(M*N)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">shortestWay</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">targetidx</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">targetidx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">target</span><span class="p">):</span>
            <span class="n">sourceidx</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">isSub</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">while</span> <span class="n">sourceidx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">source</span><span class="p">)</span> <span class="ow">and</span> <span class="n">targetidx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">target</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">source</span><span class="p">[</span><span class="n">sourceidx</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">[</span><span class="n">targetidx</span><span class="p">]:</span>
                    <span class="n">sourceidx</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">targetidx</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">isSub</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">sourceidx</span> <span class="o">+=</span> <span class="mi">1</span>
            
            <span class="c1">#complete match</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">isSub</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">count</span>
</code></pre></div><p>Binary tree searching algorithms. O(M*log(N))</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">shortestWay</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
            <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
            
        <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">target</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">s</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>

           <span class="c1">#return the idx before available position </span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect_left</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">],</span><span class="n">i</span><span class="p">)</span>
            <span class="c1">#下一次碰到同样的字母，当插入位置为最后的时候，意味着新一次匹配的开始</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]):</span>
                <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>

            <span class="c1">#新一次匹配的开始，将会重置i，因为j被重置了</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">result</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">result</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Validate Stack Sequences</title>
			<link>https://jasonyangshadow.win/posts/validate-stack-sequences/</link>
			<pubDate>Wed, 08 Apr 2020 00:33:36 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/validate-stack-sequences/</guid>
			<description>Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.
Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1] Output: true Explanation: We might do the following sequence: push(1), push(2), push(3), push(4), pop() -&amp;gt; 4, push(5), pop() -&amp;gt; 5, pop() -&amp;gt; 3, pop() -&amp;gt; 2, pop() -&amp;gt; 1 Example 2:</description>
			<content type="html"><![CDATA[<p>Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.</p>
<p>Example 1:</p>
<pre><code>Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -&gt; 4,
push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1
</code></pre><p>Example 2:</p>
<pre><code>Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
</code></pre><p>Note:</p>
<p>0 &lt;= pushed.length == popped.length &lt;= 1000
0 &lt;= pushed[i], popped[i] &lt; 1000
pushed is a permutation of popped.
pushed and popped have distinct values.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">validateStackSequences</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pushed</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">popped</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">pushed</span><span class="p">:</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
            <span class="k">while</span> <span class="n">stack</span> <span class="ow">and</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">popped</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">True</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">stack</span> <span class="k">else</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Repeating Character Replacement</title>
			<link>https://jasonyangshadow.win/posts/longest-repeating-character-replacement/</link>
			<pubDate>Wed, 08 Apr 2020 00:22:05 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-repeating-character-replacement/</guid>
			<description>Given a string s that consists of only uppercase English letters, you can perform at most k operations on that string.
In one operation, you can choose any character of the string and change it to any other uppercase English character.
Find the length of the longest sub-string containing all repeating letters you can get after performing the above operations.
Note: Both the string&amp;rsquo;s length and k will not exceed 104.</description>
			<content type="html"><![CDATA[<p>Given a string s that consists of only uppercase English letters, you can perform at most k operations on that string.</p>
<p>In one operation, you can choose any character of the string and change it to any other uppercase English character.</p>
<p>Find the length of the longest sub-string containing all repeating letters you can get after performing the above operations.</p>
<p>Note:
Both the string&rsquo;s length and k will not exceed 104.</p>
<p>Example 1:</p>
<pre><code>Input:
s = &quot;ABAB&quot;, k = 2

Output:
4

Explanation:
Replace the two 'A's with two 'B's or vice versa.
</code></pre><p>Example 2:</p>
<pre><code>Input:
s = &quot;AABABBA&quot;, k = 1

Output:
4

Explanation:
Replace the one 'A' in the middle with 'B' and form &quot;AABBBBA&quot;.
The substring &quot;BBBB&quot; has the longest repeating letters, which is 4.
</code></pre><p>sliding window algorithms.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">characterReplacement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">()</span>
        <span class="n">start</span><span class="p">,</span> <span class="n">max_cnt</span><span class="p">,</span> <span class="n">max_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
        <span class="k">for</span> <span class="n">end</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="c1">#increase count for each char</span>
            <span class="n">count</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">end</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="c1">#current maximum char</span>
            <span class="n">max_cnt</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_cnt</span><span class="p">,</span> <span class="n">count</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">end</span><span class="p">]])</span>
            <span class="c1">#window is too wide</span>
            <span class="k">while</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span><span class="n">max_cnt</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">:</span>
                <span class="c1">#remove the first one char</span>
                <span class="c1">#count is a global value, we have to remove first char and update its count</span>
                <span class="n">count</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">start</span><span class="p">]]</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">start</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">max_len</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Expressive Words</title>
			<link>https://jasonyangshadow.win/posts/expressive-words/</link>
			<pubDate>Tue, 07 Apr 2020 17:02:35 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/expressive-words/</guid>
			<description>Sometimes people repeat letters to represent extra feeling, such as &amp;ldquo;hello&amp;rdquo; -&amp;gt; &amp;ldquo;heeellooo&amp;rdquo;, &amp;ldquo;hi&amp;rdquo; -&amp;gt; &amp;ldquo;hiiii&amp;rdquo;. In these strings like &amp;ldquo;heeellooo&amp;rdquo;, we have groups of adjacent letters that are all the same: &amp;ldquo;h&amp;rdquo;, &amp;ldquo;eee&amp;rdquo;, &amp;ldquo;ll&amp;rdquo;, &amp;ldquo;ooo&amp;rdquo;.
For some given string S, a query word is stretchy if it can be made to be equal to S by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is 3 or more.</description>
			<content type="html"><![CDATA[<p>Sometimes people repeat letters to represent extra feeling, such as &ldquo;hello&rdquo; -&gt; &ldquo;heeellooo&rdquo;, &ldquo;hi&rdquo; -&gt; &ldquo;hiiii&rdquo;.  In these strings like &ldquo;heeellooo&rdquo;, we have groups of adjacent letters that are all the same:  &ldquo;h&rdquo;, &ldquo;eee&rdquo;, &ldquo;ll&rdquo;, &ldquo;ooo&rdquo;.</p>
<p>For some given string S, a query word is stretchy if it can be made to be equal to S by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is 3 or more.</p>
<p>For example, starting with &ldquo;hello&rdquo;, we could do an extension on the group &ldquo;o&rdquo; to get &ldquo;hellooo&rdquo;, but we cannot get &ldquo;helloo&rdquo; since the group &ldquo;oo&rdquo; has size less than 3.  Also, we could do another extension like &ldquo;ll&rdquo; -&gt; &ldquo;lllll&rdquo; to get &ldquo;helllllooo&rdquo;.  If S = &ldquo;helllllooo&rdquo;, then the query word &ldquo;hello&rdquo; would be stretchy because of these two extension operations: query = &ldquo;hello&rdquo; -&gt; &ldquo;hellooo&rdquo; -&gt; &ldquo;helllllooo&rdquo; = S.</p>
<p>Given a list of query words, return the number of words that are stretchy.</p>
<pre><code>Example:
Input: 
S = &quot;heeellooo&quot;
words = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]
Output: 1
Explanation: 
We can extend &quot;e&quot; and &quot;o&quot; in the word &quot;hello&quot; to get &quot;heeellooo&quot;.
We can't extend &quot;helo&quot; to get &quot;heeellooo&quot; because the group &quot;ll&quot; is not size 3 or more.
</code></pre><p>Notes:</p>
<p>0 &lt;= len(S) &lt;= 100.
0 &lt;= len(words) &lt;= 100.
0 &lt;= len(words[i]) &lt;= 100.
S and all words in words consist only of lowercase letters</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">expressiveWords</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">S</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">w</span><span class="p">):</span>
            <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="ow">not</span> <span class="p">((</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="ow">or</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])):</span>
                        <span class="k">return</span> <span class="bp">False</span>
            <span class="k">return</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">check</span><span class="p">(</span><span class="n">S</span><span class="p">,</span><span class="n">W</span><span class="p">)</span> <span class="k">for</span> <span class="n">W</span> <span class="ow">in</span> <span class="n">words</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Candy Crush</title>
			<link>https://jasonyangshadow.win/posts/candy-crush/</link>
			<pubDate>Tue, 07 Apr 2020 16:14:12 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/candy-crush/</guid>
			<description>This question is about implementing a basic elimination algorithm for Candy Crush.
Given a 2D integer array board representing the grid of candy, different positive integers board[i][j] represent different types of candies. A value of board[i][j] = 0 represents that the cell at position (i, j) is empty. The given board represents the state of the game following the player&amp;rsquo;s move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:</description>
			<content type="html"><![CDATA[<p>This question is about implementing a basic elimination algorithm for Candy Crush.</p>
<p>Given a 2D integer array board representing the grid of candy, different positive integers board[i][j] represent different types of candies. A value of board[i][j] = 0 represents that the cell at position (i, j) is empty. The given board represents the state of the game following the player&rsquo;s move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:</p>
<p>If three or more candies of the same type are adjacent vertically or horizontally, &ldquo;crush&rdquo; them all at the same time - these positions become empty.
After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)
After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.
If there does not exist more candies that can be crushed (ie. the board is stable), then return the current board.
You need to perform the above rules until the board becomes stable, then return the current board.</p>
<p>Example:</p>
<pre><code>Input:
board =
[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]

Output:
[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]

Explanation:
</code></pre><p><img src="https://assets.leetcode.com/uploads/2018/10/12/candy_crush_example_2.png" alt="image">
Note:</p>
<p>The length of board will be in the range [3, 50].
The length of board[i] will be in the range [3, 50].
Each board[i][j] will initially start as an integer in the range [1, 2000].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">candyCrush</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">crush</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

            <span class="c1">#find candies, candy value should be non-zero</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)):</span>
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                        <span class="n">crush</span> <span class="o">|=</span> <span class="p">{(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">),(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="n">j</span><span class="p">)}</span>
                    <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                        <span class="n">crush</span> <span class="o">|=</span> <span class="p">{(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">),(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">)}</span>
            
            <span class="c1">#if we could not find any potential candies, then return, else set value to 0</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">crush</span><span class="p">:</span> <span class="k">break</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">crush</span><span class="p">:</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            
            <span class="c1">#scanning each line</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="n">idx</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
                <span class="c1">#from bottom to top</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">))):</span>
                    <span class="c1">#crush candies</span>
                    <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                        <span class="n">board</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
                        <span class="n">idx</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="c1">#set top positions to 0</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                    <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            
        <span class="k">return</span> <span class="n">board</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Path With Maximum Gold</title>
			<link>https://jasonyangshadow.win/posts/path-with-maximum-gold/</link>
			<pubDate>Tue, 07 Apr 2020 15:30:27 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/path-with-maximum-gold/</guid>
			<description>In a gold mine grid of size m * n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.
Return the maximum amount of gold you can collect under the conditions:
Every time you are located in a cell you will collect all the gold in that cell. From your position you can walk one step to the left, right, up or down.</description>
			<content type="html"><![CDATA[<p>In a gold mine grid of size m * n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.</p>
<p>Return the maximum amount of gold you can collect under the conditions:</p>
<p>Every time you are located in a cell you will collect all the gold in that cell.
From your position you can walk one step to the left, right, up or down.
You can&rsquo;t visit the same cell more than once.
Never visit a cell with 0 gold.
You can start and stop collecting gold from any position in the grid that has some gold.</p>
<p>Example 1:</p>
<pre><code>Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -&gt; 8 -&gt; 7.
</code></pre><p>Example 2:</p>
<pre><code>Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.
</code></pre><p>Constraints:</p>
<p>1 &lt;= grid.length, grid[i].length &lt;= 15
0 &lt;= grid[i][j] &lt;= 100
There are at most 25 cells containing gold.</p>
<p>Try from every node in matrix and execute dfs algorithms</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getMaximumGold</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">sval</span><span class="p">,</span><span class="n">seen</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span> <span class="ow">or</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="ow">or</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">sval</span>
            
            <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
            <span class="n">sval</span> <span class="o">+=</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="n">mx</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">),(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)):</span>
                <span class="n">mx</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">sval</span><span class="p">,</span><span class="n">seen</span><span class="p">),</span> <span class="n">mx</span><span class="p">)</span>
            <span class="n">seen</span><span class="o">.</span><span class="n">discard</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">mx</span>
        
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nb">set</span><span class="p">())</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">))</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Search in a Sorted Array of Unknown Size</title>
			<link>https://jasonyangshadow.win/posts/search-in-a-sorted-array-of-unknown-size/</link>
			<pubDate>Mon, 06 Apr 2020 22:34:02 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/search-in-a-sorted-array-of-unknown-size/</guid>
			<description>Given an integer array sorted in ascending order, write a function to search target in nums. If target exists, then return its index, otherwise return -1. However, the array size is unknown to you. You may only access the array using an ArrayReader interface, where ArrayReader.get(k) returns the element of the array at index k (0-indexed).
You may assume all integers in the array are less than 10000, and if you access the array out of bounds, ArrayReader.</description>
			<content type="html"><![CDATA[<p>Given an integer array sorted in ascending order, write a function to search target in nums.  If target exists, then return its index, otherwise return -1. However, the array size is unknown to you. You may only access the array using an ArrayReader interface, where ArrayReader.get(k) returns the element of the array at index k (0-indexed).</p>
<p>You may assume all integers in the array are less than 10000, and if you access the array out of bounds, ArrayReader.get will return 2147483647.</p>
<p>Example 1:</p>
<pre><code>Input: array = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
</code></pre><p>Example 2:</p>
<pre><code>Input: array = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
</code></pre><p>Note:</p>
<p>You may assume that all elements in the array are unique.
The value of each element in the array will be in the range [-9999, 9999].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># This is ArrayReader&#39;s API interface.</span>
<span class="c1"># You should not implement it, or speculate about its implementation</span>
<span class="c1"># &#34;&#34;&#34;</span>
<span class="c1">#class ArrayReader:</span>
<span class="c1">#    def get(self, index: int) -&gt; int:</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reader</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :type reader: ArrayReader
</span><span class="s2">        :type target: int
</span><span class="s2">        :rtype: int
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2147483647</span>
        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">val</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span> <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">val</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span> <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="n">mid</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Palindromic Substrings</title>
			<link>https://jasonyangshadow.win/posts/palindromic-substrings/</link>
			<pubDate>Mon, 06 Apr 2020 21:18:21 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/palindromic-substrings/</guid>
			<description>Given a string, your task is to count how many palindromic substrings in this string.
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.
Example 1:
Input: &amp;quot;abc&amp;quot; Output: 3 Explanation: Three palindromic strings: &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;. Example 2:
Input: &amp;quot;aaa&amp;quot; Output: 6 Explanation: Six palindromic strings: &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;aaa&amp;quot;. Note:
The input string length won&amp;rsquo;t exceed 1000.</description>
			<content type="html"><![CDATA[<p>Given a string, your task is to count how many palindromic substrings in this string.</p>
<p>The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;abc&quot;
Output: 3
Explanation: Three palindromic strings: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;aaa&quot;
Output: 6
Explanation: Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.
</code></pre><p>Note:</p>
<p>The input string length won&rsquo;t exceed 1000.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">countSubstrings</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))]</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="c1">#every single char is a valid one</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            
        <span class="c1">#check two chars, if and only if s[i] == s[i+1]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="c1">#check 3 or more chars, only if dp[i+1][j-1] == True and s[i] = s[j]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">k</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">]:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">count</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Generalized Abbreviation</title>
			<link>https://jasonyangshadow.win/posts/generalized-abbreviation/</link>
			<pubDate>Mon, 06 Apr 2020 07:50:54 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/generalized-abbreviation/</guid>
			<description>Write a function to generate the generalized abbreviations of a word. Note: The order of the output does not matter. Example: Input: &amp;quot;word&amp;quot; Output: [&amp;quot;word&amp;quot;, &amp;quot;1ord&amp;quot;, &amp;quot;w1rd&amp;quot;, &amp;quot;wo1d&amp;quot;, &amp;quot;wor1&amp;quot;, &amp;quot;2rd&amp;quot;, &amp;quot;w2d&amp;quot;, &amp;quot;wo2&amp;quot;, &amp;quot;1o1d&amp;quot;, &amp;quot;1or1&amp;quot;, &amp;quot;w1r1&amp;quot;, &amp;quot;1o2&amp;quot;, &amp;quot;2r1&amp;quot;, &amp;quot;3d&amp;quot;, &amp;quot;w3&amp;quot;, &amp;quot;4&amp;quot;] How many abbreviations are there for a word of length nn? The answer is 2^n because each character can either be abbreviated or not, resulting in different abbreviations. 这里</description>
			<content type="html"><![CDATA[<p>Write a function to generate the generalized abbreviations of a word.</p>
<p>Note: The order of the output does not matter.</p>
<p>Example:</p>
<pre><code>Input: &quot;word&quot;
Output:
[&quot;word&quot;, &quot;1ord&quot;, &quot;w1rd&quot;, &quot;wo1d&quot;, &quot;wor1&quot;, &quot;2rd&quot;, &quot;w2d&quot;, &quot;wo2&quot;, &quot;1o1d&quot;, &quot;1or1&quot;, &quot;w1r1&quot;, &quot;1o2&quot;, &quot;2r1&quot;, &quot;3d&quot;, &quot;w3&quot;, &quot;4&quot;]
</code></pre><p>How many abbreviations are there for a word of length nn? The answer is 2^n because each character can either be abbreviated or not, resulting in different abbreviations.
这里的数字代表多少字母被隐藏， 1o2,表示o之前有一个字母，之后有两个字母</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generateAbbreviations</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">==</span> <span class="n">pos</span><span class="p">:</span>
                <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">cur</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1">#skip current position and increase count</span>
                <span class="n">helper</span><span class="p">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="c1">#include current position and zero-out count</span>
                <span class="n">helper</span><span class="p">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cur</span> <span class="o">+</span> <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">pos</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
        
        <span class="n">helper</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generateAbbreviations</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">tmp</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">word</span><span class="p">:</span>
                <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">tmp</span> <span class="ow">or</span> <span class="n">tmp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">isalpha</span><span class="p">():</span>
                    <span class="n">helper</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:],</span> <span class="n">tmp</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">tmp</span> <span class="ow">or</span> <span class="n">tmp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">isdigit</span><span class="p">():</span>
                    <span class="n">helper</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">:],</span> <span class="n">tmp</span><span class="o">+</span><span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">])</span>
        
        <span class="n">helper</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Flip Equivalent Binary Trees</title>
			<link>https://jasonyangshadow.win/posts/flip-equivalent-binary-trees/</link>
			<pubDate>Sun, 05 Apr 2020 21:46:43 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/flip-equivalent-binary-trees/</guid>
			<description>For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.
A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.
Write a function that determines whether two binary trees are flip equivalent. The trees are given by root nodes root1 and root2.</description>
			<content type="html"><![CDATA[<p>For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.</p>
<p>A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.</p>
<p>Write a function that determines whether two binary trees are flip equivalent.  The trees are given by root nodes root1 and root2.</p>
<p>Example 1:</p>
<pre><code>Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
Output: true
Explanation: We flipped at nodes with values 1, 3, and 5.
Flipped Trees Diagram
</code></pre><p><img src="https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png" alt="image"></p>
<p>Note:</p>
<p>Each tree will have at most 100 nodes.
Each value in each tree will be a unique integer in the range [0, 99].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">flipEquiv</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root1</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">root2</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root1</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">root2</span><span class="p">:</span> <span class="k">return</span> <span class="n">root1</span> <span class="o">==</span> <span class="n">root2</span> <span class="o">==</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">root1</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">root2</span><span class="o">.</span><span class="n">val</span> <span class="ow">and</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">flipEquiv</span><span class="p">(</span><span class="n">root1</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root2</span><span class="o">.</span><span class="n">left</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">flipEquiv</span><span class="p">(</span><span class="n">root1</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">root2</span><span class="o">.</span><span class="n">right</span><span class="p">)</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">flipEquiv</span><span class="p">(</span><span class="n">root1</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">root2</span><span class="o">.</span><span class="n">left</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">flipEquiv</span><span class="p">(</span><span class="n">root1</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root2</span><span class="o">.</span><span class="n">right</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Construct Binary Tree From Preorder and Postorder Traversal</title>
			<link>https://jasonyangshadow.win/posts/construct-binary-tree-from-preorder-and-postorder-traversal/</link>
			<pubDate>Sun, 05 Apr 2020 21:26:23 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/construct-binary-tree-from-preorder-and-postorder-traversal/</guid>
			<description>Return any binary tree that matches the given preorder and postorder traversals.
Values in the traversals pre and post are distinct positive integers.
Example 1:
Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1] Output: [1,2,3,4,5,6,7] Note:
1 &amp;lt;= pre.length == post.length &amp;lt;= 30 pre[] and post[] are both permutations of 1, 2, &amp;hellip;, pre.length. It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.</description>
			<content type="html"><![CDATA[<p>Return any binary tree that matches the given preorder and postorder traversals.</p>
<p>Values in the traversals pre and post are distinct positive integers.</p>
<p>Example 1:</p>
<pre><code>Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
</code></pre><p>Note:</p>
<p>1 &lt;= pre.length == post.length &lt;= 30
pre[] and post[] are both permutations of 1, 2, &hellip;, pre.length.
It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">preindex</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">posindex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        
    <span class="k">def</span> <span class="nf">constructFromPrePost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pre</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">post</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">pre</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">preindex</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">preindex</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">!=</span> <span class="n">post</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">posindex</span><span class="p">]:</span>
            <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">constructFromPrePost</span><span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="n">post</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">!=</span> <span class="n">post</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">posindex</span><span class="p">]:</span>
            <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">constructFromPrePost</span><span class="p">(</span><span class="n">pre</span><span class="p">,</span><span class="n">post</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">posindex</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="c1">#when return root, next line of code to execute is root.right part.</span>
        <span class="k">return</span> <span class="n">root</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Tree Longest Consecutive Sequences 2</title>
			<link>https://jasonyangshadow.win/posts/binary-tree-longest-consecutive-sequences-2/</link>
			<pubDate>Thu, 02 Apr 2020 21:05:40 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-tree-longest-consecutive-sequences-2/</guid>
			<description>Given a binary tree, you need to find the length of Longest Consecutive Path in Binary Tree.
Especially, this path can be either increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.
Example 1:
Input: 1 / \ 2 3 Output: 2 Explanation: The longest consecutive path is [1, 2] or [2, 1].</description>
			<content type="html"><![CDATA[<p>Given a binary tree, you need to find the length of Longest Consecutive Path in Binary Tree.</p>
<p>Especially, this path can be either increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.</p>
<p>Example 1:</p>
<pre><code>Input:
        1
       / \
      2   3
Output: 2
Explanation: The longest consecutive path is [1, 2] or [2, 1].
</code></pre><p>Example 2:</p>
<pre><code>Input:
        2
       / \
      1   3
Output: 3
Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].
</code></pre><p>Note: All the values of tree nodes are in the range of [-1e7, 1e7].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestConsecutive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1">#here res will be passed into helper as reference rather than copy</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
            
            <span class="c1">#calculate increasing and decreasing sequence seperately</span>
            <span class="n">inc</span><span class="p">,</span> <span class="n">dec</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
            <span class="n">l_inc</span><span class="p">,</span> <span class="n">l_dec</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="n">r_inc</span><span class="p">,</span> <span class="n">r_dec</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">val</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
                    <span class="n">inc</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">inc</span><span class="p">,</span> <span class="n">l_inc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">val</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
                    <span class="n">dec</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dec</span><span class="p">,</span> <span class="n">l_dec</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="o">.</span><span class="n">val</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
                    <span class="n">inc</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">inc</span><span class="p">,</span> <span class="n">r_inc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="o">.</span><span class="n">val</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
                    <span class="n">dec</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dec</span><span class="p">,</span> <span class="n">r_dec</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="c1">#global final result</span>
            <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">inc</span><span class="o">+</span><span class="n">dec</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">inc</span><span class="p">,</span> <span class="n">dec</span><span class="p">)</span>
        
        <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Tree Longest Consecutive Sequence</title>
			<link>https://jasonyangshadow.win/posts/binary-tree-longest-consecutive-sequence/</link>
			<pubDate>Thu, 02 Apr 2020 20:37:32 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-tree-longest-consecutive-sequence/</guid>
			<description>Given a binary tree, find the length of the longest consecutive sequence path.
The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).
Example 1:
Input: 1 \ 3 / \ 2 4 \ 5 Output: 3 Explanation: Longest consecutive sequence path is 3-4-5, so return 3.</description>
			<content type="html"><![CDATA[<p>Given a binary tree, find the length of the longest consecutive sequence path.</p>
<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).</p>
<p>Example 1:</p>
<pre><code>Input:

   1
    \
     3
    / \
   2   4
        \
         5

Output: 3

Explanation: Longest consecutive sequence path is 3-4-5, so return 3.
</code></pre><p>Example 2:</p>
<pre><code>Input:

   2
    \
     3
    / 
   2    
  / 
 1

Output: 2 

Explanation: Longest consecutive sequence path is 2-3, not 3-2-1, so return 2.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestConsecutive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">length</span>
            
            <span class="n">iscontinous</span> <span class="o">=</span> <span class="n">parent</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">parent</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="n">length</span> <span class="o">=</span> <span class="n">length</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">iscontinous</span> <span class="k">else</span> <span class="mi">1</span>
            
            <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">,</span> <span class="n">length</span><span class="p">),</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">,</span> <span class="n">length</span><span class="p">))</span>
                       
                       
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Line of Consecutive One in Matrix</title>
			<link>https://jasonyangshadow.win/posts/longest-line-of-consecutive-one-in-matrix/</link>
			<pubDate>Thu, 02 Apr 2020 17:58:11 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-line-of-consecutive-one-in-matrix/</guid>
			<description>Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal. Example:
Input: [[0,1,1,0], [0,1,1,0], [0,0,0,1]] Output: 3 Hint: The number of elements in the given matrix will not exceed 10,000.
class Solution: def longestLine(self, M: List[List[int]]) -&amp;gt; int: if len(M) == 0 or len(M[0]) == 0: return 0 ones = 0 dp = [[[0,0,0,0] for _ in range(len(M[0]))] for _ in range(len(M))] for i in range(len(M)): for j in range(len(M[0])): if M[i][j] == 1: #horizon dp[i][j][0] = dp[i][j-1][0] + 1 if j &amp;gt; 0 else 1 #vertical dp[i][j][1] = dp[i-1][j][1] + 1 if i &amp;gt; 0 else 1 #diagonal dp[i][j][2] = dp[i-1][j-1][2] + 1 if i &amp;gt; 0 and j &amp;gt; 0 else 1 #anti-diagonal ##attention this postion is i-1, j+1 dp[i][j][3] = dp[i-1][j+1][3] + 1 if i &amp;gt; 0 and j &amp;lt; len(M[0]) - 1 else 1 ones = max(ones, max(dp[i][j][0], dp[i][j][1], dp[i][j][2], dp[i][j][3])) return ones </description>
			<content type="html"><![CDATA[<p>Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.
Example:</p>
<pre><code>Input:
[[0,1,1,0],
 [0,1,1,0],
 [0,0,0,1]]
Output: 3
</code></pre><p>Hint: The number of elements in the given matrix will not exceed 10,000.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestLine</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">M</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">M</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">M</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="n">ones</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">M</span><span class="p">[</span><span class="mi">0</span><span class="p">]))]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">M</span><span class="p">))]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">M</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">M</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="k">if</span> <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="c1">#horizon</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span>
                    <span class="c1">#vertical</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span>
                    <span class="c1">#diagonal</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span>
                    <span class="c1">#anti-diagonal ##attention this postion is i-1, j+1</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">M</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">1</span>
                    <span class="n">ones</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ones</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">3</span><span class="p">]))</span>
        
        <span class="k">return</span> <span class="n">ones</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Random Pick With Weight</title>
			<link>https://jasonyangshadow.win/posts/random-pick-with-weight/</link>
			<pubDate>Thu, 02 Apr 2020 17:15:48 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/random-pick-with-weight/</guid>
			<description>Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.
Note:
1 &amp;lt;= w.length &amp;lt;= 10000 1 &amp;lt;= w[i] &amp;lt;= 10^5 pickIndex will be called at most 10000 times. Example 1:
Input: [&amp;quot;Solution&amp;quot;,&amp;quot;pickIndex&amp;quot;] [[[1]],[]] Output: [null,0] Example 2:
Input: [&amp;quot;Solution&amp;quot;,&amp;quot;pickIndex&amp;quot;,&amp;quot;pickIndex&amp;quot;,&amp;quot;pickIndex&amp;quot;,&amp;quot;pickIndex&amp;quot;,&amp;quot;pickIndex&amp;quot;] [[[1,3]],[],[],[],[],[]] Output: [null,0,1,1,1,0] Explanation of Input Syntax: The input is two lists: the subroutines called and their arguments.</description>
			<content type="html"><![CDATA[<p>Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.</p>
<p>Note:</p>
<p>1 &lt;= w.length &lt;= 10000
1 &lt;= w[i] &lt;= 10^5
pickIndex will be called at most 10000 times.
Example 1:</p>
<pre><code>Input: 
[&quot;Solution&quot;,&quot;pickIndex&quot;]
[[[1]],[]]
Output: [null,0]
</code></pre><p>Example 2:</p>
<pre><code>Input: 
[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]
[[[1,3]],[],[],[],[],[]]
Output: [null,0,1,1,1,0]
Explanation of Input Syntax:
</code></pre><p>The input is two lists: the subroutines called and their arguments. Solution&rsquo;s constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren&rsquo;t any.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">w</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">w</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">accumulate</span><span class="p">(</span><span class="n">w</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">pickIndex</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect_left</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">w</span><span class="p">,</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">w</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>


<span class="c1"># Your Solution object will be instantiated and called as such:</span>
<span class="c1"># obj = Solution(w)</span>
<span class="c1"># param_1 = obj.pickIndex()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Range Sum Query 2d</title>
			<link>https://jasonyangshadow.win/posts/range-sum-query-2d/</link>
			<pubDate>Thu, 02 Apr 2020 16:03:40 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/range-sum-query-2d/</guid>
			<description>Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
Range Sum Query 2D The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.
Example:
Given matrix = [ [3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5] ] sumRegion(2, 1, 4, 3) -&amp;gt; 8 sumRegion(1, 1, 2, 2) -&amp;gt; 11 sumRegion(1, 2, 2, 4) -&amp;gt; 12 Note: You may assume that the matrix does not change.</description>
			<content type="html"><![CDATA[<p>Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</p>
<p>Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.<br>
<img src="https://leetcode.com/static/images/courses/range_sum_query_2d.png" alt="image"><br>
Example:</p>
<pre><code>Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -&gt; 8
sumRegion(1, 1, 2, 2) -&gt; 11
sumRegion(1, 2, 2, 4) -&gt; 12
</code></pre><p>Note:
You may assume that the matrix does not change.
There are many calls to sumRegion function.
You may assume that row1 ≤ row2 and col1 ≤ col2.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">NumMatrix</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">matrix</span> <span class="o">=</span> <span class="n">matrix</span>

    <span class="k">def</span> <span class="nf">sumRegion</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">row1</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">col1</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">row2</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">col2</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">row1</span> <span class="o">==</span> <span class="n">row2</span> <span class="ow">and</span> <span class="n">col1</span> <span class="o">==</span> <span class="n">col2</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">row1</span><span class="p">][</span><span class="n">col1</span><span class="p">]</span>
        <span class="k">elif</span> <span class="n">row1</span> <span class="o">==</span> <span class="n">row2</span> <span class="ow">and</span> <span class="n">col1</span> <span class="o">!=</span> <span class="n">col2</span><span class="p">:</span>
            <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">col1</span><span class="p">,</span> <span class="n">col2</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">s</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">row1</span><span class="p">][</span><span class="n">c</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">s</span>
        <span class="k">elif</span> <span class="n">col1</span> <span class="o">==</span> <span class="n">col2</span> <span class="ow">and</span> <span class="n">row1</span> <span class="o">!=</span> <span class="n">row2</span><span class="p">:</span>
            <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">row1</span><span class="p">,</span> <span class="n">row2</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">s</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">col1</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">s</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">row1</span><span class="p">,</span> <span class="n">row2</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">col1</span><span class="p">,</span> <span class="n">col2</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                    <span class="n">s</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">s</span>


<span class="c1"># Your NumMatrix object will be instantiated and called as such:</span>
<span class="c1"># obj = NumMatrix(matrix)</span>
<span class="c1"># param_1 = obj.sumRegion(row1,col1,row2,col2)</span>
</code></pre></div><p>Using pre-sum method.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">NumMatrix</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]):</span>
        <span class="n">row</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
        <span class="n">col</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">if</span> <span class="n">row</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sum</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">col</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">row</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">col</span><span class="p">):</span>
                <span class="n">top</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sum</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
                <span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sum</span><span class="p">[</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
                <span class="n">topleft</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sum</span><span class="p">[</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">c</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">sum</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">+</span> <span class="n">top</span> <span class="o">+</span> <span class="n">left</span> <span class="o">-</span> <span class="n">topleft</span>

    <span class="k">def</span> <span class="nf">sumRegion</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">row1</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">col1</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">row2</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">col2</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sum</span><span class="p">[</span><span class="n">row2</span><span class="p">][</span><span class="n">col1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">col1</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
        <span class="n">top</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sum</span><span class="p">[</span><span class="n">row1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">col2</span><span class="p">]</span> <span class="k">if</span> <span class="n">row1</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
        <span class="n">topleft</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sum</span><span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">col1</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">row1</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">col1</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">sum</span><span class="p">[</span><span class="n">row2</span><span class="p">][</span><span class="n">col2</span><span class="p">]</span> <span class="o">-</span> <span class="n">top</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="n">topleft</span>


<span class="c1"># Your NumMatrix object will be instantiated and called as such:</span>
<span class="c1"># obj = NumMatrix(matrix)</span>
<span class="c1"># param_1 = obj.sumRegion(row1,col1,row2,col2)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Reveal Cards in Increasing Order</title>
			<link>https://jasonyangshadow.win/posts/reveal-cards-in-increasing-order/</link>
			<pubDate>Wed, 01 Apr 2020 23:46:23 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/reveal-cards-in-increasing-order/</guid>
			<description>In a deck of cards, every card has a unique integer. You can order the deck in any order you want.
Initially, all the cards start face down (unrevealed) in one deck.
Now, you do the following steps repeatedly, until all cards are revealed:
Take the top card of the deck, reveal it, and take it out of the deck. If there are still cards in the deck, put the next top card of the deck at the bottom of the deck.</description>
			<content type="html"><![CDATA[<p>In a deck of cards, every card has a unique integer.  You can order the deck in any order you want.</p>
<p>Initially, all the cards start face down (unrevealed) in one deck.</p>
<p>Now, you do the following steps repeatedly, until all cards are revealed:</p>
<p>Take the top card of the deck, reveal it, and take it out of the deck.
If there are still cards in the deck, put the next top card of the deck at the bottom of the deck.
If there are still unrevealed cards, go back to step 1.  Otherwise, stop.
Return an ordering of the deck that would reveal the cards in increasing order.</p>
<p>The first entry in the answer is considered to be the top of the deck.</p>
<p>Example 1:</p>
<pre><code>Input: [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation: 
We get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it.
After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.
We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].
We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].
We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
We reveal 13, and move 17 to the bottom.  The deck is now [17].
We reveal 17.
Since all the cards revealed are in increasing order, the answer is correct.
</code></pre><p>Note:</p>
<p>1 &lt;= A.length &lt;= 1000
1 &lt;= A[i] &lt;= 10^6
A[i] != A[j] for all i != j</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">deckRevealedIncreasing</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">deck</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">deck</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">d</span><span class="o">.</span><span class="n">rotate</span><span class="p">()</span>
            <span class="n">d</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest World in a Dictionary Through Deleting</title>
			<link>https://jasonyangshadow.win/posts/longest-world-in-a-dictionary-through-deleting/</link>
			<pubDate>Wed, 01 Apr 2020 20:28:52 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-world-in-a-dictionary-through-deleting/</guid>
			<description>Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.
Example 1:
Input: s = &amp;quot;abpcplea&amp;quot;, d = [&amp;quot;ale&amp;quot;,&amp;quot;apple&amp;quot;,&amp;quot;monkey&amp;quot;,&amp;quot;plea&amp;quot;] Output: &amp;quot;apple&amp;quot; Example 2:
Input: s = &amp;quot;abpcplea&amp;quot;, d = [&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;] Output: &amp;quot;a&amp;quot; Note: All the strings in the input will only contain lower-case letters.</description>
			<content type="html"><![CDATA[<p>Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</p>
<p>Example 1:</p>
<pre><code>Input:
s = &quot;abpcplea&quot;, d = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]

Output: 
&quot;apple&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input:
s = &quot;abpcplea&quot;, d = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]

Output: 
&quot;a&quot;
</code></pre><p>Note:
All the strings in the input will only contain lower-case letters.
The size of the dictionary won&rsquo;t exceed 1,000.
The length of all the strings in the input won&rsquo;t exceed 1,000.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findLongestWord</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">x</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
            <span class="n">i1</span> <span class="o">=</span> <span class="n">i2</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="n">i1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="ow">and</span> <span class="n">i2</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">item</span><span class="p">[</span><span class="n">i1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i2</span><span class="p">]:</span>
                    <span class="n">i1</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">i2</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">i1</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="ow">and</span> <span class="n">i2</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">item</span>
        <span class="k">return</span> <span class="s2">&#34;&#34;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Contains Duplicate 3</title>
			<link>https://jasonyangshadow.win/posts/contains-duplicate-3/</link>
			<pubDate>Wed, 01 Apr 2020 20:00:40 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/contains-duplicate-3/</guid>
			<description>Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.
Example 1:
Input: nums = [1,2,3,1], k = 3, t = 0 Output: true Example 2:
Input: nums = [1,0,1,1], k = 1, t = 2 Output: true Example 3:</description>
			<content type="html"><![CDATA[<p>Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.</p>
<p>Example 1:</p>
<pre><code>Input: nums = [1,2,3,1], k = 3, t = 0
Output: true
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [1,0,1,1], k = 1, t = 2
Output: true
</code></pre><p>Example 3:</p>
<pre><code>Input: nums = [1,5,9,1,5,9], k = 2, t = 3
Output: false
</code></pre><p>Bucket algorithms.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">containsNearbyAlmostDuplicate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
        <span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1">#O(n)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="c1">#bucket id</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">//</span> <span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="c1">#check if neighour buckets satisfy</span>
            <span class="k">if</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">d</span> <span class="ow">or</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">d</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">d</span> <span class="ow">and</span> <span class="n">d</span><span class="p">[</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="n">d</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="c1">#remove expired bucket elements</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">k</span><span class="p">:</span> <span class="k">del</span> <span class="n">d</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">k</span><span class="p">]</span> <span class="o">//</span> <span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Split Array Into Consecutive Subsequences</title>
			<link>https://jasonyangshadow.win/posts/split-array-into-consecutive-subsequences/</link>
			<pubDate>Wed, 01 Apr 2020 18:42:59 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/split-array-into-consecutive-subsequences/</guid>
			<description>Given an array nums sorted in ascending order, return true if and only if you can split it into 1 or more subsequences such that each subsequence consists of consecutive integers and has length at least 3.
Example 1:
Input: [1,2,3,3,4,5] Output: True Explanation: You can split them into two consecutive subsequences : 1, 2, 3 3, 4, 5 Example 2:
Input: [1,2,3,3,4,4,5,5] Output: True Explanation: You can split them into two consecutive subsequences : 1, 2, 3, 4, 5 3, 4, 5 Example 3:</description>
			<content type="html"><![CDATA[<p>Given an array nums sorted in ascending order, return true if and only if you can split it into 1 or more subsequences such that each subsequence consists of consecutive integers and has length at least 3.</p>
<p>Example 1:</p>
<pre><code>Input: [1,2,3,3,4,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3
3, 4, 5
</code></pre><p>Example 2:</p>
<pre><code>Input: [1,2,3,3,4,4,5,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3, 4, 5
3, 4, 5
</code></pre><p>Example 3:</p>
<pre><code>Input: [1,2,3,4,4,5]
Output: False
</code></pre><p>Constraints:</p>
<p>1 &lt;= nums.length &lt;= 10000</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isPossible</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="c1">#left is for all nums unused yet</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="c1">#end is for continuous sequence ending at num</span>
        <span class="n">end</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="c1">#use current num</span>
            <span class="n">left</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="c1">#if we can connect to previous sequence</span>
            <span class="k">if</span> <span class="n">end</span><span class="p">[</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">end</span><span class="p">[</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">end</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="c1">#if we can build new sequence</span>
            <span class="k">elif</span> <span class="n">left</span><span class="p">[</span><span class="n">num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">left</span><span class="p">[</span><span class="n">num</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">left</span><span class="p">[</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">left</span><span class="p">[</span><span class="n">num</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">end</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find Peak Element</title>
			<link>https://jasonyangshadow.win/posts/find-peak-element/</link>
			<pubDate>Wed, 01 Apr 2020 18:23:56 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-peak-element/</guid>
			<description>A peak element is an element that is greater than its neighbors.
Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.
The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.
You may imagine that nums[-1] = nums[n] = -∞.
Example 1:
Input: nums = [1,2,3,1] Output: 2 Explanation: 3 is a peak element and your function should return the index number 2.</description>
			<content type="html"><![CDATA[<p>A peak element is an element that is greater than its neighbors.</p>
<p>Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.</p>
<p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p>
<p>You may imagine that nums[-1] = nums[n] = -∞.</p>
<p>Example 1:</p>
<pre><code>Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.
</code></pre><p>Note:</p>
<p>Your solution should be in logarithmic complexity.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findPeakElement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
                <span class="k">return</span> <span class="n">mid</span>
            <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">l</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Palindrome</title>
			<link>https://jasonyangshadow.win/posts/longest-palindrome/</link>
			<pubDate>Wed, 01 Apr 2020 18:12:05 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-palindrome/</guid>
			<description>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.
This is case sensitive, for example &amp;ldquo;Aa&amp;rdquo; is not considered a palindrome here.
Note: Assume the length of given string will not exceed 1,010.
Example:
Input: &amp;quot;abccccdd&amp;quot; Output: 7 Explanation: One longest palindrome that can be built is &amp;quot;dccaccd&amp;quot;, whose length is 7. We can at most use only one odd-count char, all of others should be avoided to use.</description>
			<content type="html"><![CDATA[<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example &ldquo;Aa&rdquo; is not considered a palindrome here.</p>
<p>Note:
Assume the length of given string will not exceed 1,010.</p>
<p>Example:</p>
<pre><code>Input:
&quot;abccccdd&quot;

Output:
7

Explanation:
One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.
</code></pre><p>We can at most use only one odd-count char, all of others should be avoided to use.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">odds</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">v</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="n">odds</span> <span class="o">+</span> <span class="nb">bool</span><span class="p">(</span><span class="n">odds</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sort Array by Parity</title>
			<link>https://jasonyangshadow.win/posts/sort-array-by-parity/</link>
			<pubDate>Tue, 31 Mar 2020 23:17:55 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sort-array-by-parity/</guid>
			<description>Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.
You may return any answer array that satisfies this condition.
Example 1:
Input: [3,1,2,4] Output: [2,4,3,1] The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted. Note:
1 &amp;lt;= A.length &amp;lt;= 5000 0 &amp;lt;= A[i] &amp;lt;= 5000
class Solution: def sortArrayByParity(self, A: List[int]) -&amp;gt; List[int]: odd = 0 even = len(A) - 1 while odd &amp;lt; even: while A[odd] % 2 == 0 and odd &amp;lt; even: odd += 1 while A[even] % 2 == 1 and even &amp;gt; odd: even -= 1 #swap old and even if odd &amp;lt; even: temp = A[odd] A[odd] = A[even] A[even] = temp odd += 1 even -= 1 return A class Solution: def sortArrayByParity(self, A: List[int]) -&amp;gt; List[int]: return sorted(A, key = lambda x: x%2) </description>
			<content type="html"><![CDATA[<p>Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.</p>
<p>You may return any answer array that satisfies this condition.</p>
<p>Example 1:</p>
<pre><code>Input: [3,1,2,4]
Output: [2,4,3,1]
The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
</code></pre><p>Note:</p>
<p>1 &lt;= A.length &lt;= 5000
0 &lt;= A[i] &lt;= 5000</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sortArrayByParity</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">odd</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">even</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">odd</span> <span class="o">&lt;</span> <span class="n">even</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">A</span><span class="p">[</span><span class="n">odd</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">odd</span> <span class="o">&lt;</span> <span class="n">even</span><span class="p">:</span>
                <span class="n">odd</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">A</span><span class="p">[</span><span class="n">even</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">even</span> <span class="o">&gt;</span> <span class="n">odd</span><span class="p">:</span>
                <span class="n">even</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="c1">#swap old and even</span>
            <span class="k">if</span> <span class="n">odd</span> <span class="o">&lt;</span> <span class="n">even</span><span class="p">:</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">odd</span><span class="p">]</span>
                <span class="n">A</span><span class="p">[</span><span class="n">odd</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">even</span><span class="p">]</span>
                <span class="n">A</span><span class="p">[</span><span class="n">even</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
                <span class="n">odd</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">even</span> <span class="o">-=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">A</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sortArrayByParity</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find Kth Smallest Pair Distance</title>
			<link>https://jasonyangshadow.win/posts/find-kth-smallest-pair-distance/</link>
			<pubDate>Tue, 31 Mar 2020 23:07:55 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-kth-smallest-pair-distance/</guid>
			<description>Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.
Example 1:
Input: nums = [1,3,1] k = 1 Output: 0 Explanation: Here are all the pairs: (1,3) -&amp;gt; 2 (1,1) -&amp;gt; 0 (3,1) -&amp;gt; 2 Then the 1st smallest distance pair is (1,1), and its distance is 0. Note: 2 &amp;lt;= len(nums) &amp;lt;= 10000.</description>
			<content type="html"><![CDATA[<p>Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.</p>
<p>Example 1:</p>
<pre><code>Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Here are all the pairs:
(1,3) -&gt; 2
(1,1) -&gt; 0
(3,1) -&gt; 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
</code></pre><p>Note:
2 &lt;= len(nums) &lt;= 10000.
0 &lt;= nums[i] &lt; 1000000.
1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2.</p>
<p>TLE version</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">smallestDistancePair</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
                <span class="n">s</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
        
        <span class="k">return</span> <span class="n">heapq</span><span class="o">.</span><span class="n">nsmallest</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Product of the Last K Numbers</title>
			<link>https://jasonyangshadow.win/posts/product-of-the-last-k-numbers/</link>
			<pubDate>Tue, 31 Mar 2020 22:28:16 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/product-of-the-last-k-numbers/</guid>
			<description>Implement the class ProductOfNumbers that supports two methods:
 add(int num)  Adds the number num to the back of the current list of numbers. 2. getProduct(int k)
Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers. At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</description>
			<content type="html"><![CDATA[<p>Implement the class ProductOfNumbers that supports two methods:</p>
<ol>
<li>add(int num)</li>
</ol>
<p>Adds the number num to the back of the current list of numbers.
2. getProduct(int k)</p>
<p>Returns the product of the last k numbers in the current list.
You can assume that always the current list has at least k numbers.
At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</p>
<p>Example:</p>
<pre><code>Input
[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

Output
[null,null,null,null,null,null,20,40,0,null,32]

Explanation
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 
</code></pre><p>Constraints:</p>
<p>There will be at most 40000 operations considering both add and getProduct.
0 &lt;= num &lt;= 100
1 &lt;= k &lt;= 40000</p>
<p>Suffering TLE error.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">ProductOfNumbers</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">getProduct</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">length</span> <span class="o">-</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">res</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">d</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">res</span>


<span class="c1"># Your ProductOfNumbers object will be instantiated and called as such:</span>
<span class="c1"># obj = ProductOfNumbers()</span>
<span class="c1"># obj.add(num)</span>
<span class="c1"># param_2 = obj.getProduct(k)</span>
</code></pre></div><p>Product prefix.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">ProductOfNumbers</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">num</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">getProduct</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">k</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">):</span> <span class="k">return</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">//</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="o">-</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>


<span class="c1"># Your ProductOfNumbers object will be instantiated and called as such:</span>
<span class="c1"># obj = ProductOfNumbers()</span>
<span class="c1"># obj.add(num)</span>
<span class="c1"># param_2 = obj.getProduct(k)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Guess Number Higher or Lower 2</title>
			<link>https://jasonyangshadow.win/posts/guess-number-higher-or-lower-2/</link>
			<pubDate>Tue, 31 Mar 2020 21:16:50 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/guess-number-higher-or-lower-2/</guid>
			<description>We are playing the Guess Game. The game is as follows:
I pick a number from 1 to n. You have to guess which number I picked.
Every time you guess wrong, I&amp;rsquo;ll tell you whether the number I picked is higher or lower.
However, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.</description>
			<content type="html"><![CDATA[<p>We are playing the Guess Game. The game is as follows:</p>
<p>I pick a number from 1 to n. You have to guess which number I picked.</p>
<p>Every time you guess wrong, I&rsquo;ll tell you whether the number I picked is higher or lower.</p>
<p>However, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.</p>
<p>Example:</p>
<pre><code>n = 10, I pick 8.

First round:  You guess 5, I tell you that it's higher. You pay $5.
Second round: You guess 7, I tell you that it's higher. You pay $7.
Third round:  You guess 9, I tell you that it's lower. You pay $9.
</code></pre><p>Game over. 8 is the number I picked.</p>
<p>You end up paying $5 + $7 + $9 = $21.
Given a particular n ≥ 1, find out how much money you need to have to guarantee a win.</p>
<p>dp[i][j] is the minimal cost to guess from range(i&hellip;j).
When you choose an x where i &lt;= x &lt;= j, you may find the target number from left i&hellip;x-1, or you may find the target number from the x+1&hellip;j, because you don&rsquo;t know which way should go, so to guarantee you have enough money to find the target, you need to prepare the more, which is max(dp[i][x-1], dp[x+1][j]).</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getMoneyAmount</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">lo</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">hi</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">lo</span><span class="p">][</span><span class="n">hi</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">lo</span><span class="p">][</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">hi</span><span class="p">])</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">n</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Redundant Connection</title>
			<link>https://jasonyangshadow.win/posts/redundant-connection/</link>
			<pubDate>Tue, 31 Mar 2020 19:17:39 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/redundant-connection/</guid>
			<description>In this problem, a tree is an undirected graph that is connected and has no cycles.
The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, &amp;hellip;, N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.
The resulting graph is given as a 2D-array of edges.</description>
			<content type="html"><![CDATA[<p>In this problem, a tree is an undirected graph that is connected and has no cycles.</p>
<p>The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, &hellip;, N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.</p>
<p>The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u &lt; v, that represents an undirected edge connecting nodes u and v.</p>
<p>Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u &lt; v.</p>
<p>Example 1:</p>
<pre><code>Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
</code></pre><p>Example 2:</p>
<pre><code>Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
</code></pre><p>Note:
The size of the input 2D-array will be between 3 and 1000.
Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.</p>
<p>Update (2017-09-26):
We have overhauled the problem description + test cases and specified clearly the graph is an undirected graph. For the directed graph follow up please see Redundant Connection II). We apologize for any inconvenience caused.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findRedundantConnection</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">edges</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">set</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">source</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">source</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
                <span class="k">return</span> <span class="nb">any</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">nei</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="k">for</span> <span class="n">nei</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">source</span><span class="p">])</span>
        
        <span class="k">for</span> <span class="n">u</span> <span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">edges</span><span class="p">:</span>
            <span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">graph</span> <span class="ow">and</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">graph</span> <span class="ow">and</span> <span class="n">dfs</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">u</span><span class="p">,</span><span class="n">v</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</code></pre></div><p>DSU solution:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">DSU</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">par</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1001</span><span class="p">)]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">rnk</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">1001</span>
        
    <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">x</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">])</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
        <span class="n">xr</span><span class="p">,</span> <span class="n">yr</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">xr</span> <span class="o">==</span> <span class="n">yr</span> <span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">rnk</span><span class="p">[</span><span class="n">xr</span><span class="p">]</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">rnk</span><span class="p">[</span><span class="n">yr</span><span class="p">]:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">xr</span><span class="p">]</span> <span class="o">=</span> <span class="n">yr</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">rnk</span><span class="p">[</span><span class="n">xr</span><span class="p">]</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">rnk</span><span class="p">[</span><span class="n">yr</span><span class="p">]:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">yr</span><span class="p">]</span> <span class="o">=</span> <span class="n">xr</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">yr</span><span class="p">]</span> <span class="o">=</span> <span class="n">xr</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">rnk</span><span class="p">[</span><span class="n">xr</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">True</span>
    
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findRedundantConnection</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">edges</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">dsu</span> <span class="o">=</span> <span class="n">DSU</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">edges</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">dsu</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="o">*</span><span class="n">edge</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">edge</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sentence Similarity 2</title>
			<link>https://jasonyangshadow.win/posts/sentence-similarity-2/</link>
			<pubDate>Tue, 31 Mar 2020 14:55:40 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sentence-similarity-2/</guid>
			<description>Given two sentences words1, words2 (each represented as an array of strings), and a list of similar word pairs pairs, determine if two sentences are similar.
For example, words1 = [&amp;ldquo;great&amp;rdquo;, &amp;ldquo;acting&amp;rdquo;, &amp;ldquo;skills&amp;rdquo;] and words2 = [&amp;ldquo;fine&amp;rdquo;, &amp;ldquo;drama&amp;rdquo;, &amp;ldquo;talent&amp;rdquo;] are similar, if the similar word pairs are pairs = [[&amp;ldquo;great&amp;rdquo;, &amp;ldquo;good&amp;rdquo;], [&amp;ldquo;fine&amp;rdquo;, &amp;ldquo;good&amp;rdquo;], [&amp;ldquo;acting&amp;rdquo;,&amp;ldquo;drama&amp;rdquo;], [&amp;ldquo;skills&amp;rdquo;,&amp;ldquo;talent&amp;rdquo;]].
Note that the similarity relation is transitive. For example, if &amp;ldquo;great&amp;rdquo; and &amp;ldquo;good&amp;rdquo; are similar, and &amp;ldquo;fine&amp;rdquo; and &amp;ldquo;good&amp;rdquo; are similar, then &amp;ldquo;great&amp;rdquo; and &amp;ldquo;fine&amp;rdquo; are similar.</description>
			<content type="html"><![CDATA[<p>Given two sentences words1, words2 (each represented as an array of strings), and a list of similar word pairs pairs, determine if two sentences are similar.</p>
<p>For example, words1 = [&ldquo;great&rdquo;, &ldquo;acting&rdquo;, &ldquo;skills&rdquo;] and words2 = [&ldquo;fine&rdquo;, &ldquo;drama&rdquo;, &ldquo;talent&rdquo;] are similar, if the similar word pairs are pairs = [[&ldquo;great&rdquo;, &ldquo;good&rdquo;], [&ldquo;fine&rdquo;, &ldquo;good&rdquo;], [&ldquo;acting&rdquo;,&ldquo;drama&rdquo;], [&ldquo;skills&rdquo;,&ldquo;talent&rdquo;]].</p>
<p>Note that the similarity relation is transitive. For example, if &ldquo;great&rdquo; and &ldquo;good&rdquo; are similar, and &ldquo;fine&rdquo; and &ldquo;good&rdquo; are similar, then &ldquo;great&rdquo; and &ldquo;fine&rdquo; are similar.</p>
<p>Similarity is also symmetric. For example, &ldquo;great&rdquo; and &ldquo;fine&rdquo; being similar is the same as &ldquo;fine&rdquo; and &ldquo;great&rdquo; being similar.</p>
<p>Also, a word is always similar with itself. For example, the sentences words1 = [&ldquo;great&rdquo;], words2 = [&ldquo;great&rdquo;], pairs = [] are similar, even though there are no specified similar word pairs.</p>
<p>Finally, sentences can only be similar if they have the same number of words. So a sentence like words1 = [&ldquo;great&rdquo;] can never be similar to words2 = [&ldquo;doubleplus&rdquo;,&ldquo;good&rdquo;].</p>
<p>Note:</p>
<p>The length of words1 and words2 will not exceed 1000.
The length of pairs will not exceed 2000.
The length of each pairs[i] will be 2.
The length of each words[i] and pairs[i][j] will be in the range [1, 20].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">areSentencesSimilarTwo</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">words2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">pairs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">words1</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">words2</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="c1">#gernerate a dictionary set</span>
        <span class="n">words</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">set</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">w1</span><span class="p">,</span> <span class="n">w2</span> <span class="ow">in</span> <span class="n">pairs</span><span class="p">:</span>
            <span class="n">words</span><span class="p">[</span><span class="n">w1</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">w2</span><span class="p">)</span>
            <span class="n">words</span><span class="p">[</span><span class="n">w2</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">w1</span><span class="p">)</span>
        
        <span class="n">similar_words</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1">#flat the data into a key/value map, that all similar words point to one unique root world</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">root_word</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">similar_words</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">similar_words</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="n">root_word</span>
            <span class="p">[</span><span class="n">dfs</span><span class="p">(</span><span class="n">synom</span><span class="p">,</span> <span class="n">root_word</span><span class="p">)</span> <span class="k">for</span> <span class="n">synom</span> <span class="ow">in</span> <span class="n">words</span><span class="p">[</span><span class="n">word</span><span class="p">]]</span>
        
        <span class="p">[</span><span class="n">dfs</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="n">word</span><span class="p">)</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="nb">all</span><span class="p">(</span><span class="n">similar_words</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">w1</span><span class="p">,</span> <span class="n">w1</span><span class="p">)</span> <span class="o">==</span> <span class="n">similar_words</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">w2</span><span class="p">,</span> <span class="n">w2</span><span class="p">)</span> <span class="k">for</span> <span class="n">w1</span><span class="p">,</span> <span class="n">w2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">words1</span><span class="p">,</span> <span class="n">words2</span><span class="p">))</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">areSentencesSimilarTwo</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">words2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">pairs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">words1</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">words2</span><span class="p">):</span> <span class="k">return</span> <span class="bp">False</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">w1</span><span class="p">,</span> <span class="n">w2</span> <span class="ow">in</span> <span class="n">pairs</span><span class="p">:</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">w1</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w2</span><span class="p">)</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">w2</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w1</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">w1</span><span class="p">,</span> <span class="n">w2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">words1</span><span class="p">,</span> <span class="n">words2</span><span class="p">):</span>
            <span class="n">stack</span><span class="p">,</span> <span class="n">seen</span> <span class="o">=</span> <span class="p">[</span><span class="n">w1</span><span class="p">],</span> <span class="p">{</span><span class="n">w1</span><span class="p">}</span>
            <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
                <span class="n">word</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">w2</span><span class="p">:</span> <span class="k">break</span>
                <span class="k">for</span> <span class="n">nei</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">word</span><span class="p">]:</span>
                    <span class="k">if</span> <span class="n">nei</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                        <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">nei</span><span class="p">)</span>
                        <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nei</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">DSU</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
        <span class="c1">#par stores the parent of current val</span>
        <span class="c1">#example: self.par[15] = 3 -&gt; 3 is the parent of 15</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">par</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
    <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1">#if x is root then self.par[x] = x</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">x</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">])</span>
        <span class="c1">#find the root parent of x</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
    <span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="c1">#merge the root of x and y together</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">par</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
        
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">areSentencesSimilarTwo</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">words2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">pairs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">words1</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">words2</span><span class="p">):</span> <span class="k">return</span> <span class="bp">False</span>
        
        <span class="n">index</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
        <span class="n">dsu</span> <span class="o">=</span> <span class="n">DSU</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">pairs</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">pairs</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">pair</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">p</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">index</span><span class="p">:</span>
                    <span class="c1">#give different item different valus</span>
                    <span class="c1"># e.g</span>
                    <span class="c1">#{&#39;great&#39;: 0, &#39;good&#39;: 1, &#39;fine&#39;: 2, &#39;drama&#39;: 3, &#39;acting&#39;: 4, &#39;skills&#39;: 5, &#39;talent&#39;: 6} </span>
                   <span class="n">index</span><span class="p">[</span><span class="n">p</span><span class="p">]</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
            <span class="c1">#connect the pair based on its unique number</span>
            <span class="c1"># [1, 1, 1, 4, 4, 6, 6, 7]</span>
            <span class="n">dsu</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">index</span><span class="p">[</span><span class="n">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="n">index</span><span class="p">[</span><span class="n">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
            
        <span class="k">return</span> <span class="nb">all</span><span class="p">(</span><span class="n">w1</span> <span class="o">==</span> <span class="n">w2</span> <span class="ow">or</span> 
                   <span class="n">w1</span> <span class="ow">in</span> <span class="n">index</span> <span class="ow">and</span> <span class="n">w2</span> <span class="ow">in</span> <span class="n">index</span> <span class="ow">and</span> <span class="n">dsu</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">index</span><span class="p">[</span><span class="n">w1</span><span class="p">])</span> <span class="o">==</span> <span class="n">dsu</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">index</span><span class="p">[</span><span class="n">w2</span><span class="p">])</span> <span class="k">for</span> <span class="n">w1</span><span class="p">,</span> <span class="n">w2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">words1</span><span class="p">,</span> <span class="n">words2</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Top K Frequent Words</title>
			<link>https://jasonyangshadow.win/posts/top-k-frequent-words/</link>
			<pubDate>Mon, 30 Mar 2020 23:05:23 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/top-k-frequent-words/</guid>
			<description>Given a non-empty list of words, return the k most frequent elements.
Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.
Example 1:
Input: [&amp;quot;i&amp;quot;, &amp;quot;love&amp;quot;, &amp;quot;leetcode&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;love&amp;quot;, &amp;quot;coding&amp;quot;], k = 2 Output: [&amp;quot;i&amp;quot;, &amp;quot;love&amp;quot;] Explanation: &amp;quot;i&amp;quot; and &amp;quot;love&amp;quot; are the two most frequent words. Note that &amp;quot;i&amp;quot; comes before &amp;quot;love&amp;quot; due to a lower alphabetical order.</description>
			<content type="html"><![CDATA[<p>Given a non-empty list of words, return the k most frequent elements.</p>
<p>Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.</p>
<p>Example 1:</p>
<pre><code>Input: [&quot;i&quot;, &quot;love&quot;, &quot;leetcode&quot;, &quot;i&quot;, &quot;love&quot;, &quot;coding&quot;], k = 2
Output: [&quot;i&quot;, &quot;love&quot;]
Explanation: &quot;i&quot; and &quot;love&quot; are the two most frequent words.
    Note that &quot;i&quot; comes before &quot;love&quot; due to a lower alphabetical order.
</code></pre><p>Example 2:</p>
<pre><code>Input: [&quot;the&quot;, &quot;day&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;the&quot;, &quot;the&quot;, &quot;the&quot;, &quot;sunny&quot;, &quot;is&quot;, &quot;is&quot;], k = 4
Output: [&quot;the&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;day&quot;]
Explanation: &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; and &quot;day&quot; are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.
</code></pre><p>Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Input words contain only lowercase letters.
Follow up:
Try to solve it in O(n log k) time and O(n) extra space.</p>
<pre><code>In order to sort a list of tuples (&lt;word&gt;, &lt;count&gt;), for count in descending order and word in alphabetical order:
Use (-item[1], item[0])
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">topKFrequent</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">())</span>
        <span class="n">items</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">item</span><span class="p">:(</span><span class="o">-</span><span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">k</span><span class="p">]]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>All Possible Full Binary Tree</title>
			<link>https://jasonyangshadow.win/posts/all-possible-full-binary-tree/</link>
			<pubDate>Mon, 30 Mar 2020 22:36:10 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/all-possible-full-binary-tree/</guid>
			<description>A full binary tree is a binary tree where each node has exactly 0 or 2 children.
Return a list of all possible full binary trees with N nodes. Each element of the answer is the root node of one possible tree.
Each node of each tree in the answer must have node.val = 0.
You may return the final list of trees in any order.
Example 1:
Input: 7 Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]] Explanation: Note:</description>
			<content type="html"><![CDATA[<p>A full binary tree is a binary tree where each node has exactly 0 or 2 children.</p>
<p>Return a list of all possible full binary trees with N nodes.  Each element of the answer is the root node of one possible tree.</p>
<p>Each node of each tree in the answer must have node.val = 0.</p>
<p>You may return the final list of trees in any order.</p>
<p>Example 1:</p>
<pre><code>Input: 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
</code></pre><p>Explanation:
<img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png" alt="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png"></p>
<p>Note:</p>
<p>1 &lt;= N &lt;= 20</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">allPossibleFBT</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">]:</span>
        <span class="n">N</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="p">[</span><span class="n">TreeNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)]</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">N</span><span class="p">,</span><span class="mi">20</span><span class="p">),</span> <span class="mi">2</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">left</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">allPossibleFBT</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">right</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">allPossibleFBT</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">l</span><span class="p">):</span>
                    <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                    <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left</span>
                    <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right</span>
                    <span class="n">ret</span> <span class="o">+=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div><p>Solution with memo</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="n">memo</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:[],</span> <span class="mi">1</span><span class="p">:[</span><span class="n">TreeNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)]}</span>
    <span class="k">def</span> <span class="nf">allPossibleFBT</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">N</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">Solution</span><span class="o">.</span><span class="n">memo</span><span class="p">:</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
                <span class="n">y</span> <span class="o">=</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">x</span>
                <span class="k">for</span> <span class="n">left</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">allPossibleFBT</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
                    <span class="k">for</span> <span class="n">right</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">allPossibleFBT</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
                        <span class="n">bns</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                        <span class="n">bns</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left</span>
                        <span class="n">bns</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right</span>
                        <span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">bns</span><span class="p">)</span>
            <span class="n">Solution</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="n">ans</span>
        
        <span class="k">return</span> <span class="n">Solution</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">N</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Word Break 2</title>
			<link>https://jasonyangshadow.win/posts/word-break-2/</link>
			<pubDate>Mon, 30 Mar 2020 13:49:10 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/word-break-2/</guid>
			<description>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.
Note:
The same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words. Example 1:
Input: s = &amp;quot;catsanddog&amp;quot; wordDict = [&amp;quot;cat&amp;quot;, &amp;quot;cats&amp;quot;, &amp;quot;and&amp;quot;, &amp;quot;sand&amp;quot;, &amp;quot;dog&amp;quot;] Output: [ &amp;quot;cats and dog&amp;quot;, &amp;quot;cat sand dog&amp;quot; ] Example 2:</description>
			<content type="html"><![CDATA[<p>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.</p>
<p>Note:</p>
<p>The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:</p>
<pre><code>Input:
s = &quot;catsanddog&quot;
wordDict = [&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]
Output:
[
  &quot;cats and dog&quot;,
  &quot;cat sand dog&quot;
]
</code></pre><p>Example 2:</p>
<pre><code>Input:
s = &quot;pineapplepenapple&quot;
wordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]
Output:
[
  &quot;pine apple pen apple&quot;,
  &quot;pineapple pen apple&quot;,
  &quot;pine applepen apple&quot;
]
Explanation: Note that you are allowed to reuse a dictionary word.
</code></pre><p>Example 3:</p>
<pre><code>Input:
s = &quot;catsandog&quot;
wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]
Output:
[]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">wordBreak</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">wordDict</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">wordDict</span><span class="p">,</span> <span class="p">{})</span>
    
    <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">wordDict</span><span class="p">,</span><span class="n">memo</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">s</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">wordDict</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">):],</span> <span class="n">wordDict</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
                    <span class="n">item</span> <span class="o">=</span> <span class="n">word</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">item</span>
                    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        <span class="n">memo</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">wordBreak</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">wordDict</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">memo</span><span class="p">):</span>
            <span class="c1">#memo saves previous combination</span>
            <span class="c1">#memo[&#39;dog&#39;] = [&#39;dog&#39;]</span>
            <span class="c1">#memo[&#39;catsanddog&#39;] = [&#39;cat sand dog&#39;, &#39;cats and dog&#39;]</span>
            <span class="k">if</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">s</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[]</span>
            
            <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordDict</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
                    <span class="k">continue</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
                    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">items</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">):],</span> <span class="n">memo</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">:</span>
                        <span class="c1">#here we have to combine current word and its left combination</span>
                        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">item</span><span class="p">)</span>
            
            
            <span class="n">memo</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span>
            <span class="k">return</span> <span class="n">res</span>
        
        <span class="n">memo</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Delete Leaves With a Given Value</title>
			<link>https://jasonyangshadow.win/posts/delete-leaves-with-a-given-value/</link>
			<pubDate>Mon, 30 Mar 2020 12:56:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/delete-leaves-with-a-given-value/</guid>
			<description>Given a binary tree root and an integer target, delete all the leaf nodes with value target.
Note that once you delete a leaf node with value target, if it&amp;rsquo;s parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you can&amp;rsquo;t).
Example 1:
Input: root = [1,2,3,2,null,2,4], target = 2 Output: [1,null,3,null,4] Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left).</description>
			<content type="html"><![CDATA[<p>Given a binary tree root and an integer target, delete all the leaf nodes with value target.</p>
<p>Note that once you delete a leaf node with value target, if it&rsquo;s parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you can&rsquo;t).</p>
<p>Example 1:</p>
<p><img src="https://assets.leetcode.com/uploads/2020/01/09/sample_1_1684.png" alt="https://assets.leetcode.com/uploads/2020/01/09/sample_1_1684.png"></p>
<pre><code>Input: root = [1,2,3,2,null,2,4], target = 2
Output: [1,null,3,null,4]
Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). 
After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).
</code></pre><p>Example 2:</p>
<p><img src="https://assets.leetcode.com/uploads/2020/01/09/sample_2_1684.png" alt="https://assets.leetcode.com/uploads/2020/01/09/sample_2_1684.png"></p>
<pre><code>Input: root = [1,3,3,3,2], target = 3
Output: [1,3,null,null,2]
</code></pre><p>Example 3:</p>
<p><img src="https://assets.leetcode.com/uploads/2020/01/15/sample_3_1684.png" alt="https://assets.leetcode.com/uploads/2020/01/15/sample_3_1684.png"></p>
<pre><code>Input: root = [1,2,null,2,null,2], target = 2
Output: [1]
Explanation: Leaf nodes in green with value (target = 2) are removed at each step.
</code></pre><p>Example 4:</p>
<pre><code>Input: root = [1,1,1], target = 1
Output: []
</code></pre><p>Example 5:</p>
<pre><code>Input: root = [1,2,3], target = 1
Output: [1,2,3]
</code></pre><p>Constraints:</p>
<p>1 &lt;= target &lt;= 1000
Each tree has at most 3000 nodes.
Each node&rsquo;s value is between [1, 1000].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeLeafNodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">root</span><span class="p">:</span>
            <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">removeLeafNodes</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
            <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">removeLeafNodes</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">target</span> <span class="ow">and</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="ow">is</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">root</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Count Square Submatrices With All Ones</title>
			<link>https://jasonyangshadow.win/posts/count-square-submatrices-with-all-ones/</link>
			<pubDate>Mon, 30 Mar 2020 12:35:45 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/count-square-submatrices-with-all-ones/</guid>
			<description>Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.
Example 1:
Input: matrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1] ] Output: 15 Explanation: There are 10 squares of side 1. There are 4 squares of side 2. There is 1 square of side 3. Total number of squares = 10 + 4 + 1 = 15. Example 2:
Input: matrix = [ [1,0,1], [1,1,0], [1,1,0] ] Output: 7 Explanation: There are 6 squares of side 1.</description>
			<content type="html"><![CDATA[<p>Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.</p>
<p>Example 1:</p>
<pre><code>Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.
</code></pre><p>Example 2:</p>
<pre><code>Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.
</code></pre><p>Constraints:</p>
<p>1 &lt;= arr.length &lt;= 300
1 &lt;= arr[0].length &lt;= 300
0 &lt;= arr[i][j] &lt;= 1</p>
<p>Explanation:</p>
<pre><code>some clarity on the explanation:
'A' given matrix and 'dp' dynamic matrix we are building,

If A[i][j]=1 we claim dp[i][j] = min(dp[i-1],[j], dp[i][j-1], dp[i-1][j-1]) + 1
above holds true because,
Imagine you have a square of size k where (i,j) is in the right down corner of it.
Then dp[i-1][j] is at least of size k-1 (as a sub square) and the same is true for dp[i][j-1] and dp[i-1],[j-1]
therefore min(dp[i-1],[j], dp[i][j-1], dp[i-1][j-1]) is at least k-1.

// Given matrix
[
[1,0,1],
[1,1,0],
[1,1,0]
]

// DP matrix
we fill the first row and first column with zeros and a cell is zero if A[i][j] = 0 (as this can't make a square matrix at all)
for A[i][j]&gt;0 case we use the dp relation A[i][j] += min(A[i - 1][j - 1], min(A[i - 1][j], A[i][j - 1]));

0 0 0 0
0 1 0 1
0 1 1 0
0 1 2 0
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">countSquares</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">*=</span> <span class="nb">min</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">matrix</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Bulls and Cows</title>
			<link>https://jasonyangshadow.win/posts/bulls-and-cows/</link>
			<pubDate>Mon, 30 Mar 2020 10:57:38 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/bulls-and-cows/</guid>
			<description>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called &amp;ldquo;bulls&amp;rdquo;) and how many digits match the secret number but locate in the wrong position (called &amp;ldquo;cows&amp;rdquo;).</description>
			<content type="html"><![CDATA[<p>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called &ldquo;bulls&rdquo;) and how many digits match the secret number but locate in the wrong position (called &ldquo;cows&rdquo;). Your friend will use successive guesses and hints to eventually derive the secret number.</p>
<p>Write a function to return a hint according to the secret number and friend&rsquo;s guess, use A to indicate the bulls and B to indicate the cows.</p>
<p>Please note that both secret number and friend&rsquo;s guess may contain duplicate digits.</p>
<p>Example 1:</p>
<pre><code>Input: secret = &quot;1807&quot;, guess = &quot;7810&quot;

Output: &quot;1A3B&quot;

Explanation: 1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.
</code></pre><p>Example 2:</p>
<pre><code>Input: secret = &quot;1123&quot;, guess = &quot;0111&quot;

Output: &quot;1A1B&quot;

Explanation: The 1st 1 in friend's guess is a bull, the 2nd or 3rd 1 is a cow.
</code></pre><p>Note: You may assume that the secret number and your friend&rsquo;s guess only contain digits, and their lengths are always equal.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getHint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">secret</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">guess</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">s</span><span class="p">,</span> <span class="n">g</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">secret</span><span class="p">),</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">guess</span><span class="p">)</span>
        <span class="n">a</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">secret</span><span class="p">,</span> <span class="n">guess</span><span class="p">))</span>
        <span class="k">return</span> <span class="s1">&#39;</span><span class="si">%d</span><span class="s1">A</span><span class="si">%d</span><span class="s1">B&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="nb">sum</span><span class="p">((</span><span class="n">s</span> <span class="o">&amp;</span> <span class="n">g</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">())</span><span class="o">-</span><span class="n">a</span> <span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>X of a Kind in a Deck of Cards</title>
			<link>https://jasonyangshadow.win/posts/x-of-a-kind-in-a-deck-of-cards/</link>
			<pubDate>Mon, 30 Mar 2020 10:35:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/x-of-a-kind-in-a-deck-of-cards/</guid>
			<description>In a deck of cards, each card has an integer written on it.
Return true if and only if you can choose X &amp;gt;= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:
Each group has exactly X cards. All the cards in each group have the same integer.
Example 1:
Input: deck = [1,2,3,4,4,3,2,1] Output: true Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].</description>
			<content type="html"><![CDATA[<p>In a deck of cards, each card has an integer written on it.</p>
<p>Return true if and only if you can choose X &gt;= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:</p>
<p>Each group has exactly X cards.
All the cards in each group have the same integer.</p>
<p>Example 1:</p>
<pre><code>Input: deck = [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].
</code></pre><p>Example 2:</p>
<pre><code>Input: deck = [1,1,1,2,2,2,3,3]
Output: false´
Explanation: No possible partition.
</code></pre><p>Example 3:</p>
<pre><code>Input: deck = [1]
Output: false
Explanation: No possible partition.
</code></pre><p>Example 4:</p>
<pre><code>Input: deck = [1,1]
Output: true
Explanation: Possible partition [1,1].
</code></pre><p>Example 5:</p>
<pre><code>Input: deck = [1,1,2,2,2,2]
Output: true
Explanation: Possible partition [1,1],[2,2],[2,2].
</code></pre><p>Constraints:</p>
<p>1 &lt;= deck.length &lt;= 10^4
0 &lt;= deck[i] &lt; 10^4</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">hasGroupsSizeX</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">deck</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="kn">from</span> <span class="nn">fractions</span> <span class="kn">import</span> <span class="n">gcd</span>
        <span class="n">vals</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">deck</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>
        <span class="k">return</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">gcd</span><span class="p">,</span> <span class="n">vals</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Compressed String Iterator</title>
			<link>https://jasonyangshadow.win/posts/design-compressed-string-iterator/</link>
			<pubDate>Sun, 29 Mar 2020 22:08:24 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-compressed-string-iterator/</guid>
			<description>Design and implement a data structure for a compressed string iterator. It should support the following operations: next and hasNext.
The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.
next() - if the original string still has uncompressed characters, return the next letter; Otherwise return a white space. hasNext() - Judge whether there is any letter needs to be uncompressed.</description>
			<content type="html"><![CDATA[<p>Design and implement a data structure for a compressed string iterator. It should support the following operations: next and hasNext.</p>
<p>The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.</p>
<p>next() - if the original string still has uncompressed characters, return the next letter; Otherwise return a white space.
hasNext() - Judge whether there is any letter needs to be uncompressed.</p>
<p>Note:
Please remember to RESET your class variables declared in StringIterator, as static/class variables are persisted across multiple test cases. Please see here for more details.</p>
<p>Example:</p>
<pre><code>StringIterator iterator = new StringIterator(&quot;L1e2t1C1o1d1e1&quot;);

iterator.next(); // return 'L'
iterator.next(); // return 'e'
iterator.next(); // return 'e'
iterator.next(); // return 't'
iterator.next(); // return 'C'
iterator.next(); // return 'o'
iterator.next(); // return 'd'
iterator.hasNext(); // return true
iterator.next(); // return 'e'
iterator.hasNext(); // return false
iterator.next(); // return ' '
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">StringIterator</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">compressedString</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">val</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
        <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">compressedString</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="o">.</span><span class="n">isdigit</span><span class="p">():</span>
                <span class="k">if</span> <span class="n">val</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">val</span><span class="p">,</span> <span class="n">n</span><span class="p">])</span>
                    <span class="n">val</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
                    <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">val</span> <span class="o">=</span> <span class="n">s</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">val</span> <span class="o">!=</span><span class="s1">&#39;&#39;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">val</span><span class="p">,</span><span class="n">n</span><span class="p">])</span>
                
    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
            <span class="n">val</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
            <span class="k">return</span> <span class="n">val</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39; &#39;</span>

    <span class="k">def</span> <span class="nf">hasNext</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>


<span class="c1"># Your StringIterator object will be instantiated and called as such:</span>
<span class="c1"># obj = StringIterator(compressedString)</span>
<span class="c1"># param_1 = obj.next()</span>
<span class="c1"># param_2 = obj.hasNext()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Reverse Bits</title>
			<link>https://jasonyangshadow.win/posts/reverse-bits/</link>
			<pubDate>Sun, 29 Mar 2020 21:41:41 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/reverse-bits/</guid>
			<description>Reverse bits of a given 32 bits unsigned integer.
Example 1:
Input: 00000010100101000001111010011100 Output: 00111001011110000010100101000000 Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000. Example 2:
Input: 11111111111111111111111111111101 Output: 10111111111111111111111111111111 Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111. Note:
Note that in some languages such as Java, there is no unsigned integer type.</description>
			<content type="html"><![CDATA[<p>Reverse bits of a given 32 bits unsigned integer.</p>
<p>Example 1:</p>
<pre><code>Input: 00000010100101000001111010011100
Output: 00111001011110000010100101000000
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
</code></pre><p>Example 2:</p>
<pre><code>Input: 11111111111111111111111111111101
Output: 10111111111111111111111111111111
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
</code></pre><p>Note:</p>
<p>Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2&rsquo;s complement notation. Therefore, in Example 2 above the input represents the signed integer -3 and the output represents the signed integer -1073741825.</p>
<p>Follow up:</p>
<p>If this function is called many times, how would you optimize it?</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverseBits</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">val</span> <span class="o">=</span> <span class="s1">&#39;{0:032b}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="n">val</span> <span class="o">=</span> <span class="n">val</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverseBits</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span><span class="p">,</span> <span class="n">power</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span>
        <span class="k">while</span> <span class="n">n</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">power</span>
            <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
            <span class="n">power</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Largest Time for Given Digits</title>
			<link>https://jasonyangshadow.win/posts/largest-time-for-given-digits/</link>
			<pubDate>Sun, 29 Mar 2020 21:32:22 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/largest-time-for-given-digits/</guid>
			<description>Given an array of 4 digits, return the largest 24 hour time that can be made.
The smallest 24 hour time is 00:00, and the largest is 23:59. Starting from 00:00, a time is larger if more time has elapsed since midnight.
Return the answer as a string of length 5. If no valid time can be made, return an empty string.
Example 1:
Input: [1,2,3,4] Output: &amp;quot;23:41&amp;quot; Example 2:</description>
			<content type="html"><![CDATA[<p>Given an array of 4 digits, return the largest 24 hour time that can be made.</p>
<p>The smallest 24 hour time is 00:00, and the largest is 23:59.  Starting from 00:00, a time is larger if more time has elapsed since midnight.</p>
<p>Return the answer as a string of length 5.  If no valid time can be made, return an empty string.</p>
<p>Example 1:</p>
<pre><code>Input: [1,2,3,4]
Output: &quot;23:41&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input: [5,5,5,5]
Output: &quot;&quot;
</code></pre><p>Note:</p>
<p>A.length == 4
0 &lt;= A[i] &lt;= 9</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">largestTimeFromDigits</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">time</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">time</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="ow">and</span> <span class="n">time</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>
                <span class="k">return</span> <span class="s1">&#39;</span><span class="si">%d%d</span><span class="s1">:</span><span class="si">%d%d</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">time</span>
        
        <span class="k">return</span> <span class="s2">&#34;&#34;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Non-Decreasing Array</title>
			<link>https://jasonyangshadow.win/posts/non-decreasing-array/</link>
			<pubDate>Sun, 29 Mar 2020 20:56:44 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/non-decreasing-array/</guid>
			<description>Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.
We define an array is non-decreasing if nums[i] &amp;lt;= nums[i + 1] holds for every i (0-based) such that (0 &amp;lt;= i &amp;lt;= n - 2).
Example 1:
Input: nums = [4,2,3] Output: true Explanation: You could modify the first 4 to 1 to get a non-decreasing array.</description>
			<content type="html"><![CDATA[<p>Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.</p>
<p>We define an array is non-decreasing if nums[i] &lt;= nums[i + 1] holds for every i (0-based) such that (0 &lt;= i &lt;= n - 2).</p>
<p>Example 1:</p>
<pre><code>Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.
</code></pre><p>Constraints:</p>
<p>1 &lt;= n &lt;= 10 ^ 4</p>
<ul>
<li>10 ^ 5 &lt;= nums[i] &lt;= 10 ^ 5</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">checkPossibility</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="ow">or</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                    <span class="c1">#modify i-1</span>
                    <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="c1">#modify i</span>
                    <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                    
                    
        <span class="k">return</span> <span class="n">cnt</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Add Binary</title>
			<link>https://jasonyangshadow.win/posts/add-binary/</link>
			<pubDate>Sun, 29 Mar 2020 17:09:42 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/add-binary/</guid>
			<description>Given two binary strings, return their sum (also a binary string).
The input strings are both non-empty and contains only characters 1 or 0.
Example 1:
Input: a = &amp;quot;11&amp;quot;, b = &amp;quot;1&amp;quot; Output: &amp;quot;100&amp;quot; Example 2:
Input: a = &amp;quot;1010&amp;quot;, b = &amp;quot;1011&amp;quot; Output: &amp;quot;10101&amp;quot; class Solution: def addBinary(self, a: str, b: str) -&amp;gt; str: carry = 0 a = list(a) b = list(b) result = &amp;#39;&amp;#39; while a or b or carry: if a: carry += int(a.</description>
			<content type="html"><![CDATA[<p>Given two binary strings, return their sum (also a binary string).</p>
<p>The input strings are both non-empty and contains only characters 1 or 0.</p>
<p>Example 1:</p>
<pre><code>Input: a = &quot;11&quot;, b = &quot;1&quot;
Output: &quot;100&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input: a = &quot;1010&quot;, b = &quot;1011&quot;
Output: &quot;10101&quot;
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addBinary</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
        
        <span class="k">while</span> <span class="n">a</span> <span class="ow">or</span> <span class="n">b</span> <span class="ow">or</span> <span class="n">carry</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">a</span><span class="p">:</span>
                <span class="n">carry</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="k">if</span> <span class="n">b</span><span class="p">:</span>
                <span class="n">carry</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="n">carry</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span>
            <span class="n">carry</span> <span class="o">//=</span> <span class="mi">2</span>
        
        <span class="k">return</span> <span class="n">result</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find Pivot Index</title>
			<link>https://jasonyangshadow.win/posts/find-pivot-index/</link>
			<pubDate>Sun, 29 Mar 2020 16:56:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-pivot-index/</guid>
			<description>Given an array of integers nums, write a method that returns the &amp;ldquo;pivot&amp;rdquo; index of this array.
We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.
If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.</description>
			<content type="html"><![CDATA[<p>Given an array of integers nums, write a method that returns the &ldquo;pivot&rdquo; index of this array.</p>
<p>We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.</p>
<p>If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.</p>
<p>Example 1:</p>
<pre><code>Input: 
nums = [1, 7, 3, 6, 5, 6]
Output: 3
Explanation: 
The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.
Also, 3 is the first index where this occurs.
</code></pre><p>Example 2:</p>
<pre><code>Input: 
nums = [1, 2, 3]
Output: -1
Explanation: 
There is no index that satisfies the conditions in the problem statement.
</code></pre><p>Note:</p>
<p>The length of nums will be in the range [0, 10000].
Each element nums[i] will be an integer in the range [-1000, 1000].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">pivotIndex</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="n">right</span> <span class="o">-=</span> <span class="n">num</span>
            <span class="k">if</span> <span class="n">left</span> <span class="o">==</span> <span class="n">right</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">index</span>
            <span class="n">left</span> <span class="o">+=</span> <span class="n">num</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Insert Interval</title>
			<link>https://jasonyangshadow.win/posts/insert-interval/</link>
			<pubDate>Fri, 27 Mar 2020 18:19:31 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/insert-interval/</guid>
			<description>Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]] Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]. NOTE: input types have been changed on April 15, 2019.</description>
			<content type="html"><![CDATA[<p>Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).</p>
<p>You may assume that the intervals were initially sorted according to their start times.</p>
<p>Example 1:</p>
<pre><code>Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
</code></pre><p>Example 2:</p>
<pre><code>Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
</code></pre><p>NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">intervals</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">newInterval</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">s</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">newInterval</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">newInterval</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">intervals</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">:</span>
                <span class="n">left</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">right</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">s</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                <span class="n">e</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                
        <span class="k">return</span> <span class="n">left</span> <span class="o">+</span> <span class="p">[[</span><span class="n">s</span><span class="p">,</span><span class="n">e</span><span class="p">]]</span> <span class="o">+</span> <span class="n">right</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Long Pressed Name</title>
			<link>https://jasonyangshadow.win/posts/long-pressed-name/</link>
			<pubDate>Fri, 27 Mar 2020 17:36:23 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/long-pressed-name/</guid>
			<description>Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.
You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.
Example 1:
Input: name = &amp;quot;alex&amp;quot;, typed = &amp;quot;aaleex&amp;quot; Output: true Explanation: &#39;a&#39; and &#39;e&#39; in &#39;alex&#39; were long pressed.</description>
			<content type="html"><![CDATA[<p>Your friend is typing his name into a keyboard.  Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.</p>
<p>You examine the typed characters of the keyboard.  Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.</p>
<p>Example 1:</p>
<pre><code>Input: name = &quot;alex&quot;, typed = &quot;aaleex&quot;
Output: true
Explanation: 'a' and 'e' in 'alex' were long pressed.
</code></pre><p>Example 2:</p>
<pre><code>Input: name = &quot;saeed&quot;, typed = &quot;ssaaedd&quot;
Output: false
Explanation: 'e' must have been pressed twice, but it wasn't in the typed output.
</code></pre><p>Example 3:</p>
<pre><code>Input: name = &quot;leelee&quot;, typed = &quot;lleeelee&quot;
Output: true
</code></pre><p>Example 4:</p>
<pre><code>Input: name = &quot;laiden&quot;, typed = &quot;laiden&quot;
Output: true
Explanation: It's not necessary to long press any character.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isLongPressedName</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">typed</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">typed</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">typed</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">typed</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">typed</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">False</span>
        
        <span class="k">return</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Confusing Number</title>
			<link>https://jasonyangshadow.win/posts/confusing-number/</link>
			<pubDate>Fri, 27 Mar 2020 16:25:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/confusing-number/</guid>
			<description>Given a number N, return true if and only if it is a confusing number, which satisfies the following condition:
We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid. A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.</description>
			<content type="html"><![CDATA[<p>Given a number N, return true if and only if it is a confusing number, which satisfies the following condition:</p>
<p>We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid. A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/03/23/1268_1.png" alt="image"></p>
<pre><code>Input: 6
Output: true
Explanation: 
We get 9 after rotating 6, 9 is a valid number and 9!=6.
</code></pre><p>Example 2:<br>
<img src="https://assets.leetcode.com/uploads/2019/03/23/1268_2.png" alt="image"></p>
<pre><code>Input: 89
Output: true
Explanation: 
We get 68 after rotating 89, 86 is a valid number and 86!=89.
</code></pre><p>Example 3:<br>
<img src="https://assets.leetcode.com/uploads/2019/03/26/1268_3.png" alt="image"></p>
<pre><code>Input: 11
Output: false
Explanation: 
We get 11 after rotating 11, 11 is a valid number but the value remains the same, thus 11 is not a confusing number.
</code></pre><p>Example 4:<br>
<img src="https://assets.leetcode.com/uploads/2019/03/23/1268_4.png" alt="image"></p>
<pre><code>Input: 25
Output: false
Explanation: 
We get an invalid number after rotating 25.
</code></pre><p>Note:</p>
<p>0 &lt;= N &lt;= 10^9
After the rotation we can ignore leading zeros, for example if after rotation we have 0008 then this number is considered as just 8.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">confusingNumber</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">,</span><span class="s1">&#39;1&#39;</span><span class="p">,</span><span class="s1">&#39;6&#39;</span><span class="p">,</span><span class="s1">&#39;8&#39;</span><span class="p">,</span><span class="s1">&#39;9&#39;</span><span class="p">]</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;9&#39;</span><span class="p">,</span><span class="s1">&#39;8&#39;</span><span class="p">,</span><span class="s1">&#39;6&#39;</span><span class="p">]</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">c</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="n">b</span><span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span>
        
        <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">==</span> <span class="n">ret</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Peek Index in a Mountain Array</title>
			<link>https://jasonyangshadow.win/posts/peek-index-in-a-mountain-array/</link>
			<pubDate>Fri, 27 Mar 2020 13:33:02 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/peek-index-in-a-mountain-array/</guid>
			<description>Let&amp;rsquo;s call an array A a mountain if the following properties hold:
A.length &amp;gt;= 3 There exists some 0 &amp;lt; i &amp;lt; A.length - 1 such that A[0] &amp;lt; A[1] &amp;lt; &amp;hellip; A[i-1] &amp;lt; A[i] &amp;gt; A[i+1] &amp;gt; &amp;hellip; &amp;gt; A[A.length - 1] Given an array that is definitely a mountain, return any i such that A[0] &amp;lt; A[1] &amp;lt; &amp;hellip; A[i-1] &amp;lt; A[i] &amp;gt; A[i+1] &amp;gt; &amp;hellip; &amp;gt; A[A.length - 1].</description>
			<content type="html"><![CDATA[<p>Let&rsquo;s call an array A a mountain if the following properties hold:</p>
<p>A.length &gt;= 3
There exists some 0 &lt; i &lt; A.length - 1 such that A[0] &lt; A[1] &lt; &hellip; A[i-1] &lt; A[i] &gt; A[i+1] &gt; &hellip; &gt; A[A.length - 1]
Given an array that is definitely a mountain, return any i such that A[0] &lt; A[1] &lt; &hellip; A[i-1] &lt; A[i] &gt; A[i+1] &gt; &hellip; &gt; A[A.length - 1].</p>
<p>Example 1:</p>
<pre><code>Input: [0,1,0]
Output: 1
</code></pre><p>Example 2:</p>
<pre><code>Input: [0,2,1,0]
Output: 1
</code></pre><p>Note:</p>
<p>3 &lt;= A.length &lt;= 10000
0 &lt;= A[i] &lt;= 10^6
A is a mountain, as defined above.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">peakIndexInMountainArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">up</span><span class="p">,</span> <span class="n">down</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">),</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">down</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">up</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>  <span class="ow">and</span> <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="k">return</span> <span class="n">i</span>
        
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Count Number of Nice Subarrays</title>
			<link>https://jasonyangshadow.win/posts/count-number-of-nice-subarrays/</link>
			<pubDate>Thu, 26 Mar 2020 22:34:46 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/count-number-of-nice-subarrays/</guid>
			<description>Given an array of integers nums and an integer k. A subarray is called nice if there are k odd numbers on it.
Return the number of nice sub-arrays.
Example 1:
Input: nums = [1,1,2,1,1], k = 3 Output: 2 Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]. Example 2:
Input: nums = [2,4,6], k = 1 Output: 0 Explanation: There is no odd numbers in the array.</description>
			<content type="html"><![CDATA[<p>Given an array of integers nums and an integer k. A subarray is called nice if there are k odd numbers on it.</p>
<p>Return the number of nice sub-arrays.</p>
<p>Example 1:</p>
<pre><code>Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.
</code></pre><p>Example 3:</p>
<pre><code>Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
</code></pre><p>Constraints:</p>
<p>1 &lt;= nums.length &lt;= 50000
1 &lt;= nums[i] &lt;= 10^5
1 &lt;= k &lt;= nums.length</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numberOfSubarrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">count</span> <span class="o">=</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">k</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">count</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div><p>Another solution is based on atmost k elements.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">    <span class="k">def</span> <span class="nf">numberOfSubarrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">atMost</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
                <span class="n">k</span> <span class="o">-=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span>
                <span class="k">while</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="c1">#A[i] % 2 = 0 / A[i] % 2 = 1</span>
                    <span class="n">k</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="n">res</span>

        <span class="k">return</span> <span class="n">atMost</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">-</span> <span class="n">atMost</span><span class="p">(</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>[Hard]Shortest Subarray With Sum at Least K</title>
			<link>https://jasonyangshadow.win/posts/shortest-subarray-with-sum-at-least-k/</link>
			<pubDate>Thu, 26 Mar 2020 21:04:41 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/shortest-subarray-with-sum-at-least-k/</guid>
			<description>Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.
If there is no non-empty subarray with sum at least K, return -1.
Example 1:
Input: A = [1], K = 1 Output: 1 Example 2:
Input: A = [1,2], K = 4 Output: -1 Example 3:
Input: A = [2,-1,2], K = 3 Output: 3 Note:
1 &amp;lt;= A.length &amp;lt;= 50000 -10 ^ 5 &amp;lt;= A[i] &amp;lt;= 10 ^ 5 1 &amp;lt;= K &amp;lt;= 10 ^ 9</description>
			<content type="html"><![CDATA[<p>Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.</p>
<p>If there is no non-empty subarray with sum at least K, return -1.</p>
<p>Example 1:</p>
<pre><code>Input: A = [1], K = 1
Output: 1
</code></pre><p>Example 2:</p>
<pre><code>Input: A = [1,2], K = 4
Output: -1
</code></pre><p>Example 3:</p>
<pre><code>Input: A = [2,-1,2], K = 3
Output: 3
</code></pre><p>Note:</p>
<p>1 &lt;= A.length &lt;= 50000
-10 ^ 5 &lt;= A[i] &lt;= 10 ^ 5
1 &lt;= K &lt;= 10 ^ 9</p>
<p>This solution uses slide window algorithms but patch the negative value issue. For normal slide window algorith, it is suitable for all positive numbers. Here it uses a deque to check several more times if value is larger than K.<br>
<a href="https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/189039/Detailed-intuition-behind-Deque-solution">https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/189039/Detailed-intuition-behind-Deque-solution</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">shortestSubarray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">K</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
        <span class="n">B</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">()</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">N</span> <span class="o">+</span> <span class="mi">1</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">d</span> <span class="ow">and</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">B</span><span class="p">[</span><span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">&gt;=</span> <span class="n">K</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">d</span><span class="o">.</span><span class="n">popleft</span><span class="p">())</span>
            <span class="c1">#mark 1</span>
            <span class="k">while</span> <span class="n">d</span> <span class="ow">and</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">B</span><span class="p">[</span><span class="n">d</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]:</span>
                <span class="n">d</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="n">d</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">res</span> <span class="k">if</span> <span class="n">res</span> <span class="o">&lt;</span> <span class="n">N</span><span class="o">+</span><span class="mi">1</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div><p>Code on #Mark1 is explained as the following:</p>
<pre><code>For example, here give a A[5] = A[84, -37, 32, 40, 95]. Then the accumulate array B will be B[6] = [0, 84, 47, 79, 119 ,214]. Give the K = 125. And we store the answer length at res.
Now we focus at two case, B[5] - B[1] and B[5] - B[2]. Both of those are fit condition that &gt;= K.
Below follow :
B[5] - B[1] = 130. And because 130 &gt;= K, we store the length for 1 to 5, make res = 5.
B[5] - B[2] = 167, And because 167 &gt;= K, we store the length for 2 to 5, make res = 4.
From those two case, you can notice that actually we do not need to calculate case B[5] - B[1].
The reason is B[2] &lt; B[1]. So if B[5] - B[1] fit the condition(B[5] - B[1] &gt;= K), then B[5] - B[2] will must fit the condition. And B[5] - B[2] will have short length than B[5] - B[1].
This is why we do &quot;while d and B[i] &lt;= B[d[-1]]: d.pop()&quot;.
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Minimum Swaps to Make Sequences Increasing</title>
			<link>https://jasonyangshadow.win/posts/minimum-swaps-to-make-sequences-increasing/</link>
			<pubDate>Thu, 26 Mar 2020 17:37:38 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-swaps-to-make-sequences-increasing/</guid>
			<description>We have two integer sequences A and B of the same non-zero length.
We are allowed to swap elements A[i] and B[i]. Note that both elements are in the same index position in their respective sequences.
At the end of some number of swaps, A and B are both strictly increasing. (A sequence is strictly increasing if and only if A[0] &amp;lt; A[1] &amp;lt; A[2] &amp;lt; &amp;hellip; &amp;lt; A[A.length - 1].</description>
			<content type="html"><![CDATA[<p>We have two integer sequences A and B of the same non-zero length.</p>
<p>We are allowed to swap elements A[i] and B[i].  Note that both elements are in the same index position in their respective sequences.</p>
<p>At the end of some number of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only if A[0] &lt; A[1] &lt; A[2] &lt; &hellip; &lt; A[A.length - 1].)</p>
<p>Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.</p>
<p>Example:</p>
<pre><code>Input: A = [1,3,5,4], B = [1,2,3,7]
Output: 1
Explanation: 
Swap A[3] and B[3].  Then the sequences are:
A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
which are both strictly increasing.
</code></pre><p>Note:</p>
<p>A, B are arrays with the same length, and that length will be in the range [1, 1000].
A[i], B[i] are integer values in the range [0, 2000].</p>
<p><a href="https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/discuss/119835/Java-O(n)-DP-Solution">https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/discuss/119835/Java-O(n)-DP-Solution</a> for more details.</p>
<pre><code>swapRecord means for the ith element in A and B, the minimum swaps if we swap A[i] and B[i]
fixRecord means for the ith element in A and B, the minimum swaps if we DONOT swap A[i] and B[i]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minSwap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">B</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">swap</span><span class="p">,</span> <span class="n">fixed</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">swap</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="n">swap</span>
                <span class="n">swap</span> <span class="o">=</span> <span class="n">fixed</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">fixed</span> <span class="o">=</span> <span class="n">temp</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">min_val</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">swap</span><span class="p">,</span> <span class="n">fixed</span><span class="p">)</span>
                <span class="n">swap</span> <span class="o">=</span> <span class="n">min_val</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">fixed</span> <span class="o">=</span> <span class="n">min_val</span>
        
        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">swap</span><span class="p">,</span> <span class="n">fixed</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Valid Square</title>
			<link>https://jasonyangshadow.win/posts/valid-square/</link>
			<pubDate>Thu, 26 Mar 2020 15:22:32 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/valid-square/</guid>
			<description>Given the coordinates of four points in 2D space, return whether the four points could construct a square.
The coordinate (x,y) of a point is represented by an integer array with two integers.
Example:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1] Output: True Note:
All the input integers are in the range [-10000, 10000]. A valid square has four equal sides with positive length and four equal angles (90-degree angles).</description>
			<content type="html"><![CDATA[<p>Given the coordinates of four points in 2D space, return whether the four points could construct a square.</p>
<p>The coordinate (x,y) of a point is represented by an integer array with two integers.</p>
<p>Example:</p>
<pre><code>Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: True
</code></pre><p>Note:</p>
<p>All the input integers are in the range [-10000, 10000].
A valid square has four equal sides with positive length and four equal angles (90-degree angles).
Input points have no order.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">validSquare</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">p2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">p3</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">p4</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">dists</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">()</span>
        
        <span class="n">edges</span> <span class="o">=</span> <span class="p">[</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span><span class="p">,</span> <span class="n">p4</span><span class="p">]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">edges</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">edges</span><span class="p">)):</span>
                <span class="c1">#edge should not be equalable</span>
                <span class="k">if</span> <span class="n">edges</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">edges</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">dis</span> <span class="o">=</span> <span class="p">(</span><span class="n">edges</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">edges</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">edges</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">edges</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span>
                <span class="n">dists</span><span class="p">[</span><span class="n">dis</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="c1">#there are only two type of distance     </span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dists</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Exam Room</title>
			<link>https://jasonyangshadow.win/posts/exam-room/</link>
			<pubDate>Thu, 26 Mar 2020 14:55:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/exam-room/</guid>
			<description>In an exam room, there are N seats in a single row, numbered 0, 1, 2, &amp;hellip;, N-1.
When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. (Also, if no one is in the room, then the student sits at seat number 0.)
Return a class ExamRoom(int N) that exposes two functions: ExamRoom.</description>
			<content type="html"><![CDATA[<p>In an exam room, there are N seats in a single row, numbered 0, 1, 2, &hellip;, N-1.</p>
<p>When a student enters the room, they must sit in the seat that maximizes the distance to the closest person.  If there are multiple such seats, they sit in the seat with the lowest number.  (Also, if no one is in the room, then the student sits at seat number 0.)</p>
<p>Return a class ExamRoom(int N) that exposes two functions: ExamRoom.seat() returning an int representing what seat the student sat in, and ExamRoom.leave(int p) representing that the student in seat number p now leaves the room.  It is guaranteed that any calls to ExamRoom.leave(p) have a student sitting in seat p.</p>
<p>Example 1:</p>
<pre><code>Input: [&quot;ExamRoom&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;leave&quot;,&quot;seat&quot;], [[10],[],[],[],[],[4],[]]
Output: [null,0,9,4,2,null,5]
Explanation:
ExamRoom(10) -&gt; null
seat() -&gt; 0, no one is in the room, then the student sits at seat number 0.
seat() -&gt; 9, the student sits at the last seat number 9.
seat() -&gt; 4, the student sits at the last seat number 4.
seat() -&gt; 2, the student sits at the last seat number 2.
leave(4) -&gt; null
seat() -&gt; 5, the student sits at the last seat number 5.
</code></pre><p>Note:</p>
<p>1 &lt;= N &lt;= 10^9
ExamRoom.seat() and ExamRoom.leave() will be called at most 10^4 times across all test cases.
Calls to ExamRoom.leave(p) are guaranteed to have a student currently sitting in seat number p.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">ExamRoom</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">N</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">L</span> <span class="o">=</span> <span class="n">N</span><span class="p">,</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">seat</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">N</span><span class="p">,</span> <span class="n">L</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">N</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">L</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">L</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">d</span><span class="p">,</span> <span class="n">res</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span>
            <span class="c1">#check neighbor&#39;s value</span>
            <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">L</span><span class="p">[</span><span class="mi">1</span><span class="p">:]):</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">-</span> <span class="n">a</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">:</span>
                    <span class="n">d</span><span class="p">,</span> <span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">b</span><span class="o">+</span><span class="n">a</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">L</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">:</span> <span class="n">res</span> <span class="o">=</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="c1">#bisect to insert value by given index</span>
        <span class="n">bisect</span><span class="o">.</span><span class="n">insort</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span>

    <span class="k">def</span> <span class="nf">leave</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>


<span class="c1"># Your ExamRoom object will be instantiated and called as such:</span>
<span class="c1"># obj = ExamRoom(N)</span>
<span class="c1"># param_1 = obj.seat()</span>
<span class="c1"># obj.leave(p)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Snapshot Array</title>
			<link>https://jasonyangshadow.win/posts/snapshot-array/</link>
			<pubDate>Wed, 25 Mar 2020 21:09:37 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/snapshot-array/</guid>
			<description>Implement a SnapshotArray that supports the following interface:
 SnapshotArray(int length) initializes an array-like data structure with the given length. Initially, each element equals 0. void set(index, val) sets the element at the given index to be equal to val. int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1. int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id  Example 1:</description>
			<content type="html"><![CDATA[<p>Implement a SnapshotArray that supports the following interface:</p>
<ul>
<li>SnapshotArray(int length) initializes an array-like data structure with the given length.  Initially, each element equals 0.</li>
<li>void set(index, val) sets the element at the given index to be equal to val.</li>
<li>int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.</li>
<li>int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id</li>
</ul>
<p>Example 1:</p>
<pre><code>Input: [&quot;SnapshotArray&quot;,&quot;set&quot;,&quot;snap&quot;,&quot;set&quot;,&quot;get&quot;]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5
</code></pre><p>Constraints:</p>
<p>1 &lt;= length &lt;= 50000
At most 50000 calls will be made to set, snap, and get.
0 &lt;= index &lt; length
0 &lt;= snap_id &lt; (the total number of times we call snap())
0 &lt;= val &lt;= 10^9</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">SnapshotArray</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">length</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dic</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">snap_id</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">snap_id</span><span class="p">][</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>

    <span class="k">def</span> <span class="nf">snap</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">snap_id</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="c1">#here is the most important point. we only copy from the last one,rather than fixed length array, this will results in avoid of memory limitation error</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">snap_id</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">snap_id</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">snap_id</span> <span class="o">-</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">snap_id</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">index</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">snap_id</span><span class="p">]:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">snap_id</span><span class="p">][</span><span class="n">index</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>


<span class="c1"># Your SnapshotArray object will be instantiated and called as such:</span>
<span class="c1"># obj = SnapshotArray(length)</span>
<span class="c1"># obj.set(index,val)</span>
<span class="c1"># param_2 = obj.snap()</span>
<span class="c1"># param_3 = obj.get(index,snap_id)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Mountain in Array</title>
			<link>https://jasonyangshadow.win/posts/longest-mountain-in-array/</link>
			<pubDate>Tue, 24 Mar 2020 17:32:13 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-mountain-in-array/</guid>
			<description>Let&amp;rsquo;s call any (contiguous) subarray B (of A) a mountain if the following properties hold:
B.length &amp;gt;= 3 There exists some 0 &amp;lt; i &amp;lt; B.length - 1 such that B[0] &amp;lt; B[1] &amp;lt; &amp;hellip; B[i-1] &amp;lt; B[i] &amp;gt; B[i+1] &amp;gt; &amp;hellip; &amp;gt; B[B.length - 1] (Note that B could be any subarray of A, including the entire array A.)
Given an array A of integers, return the length of the longest mountain.</description>
			<content type="html"><![CDATA[<p>Let&rsquo;s call any (contiguous) subarray B (of A) a mountain if the following properties hold:</p>
<p>B.length &gt;= 3
There exists some 0 &lt; i &lt; B.length - 1 such that B[0] &lt; B[1] &lt; &hellip; B[i-1] &lt; B[i] &gt; B[i+1] &gt; &hellip; &gt; B[B.length - 1]
(Note that B could be any subarray of A, including the entire array A.)</p>
<p>Given an array A of integers, return the length of the longest mountain.</p>
<p>Return 0 if there is no mountain.</p>
<p>Example 1:</p>
<pre><code>Input: [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
</code></pre><p>Example 2:</p>
<pre><code>Input: [2,2,2]
Output: 0
Explanation: There is no mountain.
</code></pre><p>Note:</p>
<p>0 &lt;= A.length &lt;= 10000
0 &lt;= A[i] &lt;= 10000
Follow up:</p>
<p>Can you solve it using only one pass?
Can you solve it in O(1) space?</p>
<p>Find the overlapped point between up and down. Then return its maximum value.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestMountain</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">up</span><span class="p">,</span> <span class="n">down</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">),</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>

        <span class="k">return</span> <span class="nb">max</span><span class="p">([</span><span class="n">u</span> <span class="o">+</span> <span class="n">d</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">u</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">up</span><span class="p">,</span> <span class="n">down</span><span class="p">)</span> <span class="k">if</span> <span class="n">u</span> <span class="ow">and</span> <span class="n">d</span><span class="p">]</span> <span class="ow">or</span> <span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div><p>Another solution with O(1) space.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestMountain</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">up</span> <span class="o">=</span> <span class="n">down</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">down</span> <span class="ow">and</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span> <span class="n">up</span> <span class="o">=</span> <span class="n">down</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">up</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">down</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            
            <span class="k">if</span> <span class="n">up</span> <span class="ow">and</span> <span class="n">down</span><span class="p">:</span> <span class="n">res</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">up</span> <span class="o">+</span> <span class="n">down</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>[HARD] Path With Maximum Minimum Value</title>
			<link>https://jasonyangshadow.win/posts/path-with-maximum-minimum-value/</link>
			<pubDate>Tue, 24 Mar 2020 16:03:50 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/path-with-maximum-minimum-value/</guid>
			<description>Given a matrix of integers A with R rows and C columns, find the maximum score of a path starting at [0,0] and ending at [R-1,C-1]. The score of a path is the minimum value in that path. For example, the value of the path 8 → 4 → 5 → 9 is 4. A path moves some number of times from one visited cell to any neighbouring unvisited cell</description>
			<content type="html"><![CDATA[<p>Given a matrix of integers A with R rows and C columns, find the maximum score of a path starting at [0,0] and ending at [R-1,C-1].</p>
<p>The score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.</p>
<p>A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/04/23/1313_ex1.JPG" alt="image"></p>
<pre><code>Input: [[5,4,5],[1,2,6],[7,4,6]]
Output: 4
Explanation: 
The path with the maximum score is highlighted in yellow. 
</code></pre><p>Example 2:<br>
<img src="https://assets.leetcode.com/uploads/2019/04/23/1313_ex2.JPG" alt="image"></p>
<pre><code>Input: [[2,2,1,2,2,2],[1,2,2,2,1,2]]
Output: 2
</code></pre><p>Example 3:<br>
<img src="https://assets.leetcode.com/uploads/2019/04/23/1313_ex3.JPG" alt="image"></p>
<pre><code>Input: [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]
Output: 3
</code></pre><p>Note:</p>
<p>1 &lt;= R, C &lt;= 100
0 &lt;= A[i][j] &lt;= 10^9</p>
<p>重点在于，存储了所有的节点在小顶堆中，任何大于当前路径的后续节点（应该走的路径）的值在存入堆前被修改为当前值，任何小于当前路径的节点的值(不应该走的路径)仍然是原来的值，这样一来，任何应该选择的路径都会不断在pop中被弹出，其余的不应该选择的路径，永远不会弹出。</p>
<p>控制条件是当弹出的节点到大最后一个节点，就直接跳出。
这个算法利用了小顶堆，然后修改入堆值来调整弹出次序。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maximumMinimumPath</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dire</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span>
        <span class="n">R</span><span class="p">,</span><span class="n">C</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="n">maxHeap</span> <span class="o">=</span> <span class="p">[(</span><span class="o">-</span><span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">C</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">R</span><span class="p">)]</span>
        <span class="k">while</span> <span class="n">maxHeap</span><span class="p">:</span>
            <span class="n">val</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">maxHeap</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">R</span> <span class="o">-</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">==</span> <span class="n">C</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="n">val</span>
            <span class="k">for</span> <span class="n">dx</span><span class="p">,</span> <span class="n">dy</span> <span class="ow">in</span> <span class="n">dire</span><span class="p">:</span>
                <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span>
                <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">R</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">C</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">seen</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]:</span>
                    <span class="n">seen</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                    <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">maxHeap</span><span class="p">,</span> <span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="o">-</span><span class="n">A</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]),</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">))</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Increasing Path in a Matrix</title>
			<link>https://jasonyangshadow.win/posts/longest-increasing-path-in-a-matrix/</link>
			<pubDate>Mon, 23 Mar 2020 18:21:52 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-increasing-path-in-a-matrix/</guid>
			<description>Given an integer matrix, find the length of the longest increasing path.
From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).
Example 1:
Input: nums = [ [9,9,4], [6,6,8], [2,1,1] ] Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. Example 2:
Input: nums = [ [3,4,5], [3,2,6], [2,2,1] ] Output: 4 Explanation: The longest increasing path is [3, 4, 5, 6].</description>
			<content type="html"><![CDATA[<p>Given an integer matrix, find the length of the longest increasing path.</p>
<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>
<p>Example 1:</p>
<pre><code>Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestIncreasingPath</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">matrix</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="k">return</span> <span class="mi">0</span>
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="c1">#memorized dp</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">n</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">max</span><span class="p">(</span>
                    <span class="c1"># i -1 =&gt; i &gt; 0</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="ow">and</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                    <span class="c1">#i+1 =&gt; i &lt; m - 1</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">m</span><span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">j</span> <span class="ow">and</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="k">else</span> <span class="mi">0</span>
                <span class="p">)</span>
            <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Palindrome Pairs</title>
			<link>https://jasonyangshadow.win/posts/palindrome-pairs/</link>
			<pubDate>Mon, 23 Mar 2020 18:01:36 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/palindrome-pairs/</guid>
			<description>Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.
Example 1:
Input: [&amp;quot;abcd&amp;quot;,&amp;quot;dcba&amp;quot;,&amp;quot;lls&amp;quot;,&amp;quot;s&amp;quot;,&amp;quot;sssll&amp;quot;] Output: [[0,1],[1,0],[3,2],[2,4]] Explanation: The palindromes are [&amp;quot;dcbaabcd&amp;quot;,&amp;quot;abcddcba&amp;quot;,&amp;quot;slls&amp;quot;,&amp;quot;llssssll&amp;quot;] Example 2:
Input: [&amp;quot;bat&amp;quot;,&amp;quot;tab&amp;quot;,&amp;quot;cat&amp;quot;] Output: [[0,1],[1,0]] Explanation: The palindromes are [&amp;quot;battab&amp;quot;,&amp;quot;tabbat&amp;quot;] class Solution: def palindromePairs(self, words: List[str]) -&amp;gt; List[List[int]]: wordict = {} res = [] #put all word in dict, key =&amp;gt; word, value =&amp;gt; index  for i in range(len(words)): wordict[words[i]] = i for i in range(len(words)): for j in range(len(words[i]) + 1): #split word into prefix postfix part tmp1 = words[i][:j] tmp2 = words[i][j:] #check if reversed part is inside wordict and if it is inside and left part itself is palindrome.</description>
			<content type="html"><![CDATA[<p>Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.</p>
<p>Example 1:</p>
<pre><code>Input: [&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]
Output: [[0,1],[1,0],[3,2],[2,4]] 
Explanation: The palindromes are [&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]
</code></pre><p>Example 2:</p>
<pre><code>Input: [&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]
Output: [[0,1],[1,0]] 
Explanation: The palindromes are [&quot;battab&quot;,&quot;tabbat&quot;]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">palindromePairs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">wordict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="c1">#put all word in dict, key =&gt; word, value =&gt; index      </span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)):</span>
            <span class="n">wordict</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="c1">#split word into prefix postfix part</span>
                <span class="n">tmp1</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">][:</span><span class="n">j</span><span class="p">]</span>
                <span class="n">tmp2</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">:]</span>
                <span class="c1">#check if reversed part is inside wordict and if it is inside and left part itself is palindrome. then we add it</span>
                <span class="k">if</span> <span class="n">tmp1</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">wordict</span> <span class="ow">and</span> <span class="n">wordict</span><span class="p">[</span><span class="n">tmp1</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">!=</span> <span class="n">i</span> <span class="ow">and</span> <span class="n">tmp2</span> <span class="o">==</span> <span class="n">tmp2</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">i</span><span class="p">,</span> <span class="n">wordict</span><span class="p">[</span><span class="n">tmp1</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]]])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">tmp2</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">wordict</span> <span class="ow">and</span> <span class="n">wordict</span><span class="p">[</span><span class="n">tmp2</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">!=</span> <span class="n">i</span> <span class="ow">and</span> <span class="n">tmp1</span><span class="o">==</span> <span class="n">tmp1</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">wordict</span><span class="p">[</span><span class="n">tmp2</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]],</span> <span class="n">i</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Size Subarray Sum</title>
			<link>https://jasonyangshadow.win/posts/minimum-size-subarray-sum/</link>
			<pubDate>Mon, 23 Mar 2020 16:48:11 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-size-subarray-sum/</guid>
			<description>Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn&amp;rsquo;t one, return 0 instead.
Example:
Input: s = 7, nums = [2,3,1,2,4,3] Output: 2 Explanation: the subarray [4,3] has the minimal length under the problem constraint. Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).</description>
			<content type="html"><![CDATA[<p>Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn&rsquo;t one, return 0 instead.</p>
<p>Example:</p>
<pre><code>Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
</code></pre><p>Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="c1">#slide window</span>
    <span class="k">def</span> <span class="nf">minSubArrayLen</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">total</span> <span class="o">=</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">right</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="c1">#current total value</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="n">n</span>
            <span class="c1">#when current total value is greater than required sum, shrink it until total value is lower than required</span>
            <span class="k">while</span> <span class="n">total</span> <span class="o">&gt;=</span> <span class="n">s</span><span class="p">:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="c1">#remove the left-most one</span>
                <span class="n">total</span> <span class="o">-=</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span>
                <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">result</span> <span class="k">if</span> <span class="n">result</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minSubArrayLen</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1">#use prefix-sum</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">n</span>
        <span class="c1">#calculate prefix sum</span>
            
        <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">right</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="n">s</span><span class="p">:</span>
                <span class="c1">#find the closest left</span>
                <span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find_left</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

        <span class="c1">#similar to float(&#34;inf&#34;)</span>
        <span class="k">return</span> <span class="n">result</span> <span class="k">if</span> <span class="n">result</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
    
    <span class="k">def</span> <span class="nf">find_left</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="c1">#n is prefix-sum value</span>
            <span class="c1"># if n - nums[mid] &gt;=target we need to shrink area by increasing left index</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="p">:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">return</span> <span class="n">left</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find K Closest Elements</title>
			<link>https://jasonyangshadow.win/posts/find-k-closest-elements/</link>
			<pubDate>Mon, 23 Mar 2020 16:18:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-k-closest-elements/</guid>
			<description>Given a sorted array, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.
Example 1:
Input: [1,2,3,4,5], k=4, x=3 Output: [1,2,3,4] Example 2:
Input: [1,2,3,4,5], k=4, x=-1 Output: [1,2,3,4] Note: The value k is positive and will always be smaller than the length of the sorted array.</description>
			<content type="html"><![CDATA[<p>Given a sorted array, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.</p>
<p>Example 1:</p>
<pre><code>Input: [1,2,3,4,5], k=4, x=3
Output: [1,2,3,4]
</code></pre><p>Example 2:</p>
<pre><code>Input: [1,2,3,4,5], k=4, x=-1
Output: [1,2,3,4]
</code></pre><p>Note:
The value k is positive and will always be smaller than the length of the sorted array.
Length of the given array is positive and will not exceed 104
Absolute value of elements in the array and x will not exceed 104</p>
<div class="highlight"><pre class="chroma"><code class="language-plain" data-lang="plain">The array is sorted.
If we want find the one number closest to x,
we don&#39;t have to check one by one.
it&#39;s straightforward to use binary research.

Now we want the k closest,
the logic should be similar.


Explanation:
Assume we are taking A[i] ~ A[i + k -1].
We can binary research i
We compare the distance between x - A[mid] and A[mid + k] - x

If x - A[mid] &gt; A[mid + k] - x,
it means A[mid + 1] ~ A[mid + k] is better than A[mid] ~ A[mid + k - 1],
and we have mid smaller than the right i.
So assign left = mid + 1.

Note that, you SHOULD NOT compare the absolute value of abs(x - A[mid]) and abs(A[mid + k] - x).
It fails at cases like A = [1,1,2,2,2,2,2,3,3], x = 3, k = 3

The problem is interesting and good.
Unfortunately the test cases is terrible.
The worst part of Leetcode test cases is that,
you sumbit a wrong solution but get accepted.

You didn&#39;t read my post and upvote carefully,
then you miss this key point.


Time Complexity:
O(log(N - K)) to binary research and find reseult
O(K) to create the returned list.
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findClosestElements</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        
        <span class="c1">#because we tried to find i, and return [i:i+k]</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="n">k</span>
        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="c1">#here we have to move right -&gt;</span>
            <span class="c1">#as we need to find closest items, a[mid+1] ~A[mid + k] is better than</span>
            <span class="c1"># a[mid] ~ a[mid + k -1]</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">-</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span> <span class="o">+</span> <span class="n">k</span><span class="p">]</span> <span class="o">-</span><span class="n">x</span><span class="p">:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span>
        
        <span class="k">return</span> <span class="n">arr</span><span class="p">[</span><span class="n">l</span><span class="p">:</span><span class="n">l</span><span class="o">+</span><span class="n">k</span><span class="p">]</span>
</code></pre></div><p>If we use abs(x-arr[mid]) vs arr[mid+k] -x, we need to add additional code</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">f</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span> <span class="o">+</span> <span class="n">k</span><span class="p">])</span> <span class="p">{</span>  <span class="c1">// &lt;---- add this
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">abs</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span><span class="o">-</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">Math</span><span class="p">.</span><span class="n">abs</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="o">+</span><span class="n">k</span><span class="p">]</span><span class="o">-</span><span class="n">x</span><span class="p">))</span>
    <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">else</span>
    <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Surrounded Regions</title>
			<link>https://jasonyangshadow.win/posts/surrounded-regions/</link>
			<pubDate>Mon, 23 Mar 2020 14:27:30 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/surrounded-regions/</guid>
			<description>Given a 2D board containing &amp;lsquo;X&amp;rsquo; and &amp;lsquo;O&amp;rsquo; (the letter O), capture all regions surrounded by &amp;lsquo;X&amp;rsquo;.
A region is captured by flipping all &amp;lsquo;O&amp;rsquo;s into &amp;lsquo;X&amp;rsquo;s in that surrounded region.
Example:
X X X X X O O X X X O X X O X X After running your function, the board should be:
X X X X X X X X X X X X X O X X Explanation:</description>
			<content type="html"><![CDATA[<p>Given a 2D board containing &lsquo;X&rsquo; and &lsquo;O&rsquo; (the letter O), capture all regions surrounded by &lsquo;X&rsquo;.</p>
<p>A region is captured by flipping all &lsquo;O&rsquo;s into &lsquo;X&rsquo;s in that surrounded region.</p>
<p>Example:</p>
<pre><code>X X X X
X O O X
X X O X
X O X X
</code></pre><p>After running your function, the board should be:</p>
<pre><code>X X X X
X X X X
X X X X
X O X X
</code></pre><p>Explanation:</p>
<p>Surrounded regions shouldn’t be on the border, which means that any &lsquo;O&rsquo; on the border of the board are not flipped to &lsquo;X&rsquo;. Any &lsquo;O&rsquo; that is not on the border and it is not connected to an &lsquo;O&rsquo; on the border will be flipped to &lsquo;X&rsquo;. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p>
<p>Using an intermediate char to replace all O located in the board to S and associated with its surrounded chars.<br>
Then flip it again.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify board in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
            <span class="k">return</span>
        
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="n">save</span> <span class="o">=</span> <span class="p">[</span><span class="n">ij</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">ij</span> <span class="ow">in</span> <span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="n">k</span><span class="p">),</span> <span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">),</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">))]</span>
        
        <span class="k">while</span> <span class="n">save</span><span class="p">:</span>
            <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">save</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;O&#39;</span><span class="p">:</span>
                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;S&#39;</span>
                <span class="n">save</span> <span class="o">+=</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

        <span class="n">board</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;XO&#39;</span><span class="p">[</span><span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;S&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">row</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">board</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find K Pairs With Smallest Sums</title>
			<link>https://jasonyangshadow.win/posts/find-k-pairs-with-smallest-sums/</link>
			<pubDate>Sun, 22 Mar 2020 17:36:38 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-k-pairs-with-smallest-sums/</guid>
			<description>You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.
Define a pair (u,v) which consists of one element from the first array and one element from the second array.
Find the k pairs (u1,v1),(u2,v2) &amp;hellip;(uk,vk) with the smallest sums.
Example 1:
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3 Output: [[1,2],[1,4],[1,6]] Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6] Example 2:</description>
			<content type="html"><![CDATA[<p>You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.</p>
<p>Define a pair (u,v) which consists of one element from the first array and one element from the second array.</p>
<p>Find the k pairs (u1,v1),(u2,v2) &hellip;(uk,vk) with the smallest sums.</p>
<p>Example 1:</p>
<pre><code>Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]] 
Explanation: The first 3 pairs are returned from the sequence: 
             [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
</code></pre><p>Example 2:</p>
<pre><code>Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [1,1],[1,1]
Explanation: The first 2 pairs are returned from the sequence: 
             [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
</code></pre><p>Example 3:</p>
<pre><code>Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [1,3],[2,3]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]
</code></pre><p>Use heapq in python3. Be noticed that python3 use minimum heapq. In order to find the minimum sum value, we need to push all negative values into heapq, so that the minimum sum turns to be the maximum item in the bottom of this heap. Then we replace the smallest one in the top.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">kSmallestPairs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">nums2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">heap</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">n1</span> <span class="ow">in</span> <span class="n">nums1</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">n2</span> <span class="ow">in</span> <span class="n">nums2</span><span class="p">:</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span> <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="n">n1</span><span class="o">-</span><span class="n">n2</span><span class="p">,</span> <span class="p">[</span><span class="n">n1</span><span class="p">,</span><span class="n">n2</span><span class="p">]))</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">heap</span> <span class="ow">and</span> <span class="o">-</span><span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">n1</span><span class="o">+</span> <span class="n">n2</span><span class="p">:</span>
                        <span class="n">heapq</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                        <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="n">n1</span><span class="o">-</span><span class="n">n2</span><span class="p">,</span> <span class="p">[</span><span class="n">n1</span><span class="p">,</span><span class="n">n2</span><span class="p">]))</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">break</span>
    
        <span class="k">return</span> <span class="p">[</span><span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">heap</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="k">if</span> <span class="n">heap</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>H Index</title>
			<link>https://jasonyangshadow.win/posts/h-index/</link>
			<pubDate>Sun, 22 Mar 2020 16:28:52 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/h-index/</guid>
			<description>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher&amp;rsquo;s h-index.
According to the definition of h-index on Wikipedia: &amp;ldquo;A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each.&amp;rdquo;
Example:
Input: citations = [3,0,6,1,5] Output: 3 Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.</description>
			<content type="html"><![CDATA[<p>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher&rsquo;s h-index.</p>
<p>According to the definition of h-index on Wikipedia: &ldquo;A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each.&rdquo;</p>
<p>Example:</p>
<pre><code>Input: citations = [3,0,6,1,5]
Output: 3 
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had 
             received 3, 0, 6, 1, 5 citations respectively. 
             Since the researcher has 3 papers with at least 3 citations each and the remaining 
             two with no more than 3 citations each, her h-index is 3.
Note: If there are several possible values for h, the maximum one is taken as the h-index.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">hIndex</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">citations</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">citations</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">citations</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">citations</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">citations</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">citations</span><span class="p">)</span> <span class="o">-</span><span class="n">i</span><span class="p">:</span>
                <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">citations</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span>
        <span class="k">return</span> <span class="mi">0</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sort Transformed Array</title>
			<link>https://jasonyangshadow.win/posts/sort-transformed-array/</link>
			<pubDate>Sun, 22 Mar 2020 15:54:32 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sort-transformed-array/</guid>
			<description>Given a sorted array of integers nums and integer values a, b and c. Apply a quadratic function of the form f(x) = ax2 + bx + c to each element x in the array.
The returned array must be in sorted order.
Expected time complexity: O(n)
Example 1:
Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5 Output: [3,9,15,33] Example 2:
Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5 Output: [-23,-5,1,7] class Solution: def sortTransformedArray(self, nums: List[int], a: int, b: int, c: int) -&amp;gt; List[int]: res = [] l, r = 0, len(nums) -1 #retreat to linear function if a == 0: nums = [b*x + c for x in nums] return nums if b &amp;gt; 0 else nums[::-1] else: #the axis of symmetry axis = float(-1* b) / (2*a) while l &amp;lt;= r: x1, x2 = nums[l], nums[r] #always choose the right-most or left-most item #they are always the largest option or smallest option if abs(x1 - axis) &amp;gt;= abs(x2 - axis): res += [int(a*x1**2 + b*x1 + c)] l += 1 else: res += [int(a*x2**2 + b*x2 +c)] r -= 1 return res if a &amp;lt; 0 else res[::-1] </description>
			<content type="html"><![CDATA[<p>Given a sorted array of integers nums and integer values a, b and c. Apply a quadratic function of the form f(x) = ax2 + bx + c to each element x in the array.</p>
<p>The returned array must be in sorted order.</p>
<p>Expected time complexity: O(n)</p>
<p>Example 1:</p>
<pre><code>Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
Output: [3,9,15,33]
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
Output: [-23,-5,1,7]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sortTransformedArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
        
        <span class="c1">#retreat to linear function</span>
        <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">c</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">nums</span> <span class="k">if</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">nums</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        
        <span class="k">else</span><span class="p">:</span>
            <span class="c1">#the axis of symmetry</span>
            <span class="n">axis</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
        
            <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">:</span>
                <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
                <span class="c1">#always choose the right-most or left-most item</span>
                <span class="c1">#they are always the largest option or smallest option</span>
                <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">x1</span> <span class="o">-</span> <span class="n">axis</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">x2</span> <span class="o">-</span> <span class="n">axis</span><span class="p">):</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">x1</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">x1</span> <span class="o">+</span> <span class="n">c</span><span class="p">)]</span>
                    <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">x2</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">x2</span> <span class="o">+</span><span class="n">c</span><span class="p">)]</span>
                    <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span>
            
            <span class="k">return</span> <span class="n">res</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">res</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Word Search 2</title>
			<link>https://jasonyangshadow.win/posts/word-search-2/</link>
			<pubDate>Sun, 22 Mar 2020 15:26:36 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/word-search-2/</guid>
			<description>Given a 2D board and a list of words from the dictionary, find all words in the board.
Each word must be constructed from letters of sequentially adjacent cell, where &amp;ldquo;adjacent&amp;rdquo; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.
Example:
Input: board = [ [&#39;o&#39;,&#39;a&#39;,&#39;a&#39;,&#39;n&#39;], [&#39;e&#39;,&#39;t&#39;,&#39;a&#39;,&#39;e&#39;], [&#39;i&#39;,&#39;h&#39;,&#39;k&#39;,&#39;r&#39;], [&#39;i&#39;,&#39;f&#39;,&#39;l&#39;,&#39;v&#39;] ] words = [&amp;quot;oath&amp;quot;,&amp;quot;pea&amp;quot;,&amp;quot;eat&amp;quot;,&amp;quot;rain&amp;quot;] Output: [&amp;quot;eat&amp;quot;,&amp;quot;oath&amp;quot;] Note:
 All inputs are consist of lowercase letters a-z.</description>
			<content type="html"><![CDATA[<p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p>
<p>Each word must be constructed from letters of sequentially adjacent cell, where &ldquo;adjacent&rdquo; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>
<p>Example:</p>
<pre><code>Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]

Output: [&quot;eat&quot;,&quot;oath&quot;]
</code></pre><p>Note:</p>
<ul>
<li>All inputs are consist of lowercase letters a-z.</li>
<li>The values of words are distinct.</li>
</ul>
<p>Using Trie to implement, be careful of repeated output.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TrieNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">children</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="n">TrieNode</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">is_leaf</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">class</span> <span class="nc">Trie</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">TrieNode</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="c1">#it will automatically create a TrieNode</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
        <span class="n">node</span><span class="o">.</span><span class="n">is_leaf</span> <span class="o">=</span> <span class="bp">True</span>
        

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findWords</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]],</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">trie</span> <span class="o">=</span> <span class="n">Trie</span><span class="p">()</span>
        <span class="c1">#generate trie</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="n">trie</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">trie</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        
        <span class="c1">#deduplicate the output</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">res</span><span class="p">))</span>
        
    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span>
        <span class="c1">#here we will have duplicated items</span>
        <span class="c1">#[&#34;aaa&#34;, &#34;aaab&#34;], it will generate two &#34;aaa&#34;</span>
        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">is_leaf</span><span class="p">:</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="ow">or</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
            <span class="k">return</span>
        
        <span class="n">t</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="p">:</span>
            <span class="k">return</span>
        
        <span class="c1">#here we have to set current value to &#39;#&#39; as next 4 recursive searches will go back to current place.</span>
        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;#&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">path</span><span class="o">+</span><span class="n">t</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">path</span><span class="o">+</span><span class="n">t</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">path</span><span class="o">+</span><span class="n">t</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">path</span><span class="o">+</span><span class="n">t</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span>
        <span class="c1">#restore it to oroginal value</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Delete Nodes and Return Forest</title>
			<link>https://jasonyangshadow.win/posts/delete-nodes-and-return-forest/</link>
			<pubDate>Sun, 22 Mar 2020 14:54:48 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/delete-nodes-and-return-forest/</guid>
			<description>Given the root of a binary tree, each node in the tree has a distinct value.
After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).
Return the roots of the trees in the remaining forest. You may return the result in any order.
Example 1: Input: root = [1,2,3,4,5,6,7], to_delete = [3,5] Output: [[1,2,null,4],[6],[7]] Constraints:
The number of nodes in the given tree is at most 1000.</description>
			<content type="html"><![CDATA[<p>Given the root of a binary tree, each node in the tree has a distinct value.</p>
<p>After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).</p>
<p>Return the roots of the trees in the remaining forest.  You may return the result in any order.</p>
<p>Example 1:
<img src="https://assets.leetcode.com/uploads/2019/07/01/screen-shot-2019-07-01-at-53836-pm.png" alt="image"></p>
<pre><code>Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]
</code></pre><p>Constraints:</p>
<pre><code>The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length &lt;= 1000
to_delete contains distinct values between 1 and 1000.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">delNodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">to_delete</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">]:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">is_root</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
            <span class="n">root_deleted</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="ow">in</span> <span class="n">to_delete</span>
            <span class="k">if</span> <span class="n">is_root</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">root_deleted</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
            <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root_deleted</span><span class="p">)</span>
            <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span><span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">root_deleted</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">root_deleted</span> <span class="k">else</span> <span class="n">root</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Missing Element in Sorted Array</title>
			<link>https://jasonyangshadow.win/posts/missing-element-in-sorted-array/</link>
			<pubDate>Sat, 21 Mar 2020 15:31:06 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/missing-element-in-sorted-array/</guid>
			<description>Given a sorted array A of unique numbers, find the K-th missing number starting from the leftmost number of the array.
Example 1:
Input: A = [4,7,9,10], K = 1 Output: 5 Explanation: The first missing number is 5. Example 2:
Input: A = [4,7,9,10], K = 3 Output: 8 Explanation: The missing numbers are [5,6,8,...], hence the third missing number is 8. Example 3:
Input: A = [1,2,4], K = 3 Output: 6 Explanation: The missing numbers are [3,5,6,7,.</description>
			<content type="html"><![CDATA[<p>Given a sorted array A of unique numbers, find the K-th missing number starting from the leftmost number of the array.</p>
<p>Example 1:</p>
<pre><code>Input: A = [4,7,9,10], K = 1
Output: 5
Explanation: 
The first missing number is 5.
</code></pre><p>Example 2:</p>
<pre><code>Input: A = [4,7,9,10], K = 3
Output: 8
Explanation: 
The missing numbers are [5,6,8,...], hence the third missing number is 8.
</code></pre><p>Example 3:</p>
<pre><code>Input: A = [1,2,4], K = 3
Output: 6
Explanation: 
The missing numbers are [3,5,6,7,...], hence the third missing number is 6.
</code></pre><p>Note:</p>
<p>1 &lt;= A.length &lt;= 50000
1 &lt;= A[i] &lt;= 1e7
1 &lt;= K &lt;= 1e8</p>
<p>The first solution is easy to achieve but encountering TLE.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">missingElement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">start</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">while</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">start</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">start</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
                <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">start</span>
</code></pre></div><p>The second solution uses binary search, much faster.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">missingElement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        
        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">mid</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">k</span> <span class="o">+</span> <span class="n">l</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">missingElement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">ideal</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">missing</span> <span class="o">=</span> <span class="n">ideal</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="n">missing</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">k</span> <span class="o">-</span> <span class="n">missing</span>
        
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="n">missing</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">mid</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">missing</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span>
                <span class="n">k</span> <span class="o">-=</span> <span class="n">missing</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">+</span> <span class="n">k</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Word in Dictionary</title>
			<link>https://jasonyangshadow.win/posts/longest-word-in-dictionary/</link>
			<pubDate>Sat, 21 Mar 2020 15:21:48 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-word-in-dictionary/</guid>
			<description>Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order.
If there is no answer, return the empty string. Example 1:
Input: words = [&amp;quot;w&amp;quot;,&amp;quot;wo&amp;quot;,&amp;quot;wor&amp;quot;,&amp;quot;worl&amp;quot;, &amp;quot;world&amp;quot;] Output: &amp;quot;world&amp;quot; Explanation: The word &amp;quot;world&amp;quot; can be built one character at a time by &amp;quot;w&amp;quot;, &amp;quot;wo&amp;quot;, &amp;quot;wor&amp;quot;, and &amp;quot;worl&amp;quot;.</description>
			<content type="html"><![CDATA[<p>Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order.</p>
<p>If there is no answer, return the empty string.
Example 1:</p>
<pre><code>Input: 
words = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]
Output: &quot;world&quot;
Explanation: 
The word &quot;world&quot; can be built one character at a time by &quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, and &quot;worl&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input: 
words = [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]
Output: &quot;apple&quot;
Explanation: 
Both &quot;apply&quot; and &quot;apple&quot; can be built from other words in the dictionary. However, &quot;apple&quot; is lexicographically smaller than &quot;apply&quot;.
</code></pre><p>Note:</p>
<p>All the strings in the input will only contain lowercase letters.
The length of words will be in the range [1, 1000].
The length of words[i] will be in the range [1, 30].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestWord</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">words</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
        <span class="n">word_set</span><span class="p">,</span> <span class="n">longest_word</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s1">&#39;&#39;</span><span class="p">]),</span> <span class="s1">&#39;&#39;</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">word</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">word_set</span><span class="p">:</span>
                <span class="n">word_set</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">longest_word</span><span class="p">):</span>
                    <span class="n">longest_word</span> <span class="o">=</span> <span class="n">word</span>
        <span class="k">return</span> <span class="n">longest_word</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>UTF8 Validation</title>
			<link>https://jasonyangshadow.win/posts/utf8-validation/</link>
			<pubDate>Sat, 21 Mar 2020 14:26:21 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/utf8-validation/</guid>
			<description>A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:
For 1-byte character, the first bit is a 0, followed by its unicode code. For n-bytes character, the first n-bits are all one&amp;rsquo;s, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10. This is how the UTF-8 encoding would work:
 Char. number range | UTF-8 octet sequence (hexadecimal) | (binary) --------------------+--------------------------------------------- 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx Given an array of integers representing the data, return whether it is a valid utf-8 encoding.</description>
			<content type="html"><![CDATA[<p>A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:</p>
<p>For 1-byte character, the first bit is a 0, followed by its unicode code.
For n-bytes character, the first n-bits are all one&rsquo;s, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.
This is how the UTF-8 encoding would work:</p>
<pre><code>   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
</code></pre><p>Given an array of integers representing the data, return whether it is a valid utf-8 encoding.</p>
<p>Note:
The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.</p>
<p>Example 1:</p>
<pre><code>data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.

Return true.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.
</code></pre><p>Example 2:</p>
<pre><code>data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.

Return false.
The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
The next byte is a continuation byte which starts with 10 and that's correct.
But the second continuation byte does not start with 10, so it is invalid.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">validUtf8</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">rest</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
                <span class="c1">#pop data and check if it starts with 10</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;10&#34;</span><span class="p">):</span> <span class="k">return</span> <span class="bp">False</span>
            <span class="k">return</span> <span class="bp">True</span>
            
        <span class="c1">#zfill is used for fill appending 0 to str</span>
        <span class="c1">#because we use pop so we have to reverse the input str</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="nb">bin</span><span class="p">(</span><span class="n">seq</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="k">for</span> <span class="n">seq</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
        <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">seq</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;0&#34;</span><span class="p">):</span> <span class="k">continue</span>
            <span class="k">if</span> <span class="n">seq</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;110&#34;</span><span class="p">):</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">rest</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="k">return</span> <span class="bp">False</span>
            <span class="k">elif</span> <span class="n">seq</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;1110&#34;</span><span class="p">):</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">rest</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span> <span class="k">return</span> <span class="bp">False</span>
            <span class="k">elif</span> <span class="n">seq</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;11110&#34;</span><span class="p">):</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">rest</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span> <span class="k">return</span> <span class="bp">False</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Repeating Substring</title>
			<link>https://jasonyangshadow.win/posts/longest-repeating-substring/</link>
			<pubDate>Sat, 21 Mar 2020 12:05:40 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-repeating-substring/</guid>
			<description>Given a string S, find out the length of the longest repeating substring(s). Return 0 if no repeating substring exists.
Example 1:
Input: &amp;quot;abcd&amp;quot; Output: 0 Explanation: There is no repeating substring. Example 2:
Input: &amp;quot;abbaba&amp;quot; Output: 2 Explanation: The longest repeating substrings are &amp;quot;ab&amp;quot; and &amp;quot;ba&amp;quot;, each of which occurs twice. Example 3:
Input: &amp;quot;aabcaabdaab&amp;quot; Output: 3 Explanation: The longest repeating substring is &amp;quot;aab&amp;quot;, which occurs 3 times. Example 4:</description>
			<content type="html"><![CDATA[<p>Given a string S, find out the length of the longest repeating substring(s). Return 0 if no repeating substring exists.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;abcd&quot;
Output: 0
Explanation: There is no repeating substring.
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;abbaba&quot;
Output: 2
Explanation: The longest repeating substrings are &quot;ab&quot; and &quot;ba&quot;, each of which occurs twice.
</code></pre><p>Example 3:</p>
<pre><code>Input: &quot;aabcaabdaab&quot;
Output: 3
Explanation: The longest repeating substring is &quot;aab&quot;, which occurs 3 times.
</code></pre><p>Example 4:</p>
<pre><code>Input: &quot;aaaaa&quot;
Output: 4
Explanation: The longest repeating substring is &quot;aaaa&quot;, which occurs twice.
</code></pre><p>Note:</p>
<p>The string S consists of only lowercase English letters from &lsquo;a&rsquo; - &lsquo;z&rsquo;.
1 &lt;= S.length &lt;= 1500</p>
<p>dp[i][j] represents the longest repeated substring ends at i and j.
e.g. &ldquo;abcbc&rdquo;. dp[2][4] = 2 because bc == bc, abc != cbc</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestRepeatingSubstring</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">S</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
        <span class="n">res</span>  <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="ow">and</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">S</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                    <span class="n">res</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">res</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Linked List Components</title>
			<link>https://jasonyangshadow.win/posts/linked-list-components/</link>
			<pubDate>Sat, 21 Mar 2020 10:46:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/linked-list-components/</guid>
			<description>We are given head, the head node of a linked list containing unique integer values.
We are also given the list G, a subset of the values in the linked list.
Return the number of connected components in G, where two values are connected if they appear consecutively in the linked list.
Example 1:
Input: head: 0-&amp;gt;1-&amp;gt;2-&amp;gt;3 G = [0, 1, 3] Output: 2 Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.</description>
			<content type="html"><![CDATA[<p>We are given head, the head node of a linked list containing unique integer values.</p>
<p>We are also given the list G, a subset of the values in the linked list.</p>
<p>Return the number of connected components in G, where two values are connected if they appear consecutively in the linked list.</p>
<p>Example 1:</p>
<pre><code>Input: 
head: 0-&gt;1-&gt;2-&gt;3
G = [0, 1, 3]
Output: 2
Explanation: 
0 and 1 are connected, so [0, 1] and [3] are the two connected components.
</code></pre><p>Example 2:</p>
<pre><code>Input: 
head: 0-&gt;1-&gt;2-&gt;3-&gt;4
G = [0, 3, 1, 4]
Output: 2
Explanation: 
0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.
</code></pre><p>Note:</p>
<p>If N is the length of the linked list given by head, 1 &lt;= N &lt;= 10000.
The value of each node in the linked list will be in the range [0, N - 1].
1 &lt;= G.length &lt;= 10000.
G is a subset of all values in the linked list.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for singly-linked list.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.next = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numComponents</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">G</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">setG</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">head</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">head</span><span class="o">.</span><span class="n">val</span> <span class="ow">in</span> <span class="n">setG</span> <span class="ow">and</span> <span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">next</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">val</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">setG</span><span class="p">):</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Lowest Common Ancestor of Deepest Leaves</title>
			<link>https://jasonyangshadow.win/posts/lowest-common-ancestor-of-deepest-leaves/</link>
			<pubDate>Fri, 20 Mar 2020 17:41:24 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/lowest-common-ancestor-of-deepest-leaves/</guid>
			<description>Given a rooted binary tree, return the lowest common ancestor of its deepest leaves.
Recall that:
The node of a binary tree is a leaf if and only if it has no children The depth of the root of the tree is 0, and if the depth of a node is d, the depth of each of its children is d+1. The lowest common ancestor of a set S of nodes is the node A with the largest depth such that every node in S is in the subtree with root A.</description>
			<content type="html"><![CDATA[<p>Given a rooted binary tree, return the lowest common ancestor of its deepest leaves.</p>
<p>Recall that:</p>
<p>The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is 0, and if the depth of a node is d, the depth of each of its children is d+1.
The lowest common ancestor of a set S of nodes is the node A with the largest depth such that every node in S is in the subtree with root A.</p>
<p>Example 1:</p>
<pre><code>Input: root = [1,2,3]
Output: [1,2,3]
Explanation: 
The deepest leaves are the nodes with values 2 and 3.
The lowest common ancestor of these leaves is the node with value 1.
The answer returned is a TreeNode object (not an array) with serialization &quot;[1,2,3]&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input: root = [1,2,3,4]
Output: [4]
</code></pre><p>Example 3:</p>
<pre><code>Input: root = [1,2,3,4,5]
Output: [2,4,5]
</code></pre><p>Constraints:</p>
<p>The given tree will have between 1 and 1000 nodes.
Each node of the tree will have a distinct value between 1 and 1000.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lcaDeepestLeaves</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">None</span>
            <span class="n">h1</span><span class="p">,</span> <span class="n">lca1</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="n">h2</span><span class="p">,</span> <span class="n">lca2</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="n">h1</span> <span class="o">&gt;</span> <span class="n">h2</span><span class="p">:</span> <span class="k">return</span> <span class="n">h1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">lca1</span>
            <span class="k">if</span> <span class="n">h1</span> <span class="o">&lt;</span> <span class="n">h2</span><span class="p">:</span> <span class="k">return</span> <span class="n">h2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">lca2</span>
            <span class="k">return</span> <span class="n">h1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">root</span>
        
        <span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Interval List Intersections</title>
			<link>https://jasonyangshadow.win/posts/interval-list-intersections/</link>
			<pubDate>Fri, 20 Mar 2020 17:23:27 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/interval-list-intersections/</guid>
			<description>Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.
Return the intersection of these two interval lists.
(Formally, a closed interval [a, b] (with a &amp;lt;= b) denotes the set of real numbers x with a &amp;lt;= x &amp;lt;= b. The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.</description>
			<content type="html"><![CDATA[<p>Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.</p>
<p>Return the intersection of these two interval lists.</p>
<p>(Formally, a closed interval [a, b] (with a &lt;= b) denotes the set of real numbers x with a &lt;= x &lt;= b.  The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)</p>
<p>Example 1:
<img src="https://assets.leetcode.com/uploads/2019/01/30/interval1.png" alt="image"></p>
<p>Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
Reminder: The inputs and the desired output are lists of Interval objects, and not arrays or lists.</p>
<p>Note:</p>
<p>0 &lt;= A.length &lt; 1000
0 &lt;= B.length &lt; 1000
0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">intervalIntersection</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">B</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[]</span>
        
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]:</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="nb">max</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">min</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">])])</span>
                <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Remove Outermost Parentheses</title>
			<link>https://jasonyangshadow.win/posts/remove-outermost-parentheses/</link>
			<pubDate>Fri, 20 Mar 2020 16:01:34 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/remove-outermost-parentheses/</guid>
			<description>A valid parentheses string is either empty (&amp;quot;&amp;quot;), &amp;ldquo;(&amp;rdquo; + A + &amp;ldquo;)&amp;rdquo;, or A + B, where A and B are valid parentheses strings, and + represents string concatenation. For example, &amp;ldquo;&amp;rdquo;, &amp;ldquo;()&amp;rdquo;, &amp;ldquo;(())()&amp;rdquo;, and &amp;ldquo;(()(()))&amp;rdquo; are all valid parentheses strings.
A valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.</description>
			<content type="html"><![CDATA[<p>A valid parentheses string is either empty (&quot;&quot;), &ldquo;(&rdquo; + A + &ldquo;)&rdquo;, or A + B, where A and B are valid parentheses strings, and + represents string concatenation.  For example, &ldquo;&rdquo;, &ldquo;()&rdquo;, &ldquo;(())()&rdquo;, and &ldquo;(()(()))&rdquo; are all valid parentheses strings.</p>
<p>A valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.</p>
<p>Given a valid parentheses string S, consider its primitive decomposition: S = P_1 + P_2 + &hellip; + P_k, where P_i are primitive valid parentheses strings.</p>
<p>Return S after removing the outermost parentheses of every primitive string in the primitive decomposition of S.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;(()())(())&quot;
Output: &quot;()()()&quot;
Explanation: 
The input string is &quot;(()())(())&quot;, with primitive decomposition &quot;(()())&quot; + &quot;(())&quot;.
After removing outer parentheses of each part, this is &quot;()()&quot; + &quot;()&quot; = &quot;()()()&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;(()())(())(()(()))&quot;
Output: &quot;()()()()(())&quot;
Explanation: 
The input string is &quot;(()())(())(()(()))&quot;, with primitive decomposition &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;.
After removing outer parentheses of each part, this is &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; = &quot;()()()()(())&quot;.
</code></pre><p>Example 3:</p>
<pre><code>Input: &quot;()()&quot;
Output: &quot;&quot;
Explanation: 
The input string is &quot;()()&quot;, with primitive decomposition &quot;()&quot; + &quot;()&quot;.
After removing outer parentheses of each part, this is &quot;&quot; + &quot;&quot; = &quot;&quot;.
</code></pre><p>Note:</p>
<p>S.length &lt;= 10000
S[i] is &ldquo;(&rdquo; or &ldquo;)&rdquo;
S is a valid parentheses string</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeOuterParentheses</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">S</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">res</span><span class="p">,</span> <span class="n">opened</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span> <span class="ow">and</span> <span class="n">opened</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> <span class="n">res</span> <span class="o">+=</span> <span class="n">c</span>
            <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span> <span class="ow">and</span> <span class="n">opened</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span> <span class="n">res</span> <span class="o">+=</span> <span class="n">c</span>
            <span class="n">opened</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">opened</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Employees Earning More Than Their Managers</title>
			<link>https://jasonyangshadow.win/posts/employees-earning-more-than-their-managers/</link>
			<pubDate>Fri, 20 Mar 2020 15:06:48 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/employees-earning-more-than-their-managers/</guid>
			<description>SQL Schema The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.
+----+-------+--------+-----------+ | Id | Name | Salary | ManagerId | +----+-------+--------+-----------+ | 1 | Joe | 70000 | 3 | | 2 | Henry | 80000 | 4 | | 3 | Sam | 60000 | NULL | | 4 | Max | 90000 | NULL | +----+-------+--------+-----------+ Given the Employee table, write a SQL query that finds out employees who earn more than their managers.</description>
			<content type="html"><![CDATA[<p>SQL Schema
The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</p>
<pre><code>+----+-------+--------+-----------+
| Id | Name  | Salary | ManagerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | NULL      |
| 4  | Max   | 90000  | NULL      |
+----+-------+--------+-----------+
Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.

+----------+
| Employee |
+----------+
| Joe      |
+----------+
</code></pre><div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="o">#</span> <span class="k">Write</span> <span class="n">your</span> <span class="n">MySQL</span> <span class="n">query</span> <span class="k">statement</span> <span class="n">below</span>
<span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">Employee</span>
<span class="k">from</span> <span class="n">Employee</span> <span class="n">a</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">Employee</span> <span class="n">b</span> <span class="k">on</span> <span class="n">a</span><span class="p">.</span><span class="n">ManagerId</span><span class="o">=</span><span class="n">b</span><span class="p">.</span><span class="n">Id</span>
<span class="k">where</span> <span class="n">a</span><span class="p">.</span><span class="n">Salary</span><span class="o">&gt;</span><span class="n">b</span><span class="p">.</span><span class="n">Salary</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Number of Submatrices That Sum to Target</title>
			<link>https://jasonyangshadow.win/posts/number-of-submatrices-that-sum-to-target/</link>
			<pubDate>Fri, 20 Mar 2020 13:30:55 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/number-of-submatrices-that-sum-to-target/</guid>
			<description>Given a matrix, and a target, return the number of non-empty submatrices that sum to target.
A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 &amp;lt;= x &amp;lt;= x2 and y1 &amp;lt;= y &amp;lt;= y2.
Two submatrices (x1, y1, x2, y2) and (x1&amp;rsquo;, y1&amp;rsquo;, x2&amp;rsquo;, y2&amp;rsquo;) are different if they have some coordinate that is different: for example, if x1 != x1&amp;rsquo;.
Example 1:</description>
			<content type="html"><![CDATA[<p>Given a matrix, and a target, return the number of non-empty submatrices that sum to target.</p>
<p>A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 &lt;= x &lt;= x2 and y1 &lt;= y &lt;= y2.</p>
<p>Two submatrices (x1, y1, x2, y2) and (x1&rsquo;, y1&rsquo;, x2&rsquo;, y2&rsquo;) are different if they have some coordinate that is different: for example, if x1 != x1&rsquo;.</p>
<p>Example 1:</p>
<pre><code>Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.
</code></pre><p>Example 2:</p>
<pre><code>Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.
</code></pre><p>Note:</p>
<p>1 &lt;= matrix.length &lt;= 300
1 &lt;= matrix[0].length &lt;= 300
-1000 &lt;= matrix[i] &lt;= 1000
-10^8 &lt;= target &lt;= 10^8</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numSubmatrixSumTarget</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="c1">#calculate prefix sum of each row</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
                <span class="c1">#calculate sum from different columns</span>
                <span class="n">c</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
                <span class="c1">#c represents the value and its apperance count number</span>
                <span class="n">cur</span><span class="p">,</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
                <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                    <span class="c1"># value from different columns</span>
                    <span class="n">cur</span> <span class="o">+=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="c1">#count default -&gt; 0</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="n">c</span><span class="p">[</span><span class="n">cur</span> <span class="o">-</span> <span class="n">target</span><span class="p">]</span>
                    <span class="c1">#current cur encounters +1</span>
                    <span class="n">c</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Bounded Blocking Queue</title>
			<link>https://jasonyangshadow.win/posts/design-bounded-blocking-queue/</link>
			<pubDate>Fri, 20 Mar 2020 12:52:26 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-bounded-blocking-queue/</guid>
			<description>Implement a thread safe bounded blocking queue that has the following methods:
BoundedBlockingQueue(int capacity) The constructor initializes the queue with a maximum capacity. void enqueue(int element) Adds an element to the front of the queue. If the queue is full, the calling thread is blocked until the queue is no longer full. int dequeue() Returns the element at the rear of the queue and removes it. If the queue is empty, the calling thread is blocked until the queue is no longer empty.</description>
			<content type="html"><![CDATA[<p>Implement a thread safe bounded blocking queue that has the following methods:</p>
<p>BoundedBlockingQueue(int capacity) The constructor initializes the queue with a maximum capacity.
void enqueue(int element) Adds an element to the front of the queue. If the queue is full, the calling thread is blocked until the queue is no longer full.
int dequeue() Returns the element at the rear of the queue and removes it. If the queue is empty, the calling thread is blocked until the queue is no longer empty.
int size() Returns the number of elements currently in the queue.
Your implementation will be tested using multiple threads at the same time. Each thread will either be a producer thread that only makes calls to the enqueue method or a consumer thread that only makes calls to the dequeue method. The size method will be called after every test case.</p>
<p>Please do not use built-in implementations of bounded blocking queue as this will not be accepted in an interview.</p>
<p>Example 1:</p>
<pre><code>Input:
1
1
[&quot;BoundedBlockingQueue&quot;,&quot;enqueue&quot;,&quot;dequeue&quot;,&quot;dequeue&quot;,&quot;enqueue&quot;,&quot;enqueue&quot;,&quot;enqueue&quot;,&quot;enqueue&quot;,&quot;dequeue&quot;]
[[2],[1],[],[],[0],[2],[3],[4],[]]

Output:
[1,0,2,2]

Explanation:
Number of producer threads = 1
Number of consumer threads = 1

BoundedBlockingQueue queue = new BoundedBlockingQueue(2);   // initialize the queue with capacity = 2.

queue.enqueue(1);   // The producer thread enqueues 1 to the queue.
queue.dequeue();    // The consumer thread calls dequeue and returns 1 from the queue.
queue.dequeue();    // Since the queue is empty, the consumer thread is blocked.
queue.enqueue(0);   // The producer thread enqueues 0 to the queue. The consumer thread is unblocked and returns 0 from the queue.
queue.enqueue(2);   // The producer thread enqueues 2 to the queue.
queue.enqueue(3);   // The producer thread enqueues 3 to the queue.
queue.enqueue(4);   // The producer thread is blocked because the queue's capacity (2) is reached.
queue.dequeue();    // The consumer thread returns 2 from the queue. The producer thread is unblocked and enqueues 4 to the queue.
queue.size();       // 2 elements remaining in the queue. size() is always called at the end of each test case.
</code></pre><p>Example 2:</p>
<pre><code>Input:
3
4
[&quot;BoundedBlockingQueue&quot;,&quot;enqueue&quot;,&quot;enqueue&quot;,&quot;enqueue&quot;,&quot;dequeue&quot;,&quot;dequeue&quot;,&quot;dequeue&quot;,&quot;enqueue&quot;]
[[3],[1],[0],[2],[],[],[],[3]]

Output:
[1,0,2,1]

Explanation:
Number of producer threads = 3
Number of consumer threads = 4

BoundedBlockingQueue queue = new BoundedBlockingQueue(3);   // initialize the queue with capacity = 3.

queue.enqueue(1);   // Producer thread P1 enqueues 1 to the queue.
queue.enqueue(0);   // Producer thread P2 enqueues 0 to the queue.
queue.enqueue(2);   // Producer thread P3 enqueues 2 to the queue.
queue.dequeue();    // Consumer thread C1 calls dequeue.
queue.dequeue();    // Consumer thread C2 calls dequeue.
queue.dequeue();    // Consumer thread C3 calls dequeue.
queue.enqueue(3);   // One of the producer threads enqueues 3 to the queue.
queue.size();       // 1 element remaining in the queue.

Since the number of threads for producer/consumer is greater than 1, we do not know how the threads will be scheduled in the operating system, even though the input seems to imply the ordering. Therefore, any of the output [1,0,2] or [1,2,0] or [0,1,2] or [0,2,1] or [2,0,1] or [2,1,0] will be accepted.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">threading</span>
<span class="k">class</span> <span class="nc">BoundedBlockingQueue</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">maxsize</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">maxsize</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>

        <span class="c1"># mutex must be held whenever the queue is mutating.  All methods</span>
        <span class="c1"># that acquire mutex must release it before returning.  mutex</span>
        <span class="c1"># is shared between the three conditions, so acquiring and</span>
        <span class="c1"># releasing the conditions also acquires and releases mutex.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mutex</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>

        <span class="c1"># Notify not_empty whenever an item is added to the queue; a</span>
        <span class="c1"># thread waiting to get is notified then.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Condition</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mutex</span><span class="p">)</span>

        <span class="c1"># Notify not_full whenever an item is removed from the queue;</span>
        <span class="c1"># a thread waiting to put is notified then.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Condition</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mutex</span><span class="p">)</span>


    <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s1">&#39;&#39;&#39;Return the approximate size of the queue (not reliable!).&#39;&#39;&#39;</span>
        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">mutex</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">enqueue</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span><span class="p">:</span>
            <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">maxsize</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">dequeue</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span><span class="p">:</span>
            <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">not_empty</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
            <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">not_full</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">item</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Print Immutable Linked List in Reverse</title>
			<link>https://jasonyangshadow.win/posts/print-immutable-linked-list-in-reverse/</link>
			<pubDate>Thu, 19 Mar 2020 16:04:30 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/print-immutable-linked-list-in-reverse/</guid>
			<description>You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:
ImmutableListNode: An interface of immutable linked list, you are given the head of the list. You need to use the following functions to access the linked list (you can&amp;rsquo;t access the ImmutableListNode directly):
ImmutableListNode.printValue(): Print value of the current node. ImmutableListNode.getNext(): Return the next node. The input is only given to initialize the linked list internally.</description>
			<content type="html"><![CDATA[<p>You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:</p>
<p>ImmutableListNode: An interface of immutable linked list, you are given the head of the list.
You need to use the following functions to access the linked list (you can&rsquo;t access the ImmutableListNode directly):</p>
<p>ImmutableListNode.printValue(): Print value of the current node.
ImmutableListNode.getNext(): Return the next node.
The input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.</p>
<p>Follow up:</p>
<p>Could you solve this problem in:</p>
<p>Constant space complexity?
Linear time complexity and less than linear space complexity?</p>
<p>Example 1:</p>
<pre><code>Input: head = [1,2,3,4]
Output: [4,3,2,1]
</code></pre><p>Example 2:</p>
<pre><code>Input: head = [0,-4,-1,3,-5]
Output: [-5,3,-1,-4,0]
</code></pre><p>Example 3:</p>
<pre><code>Input: head = [-2,0,6,4,4,-6]
Output: [-6,4,4,6,0,-2]
</code></pre><p>Constraints:</p>
<p>The length of the linked list is between [1, 1000].
The value of each node in the linked list is between [-1000, 1000].</p>
<p>Time O(n), Space O(n)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># This is the ImmutableListNode&#39;s API interface.</span>
<span class="c1"># You should not implement it, or speculate about its implementation.</span>
<span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># class ImmutableListNode:</span>
<span class="c1">#     def printValue(self) -&gt; None: # print the value of this node.</span>
<span class="c1">#     def getNext(self) -&gt; &#39;ImmutableListNode&#39;: # return the next node.</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">printLinkedListInReverse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="s1">&#39;ImmutableListNode&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="n">next_node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">getNext</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">next_node</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">getNext</span><span class="p">())</span>
            <span class="n">node</span><span class="o">.</span><span class="n">printValue</span><span class="p">()</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="n">head</span><span class="p">)</span>
</code></pre></div><p>Time O(n^2), Space O(1)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># This is the ImmutableListNode&#39;s API interface.</span>
<span class="c1"># You should not implement it, or speculate about its implementation.</span>
<span class="c1"># &#34;&#34;&#34;</span>
<span class="c1"># class ImmutableListNode:</span>
<span class="c1">#     def printValue(self) -&gt; None: # print the value of this node.</span>
<span class="c1">#     def getNext(self) -&gt; &#39;ImmutableListNode&#39;: # return the next node.</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">printLinkedListInReverse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="s1">&#39;ImmutableListNode&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">tail</span><span class="o">=</span><span class="bp">None</span>
        <span class="k">while</span> <span class="n">tail</span><span class="o">!=</span><span class="n">head</span><span class="p">:</span>
            <span class="n">curr</span><span class="o">=</span><span class="n">head</span>
            <span class="k">while</span> <span class="n">curr</span><span class="o">.</span><span class="n">getNext</span><span class="p">()</span><span class="o">!=</span><span class="n">tail</span><span class="p">:</span>
                <span class="n">curr</span><span class="o">=</span><span class="n">curr</span><span class="o">.</span><span class="n">getNext</span><span class="p">()</span>
            <span class="n">tail</span><span class="o">=</span><span class="n">curr</span>
            <span class="n">tail</span><span class="o">.</span><span class="n">printValue</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Compare Strings by Frequency of the Smallest Character</title>
			<link>https://jasonyangshadow.win/posts/compare-strings-by-frequency-of-the-smallest-character/</link>
			<pubDate>Thu, 19 Mar 2020 14:37:45 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/compare-strings-by-frequency-of-the-smallest-character/</guid>
			<description>Let&amp;rsquo;s define a function f(s) over a non-empty string s, which calculates the frequency of the smallest character in s. For example, if s = &amp;ldquo;dcce&amp;rdquo; then f(s) = 2 because the smallest character is &amp;ldquo;c&amp;rdquo; and its frequency is 2.
Now, given string arrays queries and words, return an integer array answer, where each answer[i] is the number of words such that f(queries[i]) &amp;lt; f(W), where W is a word in words.</description>
			<content type="html"><![CDATA[<p>Let&rsquo;s define a function f(s) over a non-empty string s, which calculates the frequency of the smallest character in s. For example, if s = &ldquo;dcce&rdquo; then f(s) = 2 because the smallest character is &ldquo;c&rdquo; and its frequency is 2.</p>
<p>Now, given string arrays queries and words, return an integer array answer, where each answer[i] is the number of words such that f(queries[i]) &lt; f(W), where W is a word in words.</p>
<p>Example 1:</p>
<pre><code>Input: queries = [&quot;cbd&quot;], words = [&quot;zaaaz&quot;]
Output: [1]
Explanation: On the first query we have f(&quot;cbd&quot;) = 1, f(&quot;zaaaz&quot;) = 3 so f(&quot;cbd&quot;) &lt; f(&quot;zaaaz&quot;).
</code></pre><p>Example 2:</p>
<pre><code>Input: queries = [&quot;bbb&quot;,&quot;cc&quot;], words = [&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]
Output: [1,2]
Explanation: On the first query only f(&quot;bbb&quot;) &lt; f(&quot;aaaa&quot;). On the second query both f(&quot;aaa&quot;) and f(&quot;aaaa&quot;) are both &gt; f(&quot;cc&quot;).
</code></pre><p>Constraints:</p>
<ul>
<li>1 &lt;= queries.length &lt;= 2000</li>
<li>1 &lt;= words.length &lt;= 2000</li>
<li>1 &lt;= queries[i].length, words[i].length &lt;= 10</li>
<li>queries[i][j], words[i][j] are English lowercase letters.</li>
</ul>
<p>Here by using bisect to binary search sorted list to find count.
Tutorial on bisect and other data structures.<a href="https://docs.python.org/zh-cn/3.8/library/datatypes.html">https://docs.python.org/zh-cn/3.8/library/datatypes.html</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numSmallerByFrequency</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">queries</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">-</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">q</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">q</span><span class="p">)))</span> <span class="k">for</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">queries</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Repeated Substring Pattern</title>
			<link>https://jasonyangshadow.win/posts/repeated-substring-pattern/</link>
			<pubDate>Wed, 18 Mar 2020 14:11:18 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/repeated-substring-pattern/</guid>
			<description>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.
Example 1:
Input: &amp;quot;abab&amp;quot; Output: True Explanation: It&#39;s the substring &amp;quot;ab&amp;quot; twice. Example 2:
Input: &amp;quot;aba&amp;quot; Output: False Example 3:
Input: &amp;quot;abcabcabcabc&amp;quot; Output: True Explanation: It&#39;s the substring &amp;quot;abc&amp;quot; four times.</description>
			<content type="html"><![CDATA[<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;abab&quot;
Output: True
Explanation: It's the substring &quot;ab&quot; twice.
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;aba&quot;
Output: False
</code></pre><p>Example 3:</p>
<pre><code>Input: &quot;abcabcabcabc&quot;
Output: True
Explanation: It's the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)
</code></pre><p>The maximum length of a &ldquo;repeated&rdquo; substring that you could get from a string would be half it&rsquo;s length
For example, s = &ldquo;abcdabcd&rdquo;, &ldquo;abcd&rdquo; of len = 4, is the repeated substring.
You cannot have a substring &gt;(len(s)/2), that can be repeated.</p>
<p>So, when ss = s + s , we will have at least 4 parts of &ldquo;repeated substring&rdquo; in ss.
(s+s)[1:-1], With this we are removing 1st char and last char =&gt; Out of 4 parts of repeated substring, 2 part will be gone (they will no longer have the same substring).
ss.find(s) != -1, But still we have 2 parts out of which we can make s. And that&rsquo;s how ss should have s, if s has repeated substring.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">repeatedSubstringPattern</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span> <span class="ow">in</span> <span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">s</span><span class="p">)[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Regular Expression Matching</title>
			<link>https://jasonyangshadow.win/posts/regular-expression-matching/</link>
			<pubDate>Wed, 18 Mar 2020 13:43:03 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/regular-expression-matching/</guid>
			<description>Given an input string (s) and a pattern (p), implement regular expression matching with support for &amp;lsquo;.&amp;rsquo; and &amp;lsquo;*&amp;rsquo;.
&amp;lsquo;.&amp;rsquo; Matches any single character. &amp;lsquo;*&amp;rsquo; Matches zero or more of the preceding element. The matching should cover the entire input string (not partial).
Note:
s could be empty and contains only lowercase letters a-z. p could be empty and contains only lowercase letters a-z, and characters like . or *. Example 1:</description>
			<content type="html"><![CDATA[<p>Given an input string (s) and a pattern (p), implement regular expression matching with support for &lsquo;.&rsquo; and &lsquo;*&rsquo;.</p>
<p>&lsquo;.&rsquo; Matches any single character.
&lsquo;*&rsquo; Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).</p>
<p>Note:</p>
<p>s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like . or *.
Example 1:</p>
<pre><code>Input:
s = &quot;aa&quot;
p = &quot;a&quot;
Output: false
Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input:
s = &quot;aa&quot;
p = &quot;a*&quot;
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes &quot;aa&quot;.
</code></pre><p>Example 3:</p>
<pre><code>Input:
s = &quot;ab&quot;
p = &quot;.*&quot;
Output: true
Explanation: &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.
</code></pre><p>Example 4:</p>
<pre><code>Input:
s = &quot;aab&quot;
p = &quot;c*a*b&quot;
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.
</code></pre><p>Example 5:</p>
<pre><code>Input:
s = &quot;mississippi&quot;
p = &quot;mis*is*p*.&quot;
Output: false
</code></pre><p>Detailed explanation on leetcode:
<a href="https://leetcode.com/problems/regular-expression-matching/discuss/5651/Easy-DP-Java-Solution-with-detailed-Explanation">https://leetcode.com/problems/regular-expression-matching/discuss/5651/Easy-DP-Java-Solution-with-detailed-Explanation</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isMatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        
        <span class="c1">#dp[i][j] represents if the first i chars in s can match first j chars in p</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        
        <span class="c1">#empty string matches empty pattern</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        
        <span class="c1">#dp[i][0] = False, as all string could not match empty pattern</span>
        <span class="c1">#dp[0][j] depends on whether the even position contains &#39;*&#39;</span>
        <span class="c1">#e.g. &#34;&#34; match a*, so that p should be even length and even postion should be &#39;*&#39;</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span> <span class="ow">and</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">]:</span>
                <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">ci</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">cj</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                
                <span class="c1">#if ci == cj or cj == &#39;.&#39;</span>
                <span class="c1">#e.g ####a ##a || ####a ##.</span>
                <span class="k">if</span> <span class="n">ci</span> <span class="o">==</span> <span class="n">cj</span> <span class="ow">or</span> <span class="n">cj</span> <span class="o">==</span> <span class="s1">&#39;.&#39;</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">cj</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">:</span>
                        <span class="n">pcj</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
                        <span class="c1"># e.g  #####a ##b*</span>
                        <span class="k">if</span> <span class="n">pcj</span> <span class="o">!=</span> <span class="s1">&#39;.&#39;</span> <span class="ow">and</span> <span class="n">pcj</span> <span class="o">!=</span> <span class="n">ci</span><span class="p">:</span>
                            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
                        <span class="c1">#e.g ######a ####.* || ####a ##a*</span>
                        <span class="k">else</span><span class="p">:</span>
                            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">|</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">|</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Android Unlock Patterns</title>
			<link>https://jasonyangshadow.win/posts/android-unlock-patterns/</link>
			<pubDate>Wed, 18 Mar 2020 12:49:59 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/android-unlock-patterns/</guid>
			<description>Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.
Rules for a valid pattern:
Each pattern must connect at least m keys and at most n keys. All the keys must be distinct. If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern.</description>
			<content type="html"><![CDATA[<p>Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.</p>
<p>Rules for a valid pattern:</p>
<p>Each pattern must connect at least m keys and at most n keys.
All the keys must be distinct.
If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.
The order of keys used matters.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/android-unlock.png" alt="image"></p>
<p>Explanation:</p>
<pre><code>| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |
</code></pre><p>Invalid move: 4 - 1 - 3 - 6
Line 1 - 3 passes through key 2 which had not been selected in the pattern.</p>
<p>Invalid move: 4 - 1 - 9 - 2
Line 1 - 9 passes through key 5 which had not been selected in the pattern.</p>
<p>Valid move: 2 - 4 - 1 - 3 - 6
Line 1 - 3 is valid because it passes through key 2, which had been selected in the pattern</p>
<p>Valid move: 6 - 5 - 4 - 1 - 9 - 2
Line 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.</p>
<p>Example:</p>
<p>Input: m = 1, n = 1
Output: 9</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numberOfPatterns</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">skip</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1">#skip dic, marking skipped item from start to end</span>
        <span class="n">skip</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">4</span>
        <span class="n">skip</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">2</span>
        <span class="n">skip</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">9</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="n">skip</span><span class="p">[(</span><span class="mi">2</span><span class="p">,</span><span class="mi">8</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="n">skip</span><span class="p">[(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="n">skip</span><span class="p">[(</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">6</span>
        <span class="n">skip</span><span class="p">[(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="n">skip</span><span class="p">[(</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">8</span>
        
        <span class="c1">#here we have to use self.res as we need to increase it inside bfs</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">used</span><span class="p">,</span> <span class="n">last</span><span class="p">):</span>
            <span class="c1">#if count &gt;= m which means current used items are larger than required minimum value, meaning that it is a valid choice.</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">used</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">m</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">res</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="c1">#maximum count of nums arrived, should return</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">used</span><span class="p">)</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
                <span class="k">return</span>
            
            <span class="c1">#start from last, let us try any other possible nums</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
                <span class="c1">#j should not be used </span>
                <span class="k">if</span> <span class="n">j</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">used</span><span class="p">:</span>
                    <span class="c1">#sort last,j to min(last,), max(last,j) e.g (7,1) -&gt; (1, 7)</span>
                    <span class="n">edge</span> <span class="o">=</span> <span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">last</span><span class="p">,</span><span class="n">j</span><span class="p">),</span> <span class="nb">max</span><span class="p">(</span><span class="n">last</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
                    <span class="c1">#edge is valid or skip item is valid (1, 9) = 5, where 5 is already inside used items</span>
                    <span class="c1">#valid from last -&gt; j, continue searching other possible solutions</span>
                    <span class="k">if</span> <span class="n">edge</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">skip</span> <span class="ow">or</span> <span class="n">skip</span><span class="p">[</span><span class="n">edge</span><span class="p">]</span> <span class="ow">in</span> <span class="n">used</span><span class="p">:</span>
                        <span class="n">bfs</span><span class="p">(</span><span class="n">used</span> <span class="o">+</span> <span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">j</span><span class="p">)</span>
        
        <span class="c1">#as we need all possible solutions</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
            <span class="n">bfs</span><span class="p">([</span><span class="n">i</span><span class="p">],</span><span class="n">i</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximal Square</title>
			<link>https://jasonyangshadow.win/posts/maximal-square/</link>
			<pubDate>Wed, 18 Mar 2020 12:01:31 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximal-square/</guid>
			<description>Given a 2D binary matrix filled with 0&amp;rsquo;s and 1&amp;rsquo;s, find the largest square containing only 1&amp;rsquo;s and return its area.
Example:
Input: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4 Explanation: To appy DP, we define the state as the maximal size (square = size * size) of the square that can be formed till point (i, j), denoted as dp[i][j].</description>
			<content type="html"><![CDATA[<p>Given a 2D binary matrix filled with 0&rsquo;s and 1&rsquo;s, find the largest square containing only 1&rsquo;s and return its area.</p>
<p>Example:</p>
<pre><code>Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4
</code></pre><h3 id="explanation">Explanation:</h3>
<p>To appy DP, we define the state as the maximal size (square = size * size) of the square that can be formed till point (i, j), denoted as dp[i][j].</p>
<p>For the topmost row (i = 0) and the leftmost column (j = 0), we have dp[i][j] = matrix[i][j] - &lsquo;0&rsquo;, meaning that it can at most form a square of size 1 when the matrix has a &lsquo;1&rsquo; in that cell.</p>
<p>When i &gt; 0 and j &gt; 0, if matrix[i][j] = &lsquo;0&rsquo;, then dp[i][j] = 0 since no square will be able to contain the &lsquo;0&rsquo; at that cell. If matrix[i][j] = &lsquo;1&rsquo;, we will have dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1, which means that the square will be limited by its left, upper and upper-left neighbors.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maximalSquare</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">matrix</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;0&#39;</span> <span class="k">else</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">m</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">dp</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span> <span class="o">**</span><span class="mi">2</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Basic Calculator</title>
			<link>https://jasonyangshadow.win/posts/basic-calculator/</link>
			<pubDate>Wed, 18 Mar 2020 08:26:33 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/basic-calculator/</guid>
			<description>Implement a basic calculator to evaluate a simple expression string.
The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .
Example 1:
Input: &amp;quot;1 + 1&amp;quot; Output: 2 Example 2:
Input: &amp;quot; 2-1 + 2 &amp;quot; Output: 3 Example 3:
Input: &amp;quot;(1+(4+5+2)-3)+(6+8)&amp;quot; Output: 23 Note:
 You may assume that the given expression is always valid. Do not use the eval built-in library function.</description>
			<content type="html"><![CDATA[<p>Implement a basic calculator to evaluate a simple expression string.</p>
<p>The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .</p>
<p>Example 1:</p>
<pre><code>Input: &quot;1 + 1&quot;
Output: 2
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot; 2-1 + 2 &quot;
Output: 3
</code></pre><p>Example 3:</p>
<pre><code>Input: &quot;(1+(4+5+2)-3)+(6+8)&quot;
Output: 23
</code></pre><p>Note:</p>
<ul>
<li>You may assume that the given expression is always valid.</li>
<li>Do not use the eval built-in library function.</li>
</ul>
<p>This algorithm expands all operators.
e.g. (1 - ( 2 - 3)) = 1 - 2 + 3</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">calculate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1">#ops saves the operators before &#39;(&#39;</span>
        <span class="n">ops</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">is_positive</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">isdigit</span><span class="p">():</span>
                <span class="c1">#process 23</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1">#calculate current total value</span>
                <span class="c1"># (1 + (2 - 3))</span>
                <span class="c1"># total = 1 + 2 * is_positive(1) * ops[-1](1)</span>
                <span class="n">total</span> <span class="o">+=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">is_positive</span> <span class="o">*</span> <span class="n">ops</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;+&#39;</span><span class="p">:</span>
                    <span class="n">is_positive</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;-&#39;</span><span class="p">:</span>
                    <span class="n">is_positive</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
                <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span><span class="p">:</span>
                    <span class="c1">#already updated the latest value, pop operator in previous (</span>
                    <span class="n">ops</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span><span class="p">:</span>
                    <span class="c1">#append current operator, and it is affected by previous operator before previous (</span>
                    <span class="c1"># e.g (1 + (1 + (3 - 4)))</span>
                    <span class="n">ops</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ops</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">is_positive</span><span class="p">)</span>
                    <span class="n">is_positive</span> <span class="o">=</span> <span class="mi">1</span>

        <span class="n">total</span> <span class="o">+=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">is_positive</span> <span class="o">*</span> <span class="n">ops</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">total</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Plus One Linked List</title>
			<link>https://jasonyangshadow.win/posts/plus-one-linked-list/</link>
			<pubDate>Tue, 17 Mar 2020 11:50:01 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/plus-one-linked-list/</guid>
			<description>Given a non-negative integer represented as non-empty a singly linked list of digits, plus one to the integer.
You may assume the integer do not contain any leading zero, except the number 0 itself.
The digits are stored such that the most significant digit is at the head of the list.
Example :
Input: [1,2,3] Output: [1,2,4] # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.</description>
			<content type="html"><![CDATA[<p>Given a non-negative integer represented as non-empty a singly linked list of digits, plus one to the integer.</p>
<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>
<p>The digits are stored such that the most significant digit is at the head of the list.</p>
<p>Example :</p>
<pre><code>Input: [1,2,3]
Output: [1,2,4]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for singly-linked list.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.next = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">plusOne</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
            <span class="n">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">cur</span><span class="o">.</span><span class="n">val</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
            
        <span class="n">newval</span> <span class="o">=</span> <span class="n">val</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="c1">#here we have to check if another node needs to be created</span>
        <span class="c1">#e.g 999 + 1 = 1000</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">newval</span><span class="p">))</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">val</span><span class="p">)):</span>
            <span class="c1">#we need to add new nods</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">newval</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
            <span class="n">node</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">node</span><span class="p">)</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">node</span>
            
        <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="n">node</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">newval</span> <span class="o">%</span> <span class="mi">10</span>
            <span class="n">newval</span> <span class="o">=</span> <span class="n">newval</span> <span class="o">//</span><span class="mi">10</span>
        
        <span class="k">return</span> <span class="n">head</span>
</code></pre></div><p>Another Solution:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">plusOne</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :type head: ListNode
</span><span class="s2">        :rtype: ListNode
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">dummy</span><span class="o">=</span><span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">dummy</span><span class="o">.</span><span class="n">next</span><span class="o">=</span><span class="n">head</span>
        
        <span class="n">i</span><span class="o">=</span><span class="n">dummy</span>
        <span class="n">start</span><span class="o">=</span><span class="n">dummy</span>
        
        <span class="k">while</span> <span class="n">i</span><span class="o">.</span><span class="n">next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">.</span><span class="n">next</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">val</span><span class="o">!=</span><span class="mi">9</span><span class="p">:</span>
                <span class="n">start</span><span class="o">=</span><span class="n">i</span>
        <span class="c1">#preivous index for rank</span>
        <span class="c1">#e.g 19 start = 1 i = 9</span>
        <span class="n">start</span><span class="o">.</span><span class="n">val</span><span class="o">+=</span><span class="mi">1</span>
        <span class="c1">#rank</span>
        <span class="k">while</span> <span class="n">start</span><span class="o">.</span><span class="n">next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">start</span><span class="o">=</span><span class="n">start</span><span class="o">.</span><span class="n">next</span>
            <span class="n">start</span><span class="o">.</span><span class="n">val</span><span class="o">=</span><span class="mi">0</span>
        <span class="c1">#set all following index to 0</span>
        <span class="k">if</span> <span class="n">dummy</span><span class="o">.</span><span class="n">val</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="n">next</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">dummy</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Hashset</title>
			<link>https://jasonyangshadow.win/posts/design-hashset/</link>
			<pubDate>Tue, 17 Mar 2020 11:10:52 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-hashset/</guid>
			<description>Design a HashSet without using any built-in hash table libraries.
To be specific, your design should include these functions:
add(value): Insert a value into the HashSet. contains(value) : Return whether the value exists in the HashSet or not. remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.
Example:
MyHashSet hashSet = new MyHashSet(); hashSet.add(1); hashSet.add(2); hashSet.contains(1); // returns true hashSet.contains(3); // returns false (not found) hashSet.</description>
			<content type="html"><![CDATA[<p>Design a HashSet without using any built-in hash table libraries.</p>
<p>To be specific, your design should include these functions:</p>
<p>add(value): Insert a value into the HashSet.
contains(value) : Return whether the value exists in the HashSet or not.
remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.</p>
<p>Example:</p>
<pre><code>MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // returns true
hashSet.contains(3);    // returns false (not found)
hashSet.add(2);          
hashSet.contains(2);    // returns true
hashSet.remove(2);          
hashSet.contains(2);    // returns false (already removed)
</code></pre><p>Note:</p>
<p>All values will be in the range of [0, 1000000].
The number of operations will be in the range of [1, 10000].
Please do not use the built-in HashSet library.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">MyHashSet</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">10001</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">bucket</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">bucket</span><span class="p">,</span> <span class="n">idx</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_index</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">idx</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">bucket</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">bucket</span><span class="p">,</span> <span class="n">idx</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_index</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">bucket</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">contains</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Returns true if this set contains the specified element
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">idx</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_index</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">idx</span> <span class="o">&gt;=</span> <span class="mi">0</span>
        
    <span class="k">def</span> <span class="nf">_hash</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">key</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
    
    <span class="k">def</span> <span class="nf">_index</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="nb">hash</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_hash</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">bucket</span><span class="p">[</span><span class="nb">hash</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">bucket</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">bucket</span><span class="p">,</span> <span class="n">i</span>
        <span class="k">return</span> <span class="n">bucket</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
        


<span class="c1"># Your MyHashSet object will be instantiated and called as such:</span>
<span class="c1"># obj = MyHashSet()</span>
<span class="c1"># obj.add(key)</span>
<span class="c1"># obj.remove(key)</span>
<span class="c1"># param_3 = obj.contains(key)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Path Sum 2</title>
			<link>https://jasonyangshadow.win/posts/path-sum-2/</link>
			<pubDate>Tue, 17 Mar 2020 10:25:27 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/path-sum-2/</guid>
			<description>Given a binary tree and a sum, find all root-to-leaf paths where each path&amp;rsquo;s sum equals the given sum.
Note: A leaf is a node with no children.
Example:
Given the below binary tree and sum = 22,
 5 / \ 4 8 / / \ 11 13 4 / \ / \ 7 2 5 1 Return:
[ [5,4,11,2], [5,8,4,5] ] # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.</description>
			<content type="html"><![CDATA[<p>Given a binary tree and a sum, find all root-to-leaf paths where each path&rsquo;s sum equals the given sum.</p>
<p>Note: A leaf is a node with no children.</p>
<p>Example:</p>
<p>Given the below binary tree and sum = 22,</p>
<pre><code>      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
</code></pre><p>Return:</p>
<pre><code>[
   [5,4,11,2],
   [5,8,4,5]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">pathSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="nb">sum</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="ow">and</span> <span class="nb">sum</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[[</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">]]</span>
        
        <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pathSum</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="nb">sum</span><span class="o">-</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">pathSum</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="nb">sum</span><span class="o">-</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="p">[[</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">]</span> <span class="o">+</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">tmp</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Minimum Height Trees</title>
			<link>https://jasonyangshadow.win/posts/minimum-height-trees/</link>
			<pubDate>Tue, 17 Mar 2020 09:52:40 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/minimum-height-trees/</guid>
			<description>For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.
Format The graph contains n nodes which are labeled from 0 to n - 1.</description>
			<content type="html"><![CDATA[<p>For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.</p>
<p>Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).</p>
<p>You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.</p>
<p>Example 1 :</p>
<pre><code>Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3 

Output: [1]
</code></pre><p>Example 2 :</p>
<pre><code>Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5 

Output: [3, 4]
</code></pre><p>Note:</p>
<ul>
<li>According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”</li>
<li>The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</li>
</ul>
<p><img src="https://leetcode.com/uploads/files/1469152741497-1463645059503_1214297289.jpg" alt="image"></p>
<p>Remove leaves until the last one/two</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMinHeightTrees</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">edges</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        
        <span class="n">adj</span> <span class="o">=</span> <span class="p">[</span><span class="nb">set</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="n">edges</span><span class="p">:</span>
            <span class="n">adj</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
            
        <span class="n">leaves</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>

        <span class="c1">#only 1/2 nodes left </span>
        <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">n</span> <span class="o">-=</span> <span class="nb">len</span><span class="p">(</span><span class="n">leaves</span><span class="p">)</span>
            <span class="n">newleaves</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">leaves</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="n">adj</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="n">newleaves</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
            <span class="n">leaves</span> <span class="o">=</span> <span class="n">newleaves</span>
        <span class="k">return</span> <span class="n">leaves</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Best Time to Buy and Sell Stock With Cooldown</title>
			<link>https://jasonyangshadow.win/posts/best-time-to-buy-and-sell-stock-with-cooldown/</link>
			<pubDate>Tue, 17 Mar 2020 08:27:06 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/best-time-to-buy-and-sell-stock-with-cooldown/</guid>
			<description>Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</description>
			<content type="html"><![CDATA[<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p>
<p>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:</p>
<pre><code>Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]
</code></pre><p>Explanation:
On any i-th day, we can buy, sell or cooldown</p>
<p>buy[i]: The maximum profit can be made if the first i days end with buy or wait. E.g &ldquo;buy, sell, buy&rdquo; or &ldquo;buy, cooldown, cooldown&rdquo;
sell[i]: The maximum profit can be made if the first i days end with sell or wait. E.g &ldquo;buy, sell, buy, sell&rdquo; or &ldquo;buy, sell, cooldown, cooldown&rdquo;
price: prices[i - 1], which is the stock price of the i-th day</p>
<p>To calculate sell[i]:
If we sell on the i-th day, the maximum profit is buy[i - 1] + price, because we have to buy before we can sell.
If we cooldown on the i-th day, the maximum profit is same as sell[i - 1] since we did not do anything on the i-th day.
So sell[i] is the larger one of (buy[i - 1] + price, sell[i - 1])</p>
<p>To calculate buy[i]:
If we buy on the i-th day, the maximum profit is sell[i - 2] - price, because on the (i-1)th day we can only cooldown.
If we cooldown on the i-th day, the maximum profit is same as buy[i - 1] since we did not do anything on the i-th day.
So sell[i] is the larger one of (sell[i - 2] - price, buy[i - 1])</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prices</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">prices</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="n">buy</span><span class="p">,</span> <span class="n">sell</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        
        <span class="n">buy</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">prices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">price</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">buy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">buy</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">sell</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="n">price</span><span class="p">)</span>
            <span class="n">sell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">sell</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">buy</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">price</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">sell</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)])</span>
</code></pre></div><p>Another good way to understand this problem is from this explanation:
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75928/Share-my-DP-solution-(By-State-Machine-Thinking)">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75928/Share-my-DP-solution-(By-State-Machine-Thinking)</a>
<img src="https://assets.leetcode.com/users/npvinhphat/image_1560663201.png" alt="image"><br>
There are three states, according to the action that you can take.</p>
<p>Hence, from there, you can now the profit at a state at time i as:</p>
<pre><code>s0[i] = max(s0[i - 1], s2[i - 1]); // Stay at s0, or rest from s2
s1[i] = max(s1[i - 1], s0[i - 1] - prices[i]); // Stay at s1, or buy from s0
s2[i] = s1[i - 1] + prices[i]; // Only one way from s1
Then, you just find the maximum of s0[n] and s2[n], since they will be the maximum profit we need (No one can buy stock and left with more profit that sell right :) )
</code></pre><p>Define base case:</p>
<pre><code>s0[0] = 0; // At the start, you don't have any stock if you just rest
s1[0] = -prices[0]; // After buy, you should have -prices[0] profit. Be positive!
s2[0] = INT_MIN; // Lower base case
Here is the code :D
</code></pre><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
<span class="kd">public</span><span class="o">:</span>
	<span class="kt">int</span> <span class="nf">maxProfit</span><span class="o">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">prices</span><span class="o">){</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="nf">s0</span><span class="o">(</span><span class="n">prices</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">0</span><span class="o">);</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="nf">s1</span><span class="o">(</span><span class="n">prices</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">0</span><span class="o">);</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="nf">s2</span><span class="o">(</span><span class="n">prices</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">0</span><span class="o">);</span>
		<span class="n">s1</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">prices</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
		<span class="n">s0</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
		<span class="n">s2</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">INT_MIN</span><span class="o">;</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prices</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">s0</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">max</span><span class="o">(</span><span class="n">s0</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">1</span><span class="o">],</span> <span class="n">s2</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">1</span><span class="o">]);</span>
			<span class="n">s1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">max</span><span class="o">(</span><span class="n">s1</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">1</span><span class="o">],</span> <span class="n">s0</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
			<span class="n">s2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">s1</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">max</span><span class="o">(</span><span class="n">s0</span><span class="o">[</span><span class="n">prices</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="n">1</span><span class="o">],</span> <span class="n">s2</span><span class="o">[</span><span class="n">prices</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="n">1</span><span class="o">]);</span>
	<span class="o">}</span>
<span class="o">};</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prices</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="n">canbuy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span>
        <span class="n">cansell</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span>
        <span class="n">canrest</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span>
        
        <span class="n">canbuy</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">cansell</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">prices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">canrest</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;-inf&#34;</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)):</span>
            <span class="n">canbuy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">canbuy</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">canrest</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="n">cansell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">cansell</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">canbuy</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">canrest</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cansell</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">canbuy</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">canrest</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Word Ladder 2</title>
			<link>https://jasonyangshadow.win/posts/word-ladder-2/</link>
			<pubDate>Mon, 16 Mar 2020 12:49:20 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/word-ladder-2/</guid>
			<description>Given two words (beginWord and endWord), and a dictionary&amp;rsquo;s word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:
Only one letter can be changed at a time Each transformed word must exist in the word list. Note that beginWord is not a transformed word. Note:
 Return an empty list if there is no such transformation sequence. All words have the same length. All words contain only lowercase alphabetic characters.</description>
			<content type="html"><![CDATA[<p>Given two words (beginWord and endWord), and a dictionary&rsquo;s word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:</p>
<p>Only one letter can be changed at a time
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:</p>
<ol>
<li>Return an empty list if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume beginWord and endWord are non-empty and are not the same.
Example 1:</li>
</ol>
<pre><code>Input:
beginWord = &quot;hit&quot;,
endWord = &quot;cog&quot;,
wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]

Output:
[
  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],
  [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]
]
</code></pre><p>Example 2:</p>
<pre><code>Input:
beginWord = &quot;hit&quot;
endWord = &quot;cog&quot;
wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]

Output: []

Explanation: The endWord &quot;cog&quot; is not in wordList, therefore no possible transformation.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findLadders</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">beginWord</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">endWord</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">wordList</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]]:</span>
        <span class="k">if</span> <span class="n">endWord</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">wordList</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    
        <span class="n">wordSet</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">wordList</span><span class="p">)</span> <span class="c1"># faster checks against dictionary</span>
        <span class="n">layer</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">layer</span><span class="p">[</span><span class="n">beginWord</span><span class="p">]</span> <span class="o">=</span> <span class="p">[[</span><span class="n">beginWord</span><span class="p">]]</span> <span class="c1"># stores current word and all possible sequences how we got to it</span>

        <span class="k">while</span> <span class="n">layer</span><span class="p">:</span>
            <span class="n">newlayer</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span> <span class="c1"># returns [] on missing keys, just to simplify code</span>
            <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">layer</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">endWord</span><span class="p">:</span> 
                    <span class="k">return</span> <span class="n">layer</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="c1"># return all found sequences</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span> <span class="c1"># change every possible letter and check if it&#39;s in dictionary</span>
                    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="s1">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span><span class="p">:</span>
                        <span class="n">newWord</span> <span class="o">=</span>  <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
                        <span class="k">if</span> <span class="n">newWord</span> <span class="ow">in</span> <span class="n">wordSet</span><span class="p">:</span>
                            <span class="n">newlayer</span><span class="p">[</span><span class="n">newWord</span><span class="p">]</span> <span class="o">+=</span> <span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="p">[</span><span class="n">newWord</span><span class="p">]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">layer</span><span class="p">[</span><span class="n">word</span><span class="p">]]</span> <span class="c1"># add new word to all sequences and form new layer element</span>
            <span class="n">wordSet</span> <span class="o">-=</span> <span class="nb">set</span><span class="p">(</span><span class="n">newlayer</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span> <span class="c1"># remove from dictionary to prevent loops</span>
            <span class="n">layer</span> <span class="o">=</span> <span class="n">newlayer</span> <span class="c1"># move down to new layer</span>

        <span class="k">return</span> <span class="p">[]</span>
</code></pre></div><p>newlayer is a data structure like this:</p>
<pre><code>{'hit': [['hit']]}
defaultdict(&lt;class 'list'&gt;, {'hot': [['hit', 'hot']]})
defaultdict(&lt;class 'list'&gt;, {'dot': [['hit', 'hot', 'dot']], 'lot': [['hit', 'hot', 'lot']]})
defaultdict(&lt;class 'list'&gt;, {'dog': [['hit', 'hot', 'dot', 'dog']], 'log': [['hit', 'hot', 'lot', 'log']]})
defaultdict(&lt;class 'list'&gt;, {'cog': [['hit', 'hot', 'dot', 'dog', 'cog'], ['hit', 'hot', 'lot', 'log', 'cog']]})
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Ransom Note</title>
			<link>https://jasonyangshadow.win/posts/ransom-note/</link>
			<pubDate>Mon, 16 Mar 2020 11:39:12 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/ransom-note/</guid>
			<description>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.
Each letter in the magazine string can only be used once in your ransom note.
Note: You may assume that both strings contain only lowercase letters.
canConstruct(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;) -&amp;gt; false canConstruct(&amp;quot;aa&amp;quot;, &amp;quot;ab&amp;quot;) -&amp;gt; false canConstruct(&amp;quot;aa&amp;quot;, &amp;quot;aab&amp;quot;) -&amp;gt; true Explanation</description>
			<content type="html"><![CDATA[<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>
<p>Each letter in the magazine string can only be used once in your ransom note.</p>
<p>Note:
You may assume that both strings contain only lowercase letters.</p>
<pre><code>canConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false
canConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false
canConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true
</code></pre><p><strong>Explanation</strong><br>
Taking the count of ransomNote and subtracting it with the count of magazine. IF it gets completely subtracted -&gt; Ransomnote is contained in magazine. <br>
i.e  Counter(&lsquo;aa&rsquo;) - Counter(&lsquo;aab&rsquo;) = Counter();<br>
Returning a not with it will return the desired value.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">canConstruct</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ransomNote</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">magazine</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="ow">not</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">ransomNote</span><span class="p">)</span> <span class="o">-</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">magazine</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Serialize and Deserialize N-ary Tree</title>
			<link>https://jasonyangshadow.win/posts/serialize-and-deserialize-nary-tree/</link>
			<pubDate>Mon, 16 Mar 2020 11:15:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/serialize-and-deserialize-nary-tree/</guid>
			<description>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children.</description>
			<content type="html"><![CDATA[<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>
<p>Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>
<p>For example, you may serialize the following 3-ary tree
<img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="image">
as [1 [3[5 6] 2 4]]. Note that this is just an example, you do not necessarily need to follow this format.</p>
<p>Or you can follow LeetCode&rsquo;s level order traversal serialization format, where each group of children is separated by the null value.
<img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" alt="image">
For example, the above tree may be serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].</p>
<p>You do not necessarily need to follow the above suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.</p>
<p>Constraints:</p>
<ul>
<li>The height of the n-ary tree is less than or equal to 1000</li>
<li>The total number of nodes is between [0, 10^4]</li>
<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># Definition for a Node.
</span><span class="s2">class Node(object):
</span><span class="s2">    def __init__(self, val=None, children=None):
</span><span class="s2">        self.val = val
</span><span class="s2">        self.children = children
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="k">class</span> <span class="nc">Codec</span><span class="p">:</span>
    <span class="c1">#output:</span>
    <span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="c1"># 6 # # 2 # 4 # #</span>
    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="s1">&#39;Node&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;Encodes a tree to a single string.
</span><span class="s2">        
</span><span class="s2">        :type root: Node
</span><span class="s2">        :rtype: str
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">serial</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">def</span> <span class="nf">preorder</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">serial</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">))</span>
            <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">root</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
                <span class="n">preorder</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
            
            <span class="n">serial</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">)</span>
        
        <span class="n">preorder</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">serial</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;Node&#39;</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;Decodes your encoded data to tree.
</span><span class="s2">        
</span><span class="s2">        :type data: str
</span><span class="s2">        :rtype: Node
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        
        <span class="n">tokens</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">tokens</span><span class="o">.</span><span class="n">popleft</span><span class="p">()),</span> <span class="p">[])</span>
        
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">tokens</span><span class="p">:</span>
                <span class="k">return</span>
            
            <span class="k">while</span> <span class="n">tokens</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;#&#39;</span><span class="p">:</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
                <span class="n">child</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="p">[])</span>
                <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
                <span class="n">helper</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
            
            <span class="n">tokens</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
        
        <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">root</span>
        

<span class="c1"># Your Codec object will be instantiated and called as such:</span>
<span class="c1"># codec = Codec()</span>
<span class="c1"># codec.deserialize(codec.serialize(root))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Duplicate Substring</title>
			<link>https://jasonyangshadow.win/posts/longest-duplicate-substring/</link>
			<pubDate>Mon, 16 Mar 2020 10:21:26 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-duplicate-substring/</guid>
			<description>Given a string S, consider all duplicated substrings: (contiguous) substrings of S that occur 2 or more times. (The occurrences may overlap.)
Return any duplicated substring that has the longest possible length. (If S does not have a duplicated substring, the answer is &amp;ldquo;&amp;rdquo;.)
Example 1:
Input: &amp;quot;banana&amp;quot; Output: &amp;quot;ana&amp;quot; Example 2:
Input: &amp;quot;abcd&amp;quot; Output: &amp;quot;&amp;quot; Note:
 2 &amp;lt;= S.length &amp;lt;= 10^5 S consists of lowercase English letters.  Explanation Binary search the length of longest duplicate substring and call the help function test(L).</description>
			<content type="html"><![CDATA[<p>Given a string S, consider all duplicated substrings: (contiguous) substrings of S that occur 2 or more times.  (The occurrences may overlap.)</p>
<p>Return any duplicated substring that has the longest possible length.  (If S does not have a duplicated substring, the answer is &ldquo;&rdquo;.)</p>
<p>Example 1:</p>
<pre><code>Input: &quot;banana&quot;
Output: &quot;ana&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;abcd&quot;
Output: &quot;&quot;
</code></pre><p>Note:</p>
<ol>
<li>2 &lt;= S.length &lt;= 10^5</li>
<li>S consists of lowercase English letters.</li>
</ol>
<h3 id="explanation">Explanation</h3>
<p>Binary search the length of longest duplicate substring and call the help function test(L).<br>
test(L) slide a window of length L,<br>
rolling hash the string in this window,<br>
record the seen string in a hashset,<br>
and try to find duplicated string.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestDupSubstring</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">S</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">A</span> <span class="o">=</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">S</span><span class="p">]</span>
        <span class="n">mod</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="mi">63</span> <span class="o">-</span> <span class="mi">1</span>
        
        <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">L</span><span class="p">):</span>
            <span class="n">p</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">26</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="mi">26</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span><span class="p">,</span> <span class="n">A</span><span class="p">[:</span><span class="n">L</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">seen</span> <span class="o">=</span> <span class="p">{</span><span class="n">cur</span><span class="p">}</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)):</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="p">(</span><span class="n">cur</span> <span class="o">*</span> <span class="mi">26</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">L</span><span class="p">]</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span>
                <span class="k">if</span> <span class="n">cur</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span> <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">L</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
                
        <span class="n">res</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">:</span>
            <span class="n">mi</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span><span class="p">;</span>
            <span class="n">pos</span> <span class="o">=</span> <span class="n">test</span><span class="p">(</span><span class="n">mi</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">pos</span><span class="p">:</span>
                <span class="n">lo</span> <span class="o">=</span> <span class="n">mi</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">pos</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">hi</span> <span class="o">=</span> <span class="n">mi</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">S</span><span class="p">[</span><span class="n">res</span><span class="p">:</span><span class="n">res</span> <span class="o">+</span> <span class="n">lo</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>POJ 1050 to the Max</title>
			<link>https://jasonyangshadow.win/posts/poj-1050-to-the-max/</link>
			<pubDate>Mon, 16 Mar 2020 09:41:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/poj-1050-to-the-max/</guid>
			<description>Description
Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1*1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle. As an example, the maximal sub-rectangle of the array: 0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 is in the lower left corner: 9 2 -4 1 -1 8 and has a sum of 15.</description>
			<content type="html"><![CDATA[<p>Description</p>
<p>Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1*1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle. 
As an example, the maximal sub-rectangle of the array: </p>
<p>0 -2 -7 0 
9 2 -6 2 
-4 1 -4 1 
-1 8 0 -2 
is in the lower left corner: </p>
<p>9 2 
-4 1 
-1 8 
and has a sum of 15. 
Input</p>
<p>The input consists of an N * N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N^2 integers separated by whitespace (spaces and newlines). These are the N^2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127].
Output</p>
<p>Output the sum of the maximal sub-rectangle.
Sample Input</p>
<p>4
0 -2 -7 0 9 2 -6 2
-4 1 -4  1 -1</p>
<p>8  0 -2
Sample Output</p>
<p>15
Source</p>
<p>Greater New York 2001</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;iomanip&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#define INF 0xfffffff
</span><span class="cp">#define MAXN 101
</span><span class="cp"></span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">MAXN</span><span class="p">][</span><span class="n">MAXN</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">b</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
<span class="cp">#ifdef ONLINE_JUDGE
</span><span class="cp">#else
</span><span class="cp"></span>    <span class="n">freopen</span><span class="p">(</span><span class="s">&#34;xxx.txt&#34;</span><span class="p">,</span><span class="s">&#34;r&#34;</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
<span class="cp">#endif
</span><span class="cp"></span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span> <span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="c1">//prefix sum on column j
</span><span class="c1"></span>            <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">//start row i
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span> <span class="c1">//end row j
</span><span class="c1"></span>            <span class="n">memset</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">b</span><span class="p">));</span> <span class="c1">// max value from row i-&gt;j, column k
</span><span class="c1"></span>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">];</span>
                <span class="k">else</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">];</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Network Delay Time</title>
			<link>https://jasonyangshadow.win/posts/network-delay-time/</link>
			<pubDate>Mon, 16 Mar 2020 03:37:50 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/network-delay-time/</guid>
			<description>There are N network nodes, labelled 1 to N.
Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.
Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal?</description>
			<content type="html"><![CDATA[<p>There are N network nodes, labelled 1 to N.</p>
<p>Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.</p>
<p>Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png" alt="image"></p>
<p>Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
Output: 2</p>
<p>Note:</p>
<p>N will be in the range [1, 100].
K will be in the range [1, N].
The length of times will be in the range [1, 6000].
All edges times[i] = (u, v, w) will have 1 &lt;= u, v &lt;= N and 0 &lt;= w &lt;= 100.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">networkDelayTime</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">times</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">K</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">t</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)]</span> <span class="o">*</span><span class="n">N</span><span class="p">,</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">),</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span><span class="n">K</span><span class="p">)])</span>
        <span class="k">for</span> <span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">w</span> <span class="ow">in</span> <span class="n">times</span><span class="p">:</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">))</span>
        
        <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
            <span class="n">time</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
            <span class="c1">#time = 0 node = 2</span>
            <span class="k">if</span> <span class="n">time</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
                <span class="n">t</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span>
                <span class="k">for</span> <span class="n">v</span><span class="p">,</span><span class="n">w</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
                    <span class="c1">#list nodes start with node</span>
                    <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">time</span> <span class="o">+</span> <span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">))</span>
        <span class="n">mx</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">mx</span> <span class="k">if</span> <span class="n">mx</span> <span class="o">&lt;</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;inf&#34;</span><span class="p">)</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Next Permutaton</title>
			<link>https://jasonyangshadow.win/posts/next-permutaton/</link>
			<pubDate>Mon, 16 Mar 2020 02:07:31 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/next-permutaton/</guid>
			<description>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place and use only constant extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2 3,2,1 → 1,2,3 1,1,5 → 1,5,1</description>
			<content type="html"><![CDATA[<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>
<p>The replacement must be in-place and use only constant extra memory.</p>
<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>
<p>1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1</p>
<p>The solution is explained in detail in this article.<br>
<a href="https://www.nayuki.io/page/next-lexicographical-permutation-algorithm">https://www.nayuki.io/page/next-lexicographical-permutation-algorithm</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">nextPermutation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify nums in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
        <span class="c1">#find the first nums[i-1] &lt; nums[i] occurance</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c1">#the sequence is descending order</span>
            <span class="n">nums</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
            <span class="k">return</span>
        
        <span class="n">k</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span><span class="mi">1</span>
        <span class="c1">#find the first element greater than previous element</span>
        <span class="k">while</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">]:</span>
            <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
        
        <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
        <span class="c1">#reverse all other following chars, descending order</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>
            <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Longest Common Subsequence</title>
			<link>https://jasonyangshadow.win/posts/longest-common-subsequence/</link>
			<pubDate>Mon, 16 Mar 2020 01:09:20 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/longest-common-subsequence/</guid>
			<description>Given two strings text1 and text2, return the length of their longest common subsequence.
A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, &amp;ldquo;ace&amp;rdquo; is a subsequence of &amp;ldquo;abcde&amp;rdquo; while &amp;ldquo;aec&amp;rdquo; is not). A common subsequence of two strings is a subsequence that is common to both strings.
If there is no common subsequence, return 0.</description>
			<content type="html"><![CDATA[<p>Given two strings text1 and text2, return the length of their longest common subsequence.</p>
<p>A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, &ldquo;ace&rdquo; is a subsequence of &ldquo;abcde&rdquo; while &ldquo;aec&rdquo; is not). A common subsequence of two strings is a subsequence that is common to both strings.</p>
<p>If there is no common subsequence, return 0.</p>
<p>Example 1:</p>
<pre><code>Input: text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; 
Output: 3  
Explanation: The longest common subsequence is &quot;ace&quot; and its length is 3.
</code></pre><p>Example 2:</p>
<pre><code>Input: text1 = &quot;abc&quot;, text2 = &quot;abc&quot;
Output: 3
Explanation: The longest common subsequence is &quot;abc&quot; and its length is 3.
</code></pre><p>Example 3:</p>
<pre><code>Input: text1 = &quot;abc&quot;, text2 = &quot;def&quot;
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
</code></pre><p>Constraints:</p>
<p>1 &lt;= text1.length &lt;= 1000
1 &lt;= text2.length &lt;= 1000
The input strings consist of lowercase English characters only.</p>
<h3 id="solution">Solution:</h3>
<p>dp(i,j) means the longest common subsequence of text1[:i] and text2[:j].
If text1[i]==text2[j], then dp(i,j) should equal dp(i-1,j-1)+1
Otherwise, dp(i,j)=max(dp(i-1,j), dp(i,j-1))</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestCommonSubsequence</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text1</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">text2</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">n</span><span class="p">,</span><span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">text1</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">text2</span><span class="p">)</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">text1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">text2</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>First Missing Positive</title>
			<link>https://jasonyangshadow.win/posts/first-missing-positive/</link>
			<pubDate>Sun, 15 Mar 2020 01:57:57 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/first-missing-positive/</guid>
			<description>Given an unsorted integer array, find the smallest missing positive integer. Example 1: Input: [1,2,0] Output: 3 Example 2: Input: [3,4,-1,1] Output: 2 Example 3: Input: [7,8,9,11,12] Output: 1 Note: Your algorithm should run in O(n) time and uses constant extra space. #solution 1 (nlogn) algorithms class Solution: def firstMissingPositive(self, nums: List[int]) -&amp;gt; int: nums.sort() res = 1 for num in nums: if num == res: res += 1 return</description>
			<content type="html"><![CDATA[<p>Given an unsorted integer array, find the smallest missing positive integer.</p>
<p>Example 1:</p>
<pre><code>Input: [1,2,0]
Output: 3
</code></pre><p>Example 2:</p>
<pre><code>Input: [3,4,-1,1]
Output: 2
</code></pre><p>Example 3:</p>
<pre><code>Input: [7,8,9,11,12]
Output: 1
</code></pre><p>Note:</p>
<p>Your algorithm should run in O(n) time and uses constant extra space.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#solution 1 (nlogn) algorithms</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">firstMissingPositive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">nums</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="n">res</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#solution 2 (n) algorithms</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">firstMissingPositive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">while</span> <span class="mi">0</span><span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">tmp</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span><span class="mi">1</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">tmp</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">tmp</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">print</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span> <span class="o">+</span><span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">+</span><span class="mi">1</span>
</code></pre></div><p>The solution 2 is very hard to understand. There is a detailed explanation here.
<a href="https://www.cnblogs.com/clnchanpin/p/6727065.html">https://www.cnblogs.com/clnchanpin/p/6727065.html</a>
思路：这个题刚開始是没有思路的，难就难在O(n)时间内常数量空间，所以此题较为考察思维敏捷性。其解题核心思想是将数组的第i位存正数i+1。最后再遍历一次就可以。</p>
<p>其它人的思想，我也是看了这个思想自己写的代码。</p>
<p>尽管不能再另外开辟很数级的额外空间，可是能够在输入数组上就地进行swap操作。</p>
<p>思路：交换数组元素。使得数组中第i位存放数值(i+1)。</p>
<p>最后遍历数组，寻找第一个不符合此要求的元素，返回其下标。整个过程须要遍历两次数组，复杂度为O(n)。</p>
<p>下图以题目中给出的第二个样例为例，解说操作过程。</p>
<p><img src="https://images0.cnblogs.com/blog/300640/201304/21220310-d1b03fc59dd24e82b6db34a2cae12111.jpg" alt="image"></p>
<p>妈蛋。这题挣扎好久。</p>
<p>首先思路上，其次临界条件，这题和以下题异曲同工：</p>
<p>n个元素的数组，里面的数都是0~n-1范围内的，求数组中反复的某一个元素。没有返回-1, 要求时间性能O(n) 空间性能O(1)。</p>
<pre><code>代码还是比較简单。例如以下：
public class Solution {
    public int firstMissingPositive(int[] nums) {
        if(nums.length == 0)
            return 1;
        //第i位存放i+1的数值
        for(int i = 0; i &lt; nums.length;i++){
            if(nums[i] &gt; 0){//nums[i]为正数，放在i+1位置
                //假设交换的数据还是大于0且&lt;i+1，则放在合适的位置,且数据不相等，避免死循环
                //这个while是关键，其它都是没有难度的
                while(nums[i] &gt; 0 &amp;&amp; nums[i] &lt; i+1 &amp;&amp; nums[i] != nums[nums[i] -1]){
                    int temp = nums[nums[i]-1];//交换数据
                    nums[nums[i]-1] = nums[i];
                    nums[i] = temp;
                }
            }
        }
        //循环寻找不符合要求的数据，返回
        for(int i = 0; i &lt; nums.length;i++){
            if(nums[i] != i+1){
                return i+1;
            }
        }
        //假设都符合要求，则返回长度+1的值
		return nums.length + 1;
    }
}
</code></pre>]]></content>
		</item>
		
		<item>
			<title>All Nodes Distance K in Binary Tree</title>
			<link>https://jasonyangshadow.win/posts/all-nodes-distance-k-in-binary-tree/</link>
			<pubDate>Sun, 15 Mar 2020 01:45:38 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/all-nodes-distance-k-in-binary-tree/</guid>
			<description>We are given a binary tree (with root node root), a target node, and an integer value K.
Return a list of the values of all nodes that have a distance K from the target node. The answer can be returned in any order.
Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.</description>
			<content type="html"><![CDATA[<p>We are given a binary tree (with root node root), a target node, and an integer value K.</p>
<p>Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.</p>
<p>Example 1:</p>
<p>Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2</p>
<p>Output: [7,4,1]</p>
<p>Explanation:
The nodes that are a distance 2 from the target node (with value 5)
have values 7, 4, and 1.
<img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png" alt="image"></p>
<p>Note that the inputs &ldquo;root&rdquo; and &ldquo;target&rdquo; are actually TreeNodes.
The descriptions of the inputs above are just serializations of these objects.</p>
<p>Note:</p>
<p>The given tree is non-empty.
Each node in the tree has unique values 0 &lt;= node.val &lt;= 500.
The target node is a node in the tree.
0 &lt;= K &lt;= 1000.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">distanceK</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">K</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="c1"># {distance:{node1, node2}}</span>
        <span class="n">conn</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">child</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">parent</span> <span class="ow">and</span> <span class="n">child</span><span class="p">:</span>
                <span class="n">conn</span><span class="p">[</span><span class="n">parent</span><span class="o">.</span><span class="n">val</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">child</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
                <span class="n">conn</span><span class="p">[</span><span class="n">child</span><span class="o">.</span><span class="n">val</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">parent</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">child</span><span class="o">.</span><span class="n">left</span><span class="p">:</span> <span class="n">connect</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="n">child</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">child</span><span class="o">.</span><span class="n">right</span><span class="p">:</span> <span class="n">connect</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="n">child</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
        
        <span class="c1">#defaultdict(&lt;class &#39;list&#39;&gt;, {3: [5, 1], 5: [3, 6, 2], 6: [5], 2: [5, 7, 4], 7: [2], 4: [2], 1: [3, 0, 8], 0: [1], 8: [1]})</span>
        <span class="n">connect</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">root</span><span class="p">)</span>
        
        <span class="n">bfs</span> <span class="o">=</span> <span class="p">[</span><span class="n">target</span><span class="o">.</span><span class="n">val</span><span class="p">]</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">bfs</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
            <span class="n">bfs</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">bfs</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">conn</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">if</span> <span class="n">y</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">]</span>
            <span class="n">seen</span> <span class="o">|=</span> <span class="nb">set</span><span class="p">(</span><span class="n">bfs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">bfs</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>LFU Cache</title>
			<link>https://jasonyangshadow.win/posts/lfu-cache/</link>
			<pubDate>Sun, 15 Mar 2020 01:04:38 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/lfu-cache/</guid>
			<description>Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item.</description>
			<content type="html"><![CDATA[<p>Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put.</p>
<p>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least recently used key would be evicted.</p>
<p>Note that the number of times an item is used is the number of calls to the get and put functions for that item since it was inserted. This number is set to zero when the item is removed.</p>
<p>Follow up:
Could you do both operations in O(1) time complexity?</p>
<p>Example:</p>
<pre><code>LFUCache cache = new LFUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.get(3);       // returns 3.
cache.put(4, 4);    // evicts key 1.
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">LFUCache</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">capacity</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="c1">#e.g {key:[val, freq]}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="c1">#e.g {freq1:[key1, key2, key3], freq2:[keyA, keyB]}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">freq</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cap</span> <span class="o">=</span> <span class="n">capacity</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">cap</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">val</span><span class="p">,</span> <span class="n">freq</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
        <span class="c1">#update freq</span>
        <span class="n">new_freq</span> <span class="o">=</span> <span class="n">freq</span> <span class="o">+</span> <span class="mi">1</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_freq</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">freq</span><span class="p">[</span><span class="n">freq</span><span class="p">]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">freq</span><span class="p">[</span><span class="n">new_freq</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">val</span>

    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">cap</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
            <span class="c1">#update</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cap</span><span class="p">:</span>
                <span class="c1">#evict</span>
                <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">e_val</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">freq</span><span class="o">.</span><span class="n">items</span><span class="p">()):</span>
                    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">e_val</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="c1">#pop out the earlist key</span>
                        <span class="n">e_key</span> <span class="o">=</span> <span class="n">e_val</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
                        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">e_key</span><span class="p">]</span>
                        <span class="k">break</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">value</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">freq</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
                        
        <span class="c1">#update freq</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>


<span class="c1"># Your LFUCache object will be instantiated and called as such:</span>
<span class="c1"># obj = LFUCache(capacity)</span>
<span class="c1"># param_1 = obj.get(key)</span>
<span class="c1"># obj.put(key,value)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Encode and Decode Strings</title>
			<link>https://jasonyangshadow.win/posts/encode-and-decode-strings/</link>
			<pubDate>Sat, 14 Mar 2020 23:11:54 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/encode-and-decode-strings/</guid>
			<description>Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.
Machine 1 (sender) has the function:
string encode(vector&amp;lt;string&amp;gt; strs) { // ... your code return encoded_string; } Machine 2 (receiver) has the function:
vector&amp;lt;string&amp;gt; decode(string s) { //... your code return strs; } So Machine 1 does:
string encoded_string = encode(strs); and Machine 2 does:</description>
			<content type="html"><![CDATA[<p>Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>
<p>Machine 1 (sender) has the function:</p>
<pre><code>string encode(vector&lt;string&gt; strs) {
  // ... your code
  return encoded_string;
}
</code></pre><p>Machine 2 (receiver) has the function:</p>
<pre><code>vector&lt;string&gt; decode(string s) {
  //... your code
  return strs;
}
</code></pre><p>So Machine 1 does:</p>
<pre><code>string encoded_string = encode(strs);
</code></pre><p>and Machine 2 does:</p>
<pre><code>vector&lt;string&gt; strs2 = decode(encoded_string);
</code></pre><p>strs2 in Machine 2 should be the same as strs in Machine 1.</p>
<p>Implement the encode and decode methods.</p>
<p>Note:</p>
<ul>
<li>The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.</li>
<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>
<li>Do not rely on any library method such as eval or serialize methods. You should implement your own encode/decode algorithm.</li>
</ul>
<p>&ldquo;hello world&rdquo; =&gt; &ldquo;5:Hello5:World&rdquo;</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Codec</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">:</span> <span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;Encodes a list of strings to a single string.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%d</span><span class="s1">:&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">strs</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="s2">&#34;&#34;&#34;Decodes a single string to a list of strings.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">strs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">j</span><span class="p">])</span>
            <span class="n">strs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">strs</span>


<span class="c1"># Your Codec object will be instantiated and called as such:</span>
<span class="c1"># codec = Codec()</span>
<span class="c1"># codec.decode(codec.encode(strs))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Missing Ranges</title>
			<link>https://jasonyangshadow.win/posts/missing-ranges/</link>
			<pubDate>Sat, 14 Mar 2020 22:37:40 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/missing-ranges/</guid>
			<description>Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper], return its missing ranges.
Example:
Input: nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99, Output: [&amp;quot;2&amp;quot;, &amp;quot;4-&amp;gt;49&amp;quot;, &amp;quot;51-&amp;gt;74&amp;quot;, &amp;quot;76-&amp;gt;99&amp;quot;] class Solution: def findMissingRanges(self, nums: List[int], lower: int, upper: int) -&amp;gt; List[str]: nums = [lower - 1] + nums + [upper + 1] res = [] for i in range(len(nums) - 1): if nums[i+1] - nums[i] == 2: res.</description>
			<content type="html"><![CDATA[<p>Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper], return its missing ranges.</p>
<p>Example:</p>
<pre><code>Input: nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99,
Output: [&quot;2&quot;, &quot;4-&gt;49&quot;, &quot;51-&gt;74&quot;, &quot;76-&gt;99&quot;]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMissingRanges</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">lower</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">upper</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="n">lower</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span> <span class="o">+</span> <span class="p">[</span><span class="n">upper</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
            <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;-&gt;&#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Tree Maximum Path Sum</title>
			<link>https://jasonyangshadow.win/posts/binary-tree-maximum-path-sum/</link>
			<pubDate>Sat, 14 Mar 2020 01:31:27 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-tree-maximum-path-sum/</guid>
			<description>Given a non-empty binary tree, find the maximum path sum.
For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.
Example 1:
Input: [1,2,3] 1 / \ 2 3 Output: 6 Example 2:
Input: [-10,9,20,null,null,15,7] -10 / \ 9 20 / \ 15 7 Output: 42 # Definition for a binary tree node.</description>
			<content type="html"><![CDATA[<p>Given a non-empty binary tree, find the maximum path sum.</p>
<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p>
<p>Example 1:</p>
<pre><code>Input: [1,2,3]

       1
      / \
     2   3

Output: 6
</code></pre><p>Example 2:</p>
<pre><code>Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxPathSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">find_max</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
            <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">find_max</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">),</span> <span class="n">find_max</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            <span class="n">v</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">,</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span> <span class="o">+</span> <span class="nb">max</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ans</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">v</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">ans</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;-inf&#34;</span><span class="p">)</span>
        <span class="n">find_max</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Accounts Merge</title>
			<link>https://jasonyangshadow.win/posts/accounts-merge/</link>
			<pubDate>Fri, 13 Mar 2020 22:41:21 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/accounts-merge/</guid>
			<description>Given a list accounts, each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.
Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some email that is common to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name.</description>
			<content type="html"><![CDATA[<p>Given a list accounts, each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.</p>
<p>Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some email that is common to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p>
<p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.</p>
<p>Example 1:</p>
<pre><code>Input: 
accounts = [[&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john00@mail.com&quot;], [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john_newyork@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]
Output: [[&quot;John&quot;, 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'],  [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]
Explanation: 
The first and third John's are the same person as they have the common email &quot;johnsmith@mail.com&quot;.
The second John and Mary are different people as none of their email addresses are used by other accounts.
We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.
</code></pre><p>Note:</p>
<p>The length of accounts will be in the range [1, 1000].
The length of accounts[i] will be in the range [1, 10].
The length of accounts[i][j] will be in the range [1, 30].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">accountsMerge</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">accounts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]]:</span>
        <span class="n">visited_accounts</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">accounts</span><span class="p">)</span>
        <span class="n">emails_accounts_map</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1">#reverse search dict</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">account</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">accounts</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">account</span><span class="p">)):</span>
                <span class="n">email</span> <span class="o">=</span> <span class="n">account</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="n">emails_accounts_map</span><span class="p">[</span><span class="n">email</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

        <span class="c1">#i=&gt; index in accounts, emails is a seperated set</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">emails</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">visited_accounts</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="k">return</span>
            <span class="n">visited_accounts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">accounts</span><span class="p">[</span><span class="n">i</span><span class="p">])):</span>
                <span class="n">email</span> <span class="o">=</span> <span class="n">accounts</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
                <span class="n">emails</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">emails_accounts_map</span><span class="p">[</span><span class="n">email</span><span class="p">]:</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">neighbor</span><span class="p">,</span> <span class="n">emails</span><span class="p">)</span>
                    
        <span class="c1"># Perform DFS for accounts and add to results.</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">account</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">accounts</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">visited_accounts</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="k">continue</span>
            <span class="n">name</span><span class="p">,</span> <span class="n">emails</span> <span class="o">=</span> <span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">set</span><span class="p">()</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">emails</span><span class="p">)</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">name</span><span class="p">]</span> <span class="o">+</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">emails</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Circular Queue</title>
			<link>https://jasonyangshadow.win/posts/design-circular-queue/</link>
			<pubDate>Fri, 13 Mar 2020 20:59:34 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-circular-queue/</guid>
			<description>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called &amp;ldquo;Ring Buffer&amp;rdquo;.
One of the benefits of the circular queue is that we can make use of the spaces in front of the queue.</description>
			<content type="html"><![CDATA[<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called &ldquo;Ring Buffer&rdquo;.</p>
<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>
<p>Your implementation should support following operations:</p>
<p>MyCircularQueue(k): Constructor, set the size of the queue to be k.
Front: Get the front item from the queue. If the queue is empty, return -1.
Rear: Get the last item from the queue. If the queue is empty, return -1.
enQueue(value): Insert an element into the circular queue. Return true if the operation is successful.
deQueue(): Delete an element from the circular queue. Return true if the operation is successful.
isEmpty(): Checks whether the circular queue is empty or not.
isFull(): Checks whether the circular queue is full or not.</p>
<p>Example:</p>
<pre><code>MyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3
circularQueue.enQueue(1);  // return true
circularQueue.enQueue(2);  // return true
circularQueue.enQueue(3);  // return true
circularQueue.enQueue(4);  // return false, the queue is full
circularQueue.Rear();  // return 3
circularQueue.isFull();  // return true
circularQueue.deQueue();  // return true
circularQueue.enQueue(4);  // return true
circularQueue.Rear();  // return 4
</code></pre><p>Note:</p>
<p>All values will be in the range of [0, 1000].
The number of operations will be in the range of [1, 1000].
Please do not use the built-in Queue library.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">MyCircularQueue</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here. Set the size of the queue to be k.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">max_size</span> <span class="o">=</span> <span class="n">k</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">k</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        

    <span class="k">def</span> <span class="nf">enQueue</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Insert an element into the circular queue. Return true if the operation is successful.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">max_size</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">tail</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tail</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">max_size</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="bp">True</span>
        

    <span class="k">def</span> <span class="nf">deQueue</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Delete an element from the circular queue. Return true if the operation is successful.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">max_size</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">True</span>
        

    <span class="k">def</span> <span class="nf">Front</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Get the front item from the queue.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">head</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        

    <span class="k">def</span> <span class="nf">Rear</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Get the last item from the queue.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">tail</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        

    <span class="k">def</span> <span class="nf">isEmpty</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Checks whether the circular queue is empty or not.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">isFull</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Checks whether the circular queue is full or not.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">max_size</span>
        


<span class="c1"># Your MyCircularQueue object will be instantiated and called as such:</span>
<span class="c1"># obj = MyCircularQueue(k)</span>
<span class="c1"># param_1 = obj.enQueue(value)</span>
<span class="c1"># param_2 = obj.deQueue()</span>
<span class="c1"># param_3 = obj.Front()</span>
<span class="c1"># param_4 = obj.Rear()</span>
<span class="c1"># param_5 = obj.isEmpty()</span>
<span class="c1"># param_6 = obj.isFull()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find and Replace in String</title>
			<link>https://jasonyangshadow.win/posts/find-and-replace-in-string/</link>
			<pubDate>Fri, 13 Mar 2020 20:02:18 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-and-replace-in-string/</guid>
			<description>To some string S, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).
Each replacement operation has 3 parameters: a starting index i, a source word x and a target word y. The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y. If not, we do nothing.</description>
			<content type="html"><![CDATA[<p>To some string S, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).</p>
<p>Each replacement operation has 3 parameters: a starting index i, a source word x and a target word y.  The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y.  If not, we do nothing.</p>
<p>For example, if we have S = &ldquo;abcd&rdquo; and we have some replacement operation i = 2, x = &ldquo;cd&rdquo;, y = &ldquo;ffff&rdquo;, then because &ldquo;cd&rdquo; starts at position 2 in the original string S, we will replace it with &ldquo;ffff&rdquo;.</p>
<p>Using another example on S = &ldquo;abcd&rdquo;, if we have both the replacement operation i = 0, x = &ldquo;ab&rdquo;, y = &ldquo;eee&rdquo;, as well as another replacement operation i = 2, x = &ldquo;ec&rdquo;, y = &ldquo;ffff&rdquo;, this second operation does nothing because in the original string S[2] = &lsquo;c&rsquo;, which doesn&rsquo;t match x[0] = &lsquo;e&rsquo;.</p>
<p>All these operations occur simultaneously.  It&rsquo;s guaranteed that there won&rsquo;t be any overlap in replacement: for example, S = &ldquo;abc&rdquo;, indexes = [0, 1], sources = [&ldquo;ab&rdquo;,&ldquo;bc&rdquo;] is not a valid test case.</p>
<p>Example 1:</p>
<pre><code>Input: S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;a&quot;,&quot;cd&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]
Output: &quot;eeebffff&quot;
Explanation: &quot;a&quot; starts at index 0 in S, so it's replaced by &quot;eee&quot;.
&quot;cd&quot; starts at index 2 in S, so it's replaced by &quot;ffff&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input: S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;ab&quot;,&quot;ec&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]
Output: &quot;eeecd&quot;
Explanation: &quot;ab&quot; starts at index 0 in S, so it's replaced by &quot;eee&quot;. 
&quot;ec&quot; doesn't starts at index 2 in the original S, so we do nothing.
</code></pre><p>Notes:</p>
<ul>
<li>0 &lt;= indexes.length = sources.length = targets.length &lt;= 100</li>
<li>0 &lt; indexes[i] &lt; S.length &lt;= 1000</li>
<li>All characters in given inputs are lowercase letters.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findReplaceString</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">S</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">indexes</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">sources</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">targets</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">modified</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">indexes</span><span class="p">,</span> <span class="n">sources</span><span class="p">,</span> <span class="n">targets</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">S</span><span class="p">[</span><span class="n">index</span><span class="p">:]</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">modified</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">target</span>
                <span class="c1">#we need to set the following chars into &#34;&#34;, as all str are sperated into seperated char</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">source</span><span class="p">)</span> <span class="o">+</span> <span class="n">index</span><span class="p">):</span>
                    <span class="n">modified</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
        <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">modified</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Implement Rand10 Using Rand7</title>
			<link>https://jasonyangshadow.win/posts/implement-rand10-using-rand7/</link>
			<pubDate>Fri, 13 Mar 2020 18:02:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/implement-rand10-using-rand7/</guid>
			<description>Given a function rand7 which generates a uniform random integer in the range 1 to 7, write a function rand10 which generates a uniform random integer in the range 1 to 10.
Do NOT use system&amp;rsquo;s Math.random().
Example 1:
Input: 1 Output: [7] Example 2:
Input: 2 Output: [8,4] Example 3:
Input: 3 Output: [8,1,10] Note:
rand7 is predefined. Each testcase has one argument: n, the number of times that rand10 is called.</description>
			<content type="html"><![CDATA[<p>Given a function rand7 which generates a uniform random integer in the range 1 to 7, write a function rand10 which generates a uniform random integer in the range 1 to 10.</p>
<p>Do NOT use system&rsquo;s Math.random().</p>
<p>Example 1:</p>
<pre><code>Input: 1
Output: [7]
</code></pre><p>Example 2:</p>
<pre><code>Input: 2
Output: [8,4]
</code></pre><p>Example 3:</p>
<pre><code>Input: 3
Output: [8,1,10]
</code></pre><p>Note:</p>
<p>rand7 is predefined.
Each testcase has one argument: n, the number of times that rand10 is called.</p>
<p>Follow up:</p>
<ul>
<li>What is the expected value for the number of calls to rand7() function?</li>
<li>Could you minimize the number of calls to rand7()?</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The rand7() API is already defined for you.</span>
<span class="c1"># def rand7():</span>
<span class="c1"># @return a random integer in the range 1 to 7</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">rand10</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :rtype: int
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">7</span>
        <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">6</span><span class="p">):</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">rand7</span><span class="p">()</span> <span class="c1">#i = 1,2,3,4,5,6 50% = odd 50% = even</span>
        <span class="n">j</span> <span class="o">=</span> <span class="mi">6</span>
        <span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">):</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">rand7</span><span class="p">()</span> <span class="c1">#i = 1,2,3,4,5 20% = (1,2,3,4,5)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> 
            <span class="k">return</span> <span class="n">j</span> <span class="c1">#0.5 * 0.2 = 1 - 5</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">j</span><span class="o">+</span><span class="mi">5</span> <span class="c1"># 0.5 * 0.2 = 6-10</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Permutations</title>
			<link>https://jasonyangshadow.win/posts/permutations/</link>
			<pubDate>Thu, 12 Mar 2020 22:13:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/permutations/</guid>
			<description>Given a collection of distinct integers, return all possible permutations.
Example:
Input: [1,2,3] Output: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] class Solution: def permute(self, nums: List[int]) -&amp;gt; List[List[int]]: return [[n] +p #n from current nums for i, n in enumerate(nums) #p from nums after removing current i&amp;#39;s element for p in self.permute(nums[:i] + nums[i+1:])] or [[]] </description>
			<content type="html"><![CDATA[<p>Given a collection of distinct integers, return all possible permutations.</p>
<p>Example:</p>
<pre><code>Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">permute</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">return</span> <span class="p">[[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span><span class="n">p</span>
                <span class="c1">#n from current nums</span>
                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
                <span class="c1">#p from nums after removing current i&#39;s element</span>
                <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">permute</span><span class="p">(</span><span class="n">nums</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])]</span> <span class="ow">or</span> <span class="p">[[]]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Combination Sum 2</title>
			<link>https://jasonyangshadow.win/posts/combination-sum-2/</link>
			<pubDate>Thu, 12 Mar 2020 17:35:54 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/combination-sum-2/</guid>
			<description>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
Each number in candidates may only be used once in the combination.
Note:
All numbers (including target) will be positive integers. The solution set must not contain duplicate combinations. Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8, A solution set is: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] Example 2:</description>
			<content type="html"><![CDATA[<p>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p>
<p>Each number in candidates may only be used once in the combination.</p>
<p>Note:</p>
<p>All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:</p>
<pre><code>Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
</code></pre><p>Example 2:</p>
<pre><code>Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">combinationSum2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">candidates</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">candidates</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="c1">#eliminate the duplicates</span>
                <span class="k">if</span> <span class="n">path</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">ret</span><span class="p">:</span>
                    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
                <span class="k">return</span>
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">candidates</span><span class="p">)):</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">candidates</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">path</span> <span class="o">+</span> <span class="p">[</span><span class="n">candidates</span><span class="p">[</span><span class="n">i</span><span class="p">]],</span> <span class="n">res</span><span class="p">)</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[],</span> <span class="n">ret</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Inorder Successor in Bst 2</title>
			<link>https://jasonyangshadow.win/posts/inorder-successor-in-bst-2/</link>
			<pubDate>Thu, 12 Mar 2020 17:08:17 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/inorder-successor-in-bst-2/</guid>
			<description>Given a node in a binary search tree, find the in-order successor of that node in the BST.
If that node has no in-order successor, return null.
The successor of a node is the node with the smallest key greater than node.val.
You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for Node:</description>
			<content type="html"><![CDATA[<p>Given a node in a binary search tree, find the in-order successor of that node in the BST.</p>
<p>If that node has no in-order successor, return null.</p>
<p>The successor of a node is the node with the smallest key greater than node.val.</p>
<p>You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for Node:</p>
<pre><code>class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
</code></pre><p>Follow up:</p>
<p>Could you solve it without looking up any of the node&rsquo;s values?</p>
<p>Example 1: <br>
<img src="https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG" alt="image"></p>
<pre><code>Input: tree = [2,1,3], node = 1
Output: 2
Explanation: 1's in-order successor node is 2. Note that both the node and the return value is of Node type.
</code></pre><p>Example 2:<br>
<img src="https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG" alt="image"></p>
<pre><code>Input: tree = [5,3,6,2,4,null,null,1], node = 6
Output: null
Explanation: There is no in-order successor of the current node, so the answer is null.
</code></pre><p>Example 3:<br>
<img src="https://assets.leetcode.com/uploads/2019/02/02/285_example_34.PNG" alt="image"></p>
<pre><code>Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
Output: 17
</code></pre><p>Example 4:<br>
<img src="https://assets.leetcode.com/uploads/2019/02/02/285_example_34.PNG" alt="image"></p>
<pre><code>Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
Output: 15
</code></pre><p>Example 5:</p>
<pre><code>Input: tree = [0], node = 0
Output: null
</code></pre><p>Constraints:</p>
<ul>
<li>-10^5 &lt;= Node.val &lt;= 10^5</li>
<li>1 &lt;= Number of Nodes &lt;= 10^4</li>
<li>All Nodes will have unique values.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># Definition for a Node.
</span><span class="s2">class Node:
</span><span class="s2">    def __init__(self, val):
</span><span class="s2">        self.val = val
</span><span class="s2">        self.left = None
</span><span class="s2">        self.right = None
</span><span class="s2">        self.parent = None
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">inorderSuccessor</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">:</span> <span class="s1">&#39;Node&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;Node&#39;</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span>
            <span class="k">while</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span>
            <span class="k">return</span> <span class="n">node</span>
        
        <span class="k">while</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span> <span class="ow">and</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span>
        
        <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Convert Binary Search Tree to Sorted Doubly Linked List</title>
			<link>https://jasonyangshadow.win/posts/convert-binary-search-tree-to-sorted-doubly-linked-list/</link>
			<pubDate>Thu, 12 Mar 2020 16:07:37 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/convert-binary-search-tree-to-sorted-doubly-linked-list/</guid>
			<description>Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.
You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.
We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor.</description>
			<content type="html"><![CDATA[<p>Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.</p>
<p>You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.</p>
<p>We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.</p>
<p>Example 1:
<img src="https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png" alt="image">
Input: root = [4,2,5,1,3]<br>
<img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png" alt="image">
Output: [1,2,3,4,5]</p>
<p>Explanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.<br>
<img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturnbst.png" alt="image"></p>
<p>Example 2:</p>
<pre><code>Input: root = [2,1,3]
Output: [1,2,3]
</code></pre><p>Example 3:</p>
<pre><code>Input: root = []
Output: []
Explanation: Input is an empty tree. Output is also an empty Linked List.
</code></pre><p>Example 4:</p>
<pre><code>Input: root = [1]
Output: [1]
</code></pre><p>Constraints:</p>
<ul>
<li>-1000 &lt;= Node.val &lt;= 1000</li>
<li>Node.left.val &lt; Node.val &lt; Node.right.val</li>
<li>All values of Node.val are unique.</li>
<li>0 &lt;= Number of Nodes &lt;= 2000</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># Definition for a Node.
</span><span class="s2">class Node:
</span><span class="s2">    def __init__(self, val, left=None, right=None):
</span><span class="s2">        self.val = val
</span><span class="s2">        self.left = left
</span><span class="s2">        self.right = right
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">treeToDoublyList</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="s1">&#39;Node&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;Node&#39;</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="c1">#ret contains left-most node and right-most node for each merge</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">,</span> <span class="n">node</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
            <span class="c1">#node is the middle node</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
                <span class="c1">#link it with left one</span>
                <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span>
                <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
                <span class="n">node</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span>
                <span class="n">ret</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">ret</span>
        <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="c1">#ret is the left-most and right-mode node of entire binary tree</span>
        <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">ret</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">ret</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Tree Right Side View</title>
			<link>https://jasonyangshadow.win/posts/binary-tree-right-side-view/</link>
			<pubDate>Thu, 12 Mar 2020 15:28:25 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-tree-right-side-view/</guid>
			<description>Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
Example:
Input: [1,2,3,null,5,null,4] Output: [1, 3, 4] Explanation: 1 &amp;lt;--- / \ 2 3 &amp;lt;--- \ \ 5 4 &amp;lt;--- # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.</description>
			<content type="html"><![CDATA[<p>Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.</p>
<p>Example:</p>
<pre><code>Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            &lt;---
 /   \
2     3         &lt;---
 \     \
  5     4       &lt;---
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">rightSideView</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">level</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="c1">#directly overwrite the existing value</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">level</span><span class="p">]</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">dic</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Flatten Binary Tree to Linked List</title>
			<link>https://jasonyangshadow.win/posts/flatten-binary-tree-to-linked-list/</link>
			<pubDate>Thu, 12 Mar 2020 15:17:52 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/flatten-binary-tree-to-linked-list/</guid>
			<description>Given a binary tree, flatten it to a linked list in-place.
For example, given the following tree:
 1 / \ 2 5 / \ \ 3 4 6 The flattened tree should look like:
1 \ 2 \ 3 \ 4 \ 5 \ 6 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def __init__(self): #use self.</description>
			<content type="html"><![CDATA[<p>Given a binary tree, flatten it to a linked list in-place.</p>
<p>For example, given the following tree:</p>
<pre><code>    1
   / \
  2   5
 / \   \
3   4   6
</code></pre><p>The flattened tree should look like:</p>
<pre><code>1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c1">#use self.prev to bakcup current root for future use</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
        
    <span class="k">def</span> <span class="nf">flatten</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify root in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="c1">#find right leaf firstly</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">flatten</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">flatten</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
        
        <span class="c1">#for first leaf, self.prev will be None</span>
        <span class="c1">#for next leaf, the right leaf will be self.leaf which is the previous backup node</span>
        <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">prev</span>
        <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="c1">#set it to first leaf</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">root</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Peeking Iterator</title>
			<link>https://jasonyangshadow.win/posts/peeking-iterator/</link>
			<pubDate>Wed, 11 Mar 2020 20:54:38 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/peeking-iterator/</guid>
			<description>Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation &amp;ndash; it essentially peek() at the element that will be returned by the next call to next().
Example:
Assume that the iterator is initialized to the beginning of the list: [1,2,3]. Call next() gets you 1, the first element in the list. Now you call peek() and it returns 2, the next element.</description>
			<content type="html"><![CDATA[<p>Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation &ndash; it essentially peek() at the element that will be returned by the next call to next().</p>
<p>Example:</p>
<pre><code>Assume that the iterator is initialized to the beginning of the list: [1,2,3].

Call next() gets you 1, the first element in the list.
Now you call peek() and it returns 2, the next element. Calling next() after that still return 2. 
You call next() the final time and it returns 3, the last element. 
Calling hasNext() after that should return false.
</code></pre><p>Follow up: How would you extend your design to be generic and work with all types, not just integer?</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Below is the interface for Iterator, which is already defined for you.</span>
<span class="c1">#</span>
<span class="c1"># class Iterator:</span>
<span class="c1">#     def __init__(self, nums):</span>
<span class="c1">#         &#34;&#34;&#34;</span>
<span class="c1">#         Initializes an iterator object to the beginning of a list.</span>
<span class="c1">#         :type nums: List[int]</span>
<span class="c1">#         &#34;&#34;&#34;</span>
<span class="c1">#</span>
<span class="c1">#     def hasNext(self):</span>
<span class="c1">#         &#34;&#34;&#34;</span>
<span class="c1">#         Returns true if the iteration has more elements.</span>
<span class="c1">#         :rtype: bool</span>
<span class="c1">#         &#34;&#34;&#34;</span>
<span class="c1">#</span>
<span class="c1">#     def next(self):</span>
<span class="c1">#         &#34;&#34;&#34;</span>
<span class="c1">#         Returns the next element in the iteration.</span>
<span class="c1">#         :rtype: int</span>
<span class="c1">#         &#34;&#34;&#34;</span>

<span class="k">class</span> <span class="nc">PeekingIterator</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">iterator</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        :type iterator: Iterator
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">iter</span> <span class="o">=</span> <span class="n">iterator</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">iter</span><span class="o">.</span><span class="n">next</span><span class="p">()</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">iter</span><span class="o">.</span><span class="n">hasNext</span><span class="p">()</span> <span class="k">else</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">peek</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Returns the next element in the iteration without advancing the iterator.
</span><span class="s2">        :rtype: int
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tmp</span>
        

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :rtype: int
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tmp</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">iter</span><span class="o">.</span><span class="n">next</span><span class="p">()</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">iter</span><span class="o">.</span><span class="n">hasNext</span><span class="p">()</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">ret</span>
        

    <span class="k">def</span> <span class="nf">hasNext</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :rtype: bool
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tmp</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>
            
        

<span class="c1"># Your PeekingIterator object will be instantiated and called as such:</span>
<span class="c1"># iter = PeekingIterator(Iterator(nums))</span>
<span class="c1"># while iter.hasNext():</span>
<span class="c1">#     val = iter.peek()   # Get the next element but not advance the iterator.</span>
<span class="c1">#     iter.next()         # Should return the same value as [val].</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Coin Change 2</title>
			<link>https://jasonyangshadow.win/posts/coin-change-2/</link>
			<pubDate>Wed, 11 Mar 2020 20:46:00 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/coin-change-2/</guid>
			<description>You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.
Example 1:
Input: amount = 5, coins = [1, 2, 5] Output: 4 Explanation: there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 Example 2:
Input: amount = 3, coins = [2] Output: 0 Explanation: the amount of 3 cannot be made up just with coins of 2.</description>
			<content type="html"><![CDATA[<p>You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.</p>
<p>Example 1:</p>
<pre><code>Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
</code></pre><p>Example 2:</p>
<pre><code>Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.
</code></pre><p>Example 3:</p>
<pre><code>Input: amount = 10, coins = [10] 
Output: 1
</code></pre><p>Note:</p>
<p>You can assume that</p>
<p>0 &lt;= amount &lt;= 5000
1 &lt;= coin &lt;= 5000
the number of coins is less than 500
the answer is guaranteed to fit into signed 32-bit integer</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">coins</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="c1">#coin order does not matter</span>
        <span class="k">for</span> <span class="n">coin</span> <span class="ow">in</span> <span class="n">coins</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">coin</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="n">coin</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">amount</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>My Calendar 1</title>
			<link>https://jasonyangshadow.win/posts/my-calendar-1/</link>
			<pubDate>Wed, 11 Mar 2020 20:27:50 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/my-calendar-1/</guid>
			<description>Implement a MyCalendar class to store your events. A new event can be added if adding the event will not cause a double booking.
Your class will have the method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start &amp;lt;= x &amp;lt; end.
A double booking happens when two events have some non-empty intersection (ie.</description>
			<content type="html"><![CDATA[<p>Implement a MyCalendar class to store your events. A new event can be added if adding the event will not cause a double booking.</p>
<p>Your class will have the method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start &lt;= x &lt; end.</p>
<p>A double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)</p>
<p>For each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.</p>
<p>Your class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)
Example 1:</p>
<pre><code>MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(15, 25); // returns false
MyCalendar.book(20, 30); // returns true
Explanation: 
The first event can be booked.  The second can't because time 15 is already booked by another event.
The third event can be booked, as the first event takes every time less than 20, but not including 20.
</code></pre><p>Note:</p>
<p>The number of calls to MyCalendar.book per test case will be at most 1000.
In calls to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].</p>
<p>While this tree is not self-balanced tree, which means the worst time complexity may be O(n)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">s</span> <span class="o">=</span> <span class="n">s</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>
        
<span class="k">class</span> <span class="nc">MyCalendar</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>
        
    <span class="k">def</span> <span class="nf">book_helper</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">s</span> <span class="o">&gt;=</span> <span class="n">node</span><span class="o">.</span><span class="n">e</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">book_helper</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">node</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">e</span><span class="p">)</span>
                <span class="k">return</span> <span class="bp">True</span>
        <span class="k">elif</span> <span class="n">e</span> <span class="o">&lt;=</span> <span class="n">node</span><span class="o">.</span><span class="n">s</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">book_helper</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">e</span><span class="p">,</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">e</span><span class="p">)</span>
                <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">book</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">end</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">book_helper</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>


<span class="c1"># Your MyCalendar object will be instantiated and called as such:</span>
<span class="c1"># obj = MyCalendar()</span>
<span class="c1"># param_1 = obj.book(start,end)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Combinations</title>
			<link>https://jasonyangshadow.win/posts/combinations/</link>
			<pubDate>Wed, 11 Mar 2020 19:58:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/combinations/</guid>
			<description>Given two integers n and k, return all possible combinations of k numbers out of 1 &amp;hellip; n.
Example:
Input: n = 4, k = 2 Output: [ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4], ] class Solution: def combine(self, n: int, k: int) -&amp;gt; List[List[int]]: res = [] stack = [] x = 1 while True: #if current stack contains enough elements, then append it to res if len(stack) == k: res.</description>
			<content type="html"><![CDATA[<p>Given two integers n and k, return all possible combinations of k numbers out of 1 &hellip; n.</p>
<p>Example:</p>
<pre><code>Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">combine</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="c1">#if current stack contains enough elements, then append it to res</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">[:])</span>
            <span class="c1">#if current x is greater than n, we need to pop or return final result</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="n">k</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">stack</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">res</span>
                <span class="n">x</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
                <span class="c1">#increase x by 1</span>
                <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Kth Smallest Element in a Sorted Matrix</title>
			<link>https://jasonyangshadow.win/posts/kth-smallest-element-in-a-sorted-matrix/</link>
			<pubDate>Wed, 11 Mar 2020 16:59:48 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/kth-smallest-element-in-a-sorted-matrix/</guid>
			<description>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.
Note that it is the kth smallest element in the sorted order, not the kth distinct element.
Example:
matrix = [ [ 1, 5, 9], [10, 11, 13], [12, 13, 15] ], k = 8, return 13. Note: You may assume k is always valid, 1 ≤ k ≤ n2.</description>
			<content type="html"><![CDATA[<p>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>
<p>Note that it is the kth smallest element in the sorted order, not the kth distinct element.</p>
<p>Example:</p>
<pre><code>matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

return 13.
</code></pre><p>Note:
You may assume k is always valid, 1 ≤ k ≤ n2.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">kthSmallest</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">:</span>
            <span class="n">mid</span> <span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">row</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">mid</span><span class="p">:</span>
                    <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="n">j</span>
            <span class="k">if</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
                <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">return</span> <span class="n">lo</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Tree Vertical Order Traversal</title>
			<link>https://jasonyangshadow.win/posts/binary-tree-vertical-order-traversal/</link>
			<pubDate>Tue, 10 Mar 2020 17:18:44 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-tree-vertical-order-traversal/</guid>
			<description>Given a binary tree, return the vertical order traversal of its nodes&amp;rsquo; values. (ie, from top to bottom, column by column).
If two nodes are in the same row and column, the order should be from left to right.
Examples 1:
Input: [3,9,20,null,null,15,7] 3 /\ / \ 9 20 /\ / \ 15 7 Output: [ [9], [3,15], [20], [7] ] Examples 2:
Input: [3,9,8,4,0,1,7] 3 /\ / \ 9 8 /\ /\ / \/ \ 4 01 7 Output: [ [4], [9], [3,0,1], [8], [7] ] Examples 3:</description>
			<content type="html"><![CDATA[<p>Given a binary tree, return the vertical order traversal of its nodes&rsquo; values. (ie, from top to bottom, column by column).</p>
<p>If two nodes are in the same row and column, the order should be from left to right.</p>
<p>Examples 1:</p>
<pre><code>Input: [3,9,20,null,null,15,7]

   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7 

Output:

[
  [9],
  [3,15],
  [20],
  [7]
]
</code></pre><p>Examples 2:</p>
<pre><code>Input: [3,9,8,4,0,1,7]

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7 

Output:

[
  [4],
  [9],
  [3,0,1],
  [8],
  [7]
]
</code></pre><p>Examples 3:</p>
<pre><code>Input: [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5)

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
    /\
   /  \
   5   2

Output:

[
  [4],
  [9,5],
  [3,0,1],
  [8,2],
  [7]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">verticalOrder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">cols</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="n">queue</span> <span class="o">=</span> <span class="p">[(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">queue</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">:</span>
                <span class="n">cols</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">cols</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">cols</span><span class="p">)]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find Minimum in Rotated Sorted Array</title>
			<link>https://jasonyangshadow.win/posts/find-minimum-in-rotated-sorted-array/</link>
			<pubDate>Tue, 10 Mar 2020 17:03:45 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-minimum-in-rotated-sorted-array/</guid>
			<description>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
Find the minimum element.
You may assume no duplicate exists in the array.
Example 1:
Input: [3,4,5,1,2] Output: 1 Example 2:
Input: [4,5,6,7,0,1,2] Output: 0 class Solution: def findMin(self, nums: List[int]) -&amp;gt; int: l, r = 0, len(nums) -1 while l &amp;lt; r: m = l + (r-l) //2 if nums[m] &amp;gt; nums[r]: l = m + 1 else: r = m return nums[l] </description>
			<content type="html"><![CDATA[<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<p>Example 1:</p>
<pre><code>Input: [3,4,5,1,2] 
Output: 1
</code></pre><p>Example 2:</p>
<pre><code>Input: [4,5,6,7,0,1,2]
Output: 0
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMin</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="p">)</span> <span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">m</span>
        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Reconstruct Itinerary</title>
			<link>https://jasonyangshadow.win/posts/reconstruct-itinerary/</link>
			<pubDate>Tue, 10 Mar 2020 16:39:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/reconstruct-itinerary/</guid>
			<description>Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.
Note:
 If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [&amp;ldquo;JFK&amp;rdquo;, &amp;ldquo;LGA&amp;rdquo;] has a smaller lexical order than [&amp;ldquo;JFK&amp;rdquo;, &amp;ldquo;LGB&amp;rdquo;].</description>
			<content type="html"><![CDATA[<p>Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.</p>
<p>Note:</p>
<ol>
<li>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [&ldquo;JFK&rdquo;, &ldquo;LGA&rdquo;] has a smaller lexical order than [&ldquo;JFK&rdquo;, &ldquo;LGB&rdquo;].</li>
<li>All airports are represented by three capital letters (IATA code).</li>
<li>You may assume all tickets form at least one valid itinerary.
Example 1:</li>
</ol>
<pre><code>Input: [[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]
Output: [&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]
</code></pre><p>Example 2:</p>
<pre><code>Input: [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]
Output: [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]
Explanation: Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;].
             But it is larger in lexical order.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findItinerary</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tickets</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">target</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">tickets</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="c1">#make sure smaller lexcial str are in the end</span>
            <span class="n">target</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
        
        <span class="n">route</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">def</span> <span class="nf">visit</span><span class="p">(</span><span class="n">airport</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">target</span><span class="p">[</span><span class="n">airport</span><span class="p">]:</span>
                <span class="c1">#each time we firstly pop out smaller lexcial str</span>
                <span class="n">visit</span><span class="p">(</span><span class="n">target</span><span class="p">[</span><span class="n">airport</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="c1">#reversed order of path</span>
            <span class="n">route</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">airport</span><span class="p">)</span>
        
        <span class="n">visit</span><span class="p">(</span><span class="s1">&#39;JFK&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">route</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Permutation in String</title>
			<link>https://jasonyangshadow.win/posts/permutation-in-string/</link>
			<pubDate>Tue, 10 Mar 2020 16:20:14 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/permutation-in-string/</guid>
			<description>Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string&amp;rsquo;s permutations is the substring of the second string.
Example 1:
Input: s1 = &amp;quot;ab&amp;quot; s2 = &amp;quot;eidbaooo&amp;quot; Output: True Explanation: s2 contains one permutation of s1 (&amp;quot;ba&amp;quot;). Example 2:
Input:s1= &amp;quot;ab&amp;quot; s2 = &amp;quot;eidboaoo&amp;quot; Output: False Note:
The input strings only contain lower case letters.</description>
			<content type="html"><![CDATA[<p>Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string&rsquo;s permutations is the substring of the second string.</p>
<p>Example 1:</p>
<pre><code>Input: s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;
Output: True
Explanation: s2 contains one permutation of s1 (&quot;ba&quot;).
</code></pre><p>Example 2:</p>
<pre><code>Input:s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;
Output: False
</code></pre><p>Note:</p>
<p>The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].</p>
<blockquote>
<p>Solution: Use sliding window to check the counter of each char appeared in the window with the size of len(s1).</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">checkInclusion</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s1</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">s2</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">s1m</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="n">s1m</span><span class="p">:</span>
                <span class="n">s2m</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">s1</span><span class="p">)])</span>
                <span class="k">if</span> <span class="n">s2m</span> <span class="o">==</span> <span class="n">s1m</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">True</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Next Greater Element 2</title>
			<link>https://jasonyangshadow.win/posts/next-greater-element-2/</link>
			<pubDate>Tue, 10 Mar 2020 15:59:21 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/next-greater-element-2/</guid>
			<description>Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.
Example 1:
Input: 12 Output: 21 Example 2:
Input: 21 Output: -1 Exactly the same algorithm for next permutation problem.
 Here is one simple example.</description>
			<content type="html"><![CDATA[<p>Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.</p>
<p>Example 1:</p>
<pre><code>Input: 12
Output: 21
</code></pre><p>Example 2:</p>
<pre><code>Input: 21
Output: -1
</code></pre><p>Exactly the same algorithm for next permutation problem.</p>
<blockquote>
<p>Here is one simple example.<br>
index: 012345<br>
given: 124651<br>
ans : 125146<br>
procedure:<br>
Starting from the rightmost digit, going to left. Find the first digit which is smaller than the previous digit.<br>
In this example, 4 is smaller than 6. Remember 4 and its index 2.<br>
Going from rightmost again. This time, find the first digit which is bigger than 4. It is 5 here.<br>
Swap 4 and 5. The number becomes 125641.<br>
Reverse all the digits which are right to 4&rsquo;s original index (That is 2), 641 should be reversed to 146 here.<br>
And the answer is reached which is 125146.</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">nextGreaterElement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
        
        <span class="n">i</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">i</span><span class="o">-=</span> <span class="mi">1</span>
        
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        
        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">while</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span> <span class="o">=</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:])</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="n">ret</span> <span class="k">if</span> <span class="n">ret</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="o">**</span><span class="mi">31</span> <span class="o">-</span><span class="mi">1</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Combination Sum</title>
			<link>https://jasonyangshadow.win/posts/combination-sum/</link>
			<pubDate>Mon, 09 Mar 2020 23:59:51 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/combination-sum/</guid>
			<description>Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.
Note:
All numbers (including target) will be positive integers. The solution set must not contain duplicate combinations. Example 1:
Input: candidates = [2,3,6,7], target = 7, A solution set is: [ [7], [2,2,3] ] Example 2:</description>
			<content type="html"><![CDATA[<p>Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p>
<p>The same repeated number may be chosen from candidates unlimited number of times.</p>
<p>Note:</p>
<p>All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:</p>
<pre><code>Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
</code></pre><p>Example 2:</p>
<pre><code>Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">combinationSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">candidates</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">candidates</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
        
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
                <span class="k">return</span> 
            <span class="c1">#here index is not increased, it will continuously try the same index in next loop</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">candidates</span><span class="p">)):</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">candidates</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">i</span> <span class="p">,</span> <span class="n">path</span> <span class="o">+</span> <span class="p">[</span><span class="n">candidates</span><span class="p">[</span><span class="n">i</span><span class="p">]],</span> <span class="n">res</span><span class="p">)</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[],</span> <span class="n">ret</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Serialize and Deserialize BST</title>
			<link>https://jasonyangshadow.win/posts/serialize-and-deserialize-bst/</link>
			<pubDate>Mon, 09 Mar 2020 23:06:23 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/serialize-and-deserialize-bst/</guid>
			<description>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.</description>
			<content type="html"><![CDATA[<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>
<p>Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>
<p>The encoded string should be as compact as possible.</p>
<p>Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Codec</span><span class="p">:</span>
    <span class="c1">#use preorder to save data</span>
    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;Encodes a tree to a single string.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">res</span>  <span class="o">=</span> <span class="p">[]</span>
        <span class="k">def</span> <span class="nf">preorder</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">))</span>
                <span class="n">preorder</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
                <span class="n">preorder</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
                
        <span class="n">preorder</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="c1">#reverse str for easy access, only use [-1]</span>
        <span class="n">res</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
        <span class="k">return</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
            
        

    <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;Decodes your encoded data to tree.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">inp</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)]</span>
        <span class="c1">#use the feature of BST, maximum value of left brach is lower than current node value, minimum value of right brach is current node vale</span>
        <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">min_val</span><span class="p">,</span><span class="n">max_val</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">inp</span> <span class="ow">and</span> <span class="n">min_val</span> <span class="o">&lt;</span> <span class="n">inp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">max_val</span><span class="p">:</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">inp</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
                <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">build</span><span class="p">(</span><span class="n">min_val</span><span class="p">,</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
                <span class="n">node</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">build</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">,</span><span class="n">max_val</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">node</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">build</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="s1">&#39;-inf&#39;</span><span class="p">),</span><span class="nb">float</span><span class="p">(</span><span class="s1">&#39;inf&#39;</span><span class="p">))</span>
            

<span class="c1"># Your Codec object will be instantiated and called as such:</span>
<span class="c1"># codec = Codec()</span>
<span class="c1"># codec.deserialize(codec.serialize(root))</span>
</code></pre></div><p>input: [3,1,4,null,2]<br>
serialize output: 4 2 1 3</p>
]]></content>
		</item>
		
		<item>
			<title>Maximum Width of Binary Tree</title>
			<link>https://jasonyangshadow.win/posts/maximum-width-of-binary-tree/</link>
			<pubDate>Mon, 09 Mar 2020 21:54:28 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-width-of-binary-tree/</guid>
			<description>Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.
The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.</description>
			<content type="html"><![CDATA[<p>Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.</p>
<p>The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.</p>
<p>Example 1:</p>
<pre><code>Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
</code></pre><p>Example 2:</p>
<pre><code>Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
</code></pre><p>Example 3:</p>
<pre><code>Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
</code></pre><p>Example 4:</p>
<pre><code>Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).
</code></pre><p>The main idea with this question is we will give each node a position value. If we go down the left neighbor, then position -&gt; position * 2; and if we go down the right neighbor, then position -&gt; position * 2 + 1. This makes it so that when we look at the position values L and R of two nodes with the same depth, the width will be R - L + 1.</p>
<p>Note: Answer will in the range of 32-bit signed integer.</p>
<p>BFS solution:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">widthOfBinaryTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">queue</span> <span class="o">=</span> <span class="p">[(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span>
        <span class="n">cur_depth</span> <span class="o">=</span> <span class="n">left</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">pos</span> <span class="ow">in</span> <span class="n">queue</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pos</span> <span class="o">*</span> <span class="mi">2</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pos</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">cur_depth</span> <span class="o">!=</span> <span class="n">depth</span><span class="p">:</span>
                <span class="n">cur_depth</span> <span class="o">=</span> <span class="n">depth</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">pos</span>
            
            <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">pos</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div><p>Another solution using DFS:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">widthOfBinaryTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">:</span>
                <span class="k">yield</span> <span class="n">depth</span><span class="p">,</span> <span class="n">pos</span>
                <span class="k">yield</span> <span class="kn">from</span> <span class="nn">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pos</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
                <span class="k">yield</span> <span class="kn">from</span> <span class="nn">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pos</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

        <span class="n">left</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">right</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">depth</span><span class="p">,</span> <span class="n">pos</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="n">depth</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span>
            <span class="n">left</span><span class="p">[</span><span class="n">depth</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">left</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">depth</span><span class="p">,</span> <span class="n">pos</span><span class="p">),</span> <span class="n">pos</span><span class="p">)</span>
            <span class="n">right</span><span class="p">[</span><span class="n">depth</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">right</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">depth</span><span class="p">,</span> <span class="n">pos</span><span class="p">),</span> <span class="n">pos</span><span class="p">)</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">right</span><span class="p">[</span><span class="n">depth</span><span class="p">]</span> <span class="o">-</span> <span class="n">left</span><span class="p">[</span><span class="n">depth</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div><pre><code>          1
         /  
        3     
       / \       
      5   3

       |

      depth, pos
       0 0
       1 0
       2 0
       2 1  
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Boundary of Binary Tree</title>
			<link>https://jasonyangshadow.win/posts/boundary-of-binary-tree/</link>
			<pubDate>Mon, 09 Mar 2020 15:35:42 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/boundary-of-binary-tree/</guid>
			<description>Given a binary tree, return the values of its boundary in anti-clockwise direction starting from root. Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes. (The values of the nodes may still be duplicates.)
Left boundary is defined as the path from root to the left-most node. Right boundary is defined as the path from root to the right-most node. If the root doesn&amp;rsquo;t have left subtree or right subtree, then the root itself is left boundary or right boundary.</description>
			<content type="html"><![CDATA[<p>Given a binary tree, return the values of its boundary in anti-clockwise direction starting from root. Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes.  (The values of the nodes may still be duplicates.)</p>
<p>Left boundary is defined as the path from root to the left-most node. Right boundary is defined as the path from root to the right-most node. If the root doesn&rsquo;t have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.</p>
<p>The left-most node is defined as a leaf node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.</p>
<p>The right-most node is also defined by the same way with left and right exchanged.</p>
<p>Example 1</p>
<pre><code>Input:
  1
   \
    2
   / \
  3   4

Ouput:
[1, 3, 4, 2]

Explanation:
The root doesn't have left subtree, so the root itself is left boundary.
The leaves are node 3 and 4.
The right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.
So order them in anti-clockwise without duplicates and we have [1,3,4,2].
</code></pre><p>Example 2</p>
<pre><code>Input:
    ____1_____
   /          \
  2            3
 / \          / 
4   5        6   
   / \      / \
  7   8    9  10  
       
Ouput:
[1,2,4,7,8,9,10,6,3]

Explanation:
The left boundary are node 1,2,4. (4 is the left-most node according to definition)
The leaves are node 4,7,8,9,10.
The right boundary are node 1,3,6,10. (10 is the right-most node).
So order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].
</code></pre><p>Steps:</p>
<ol>
<li>Get all left nodes</li>
<li>Get all right nodes</li>
<li>Get all leaf nodes</li>
<li>Check all nodes from left -&gt; leaf -&gt; right(reversed)</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">boundaryOfBinaryTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        
        <span class="c1">#get all left nodes</span>
        <span class="n">left_bd_nodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
        <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
            <span class="n">left_bd_nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
            <span class="c1">#here we use &#39;or&#39; because either left or right node can be treated as left-most or right-most node</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">left</span> <span class="ow">or</span> <span class="n">cur</span><span class="o">.</span><span class="n">right</span>
            
        <span class="c1">#get all right nodes</span>
        <span class="n">right_bd_nodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span>
        <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
            <span class="n">right_bd_nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">right</span> <span class="ow">or</span> <span class="n">cur</span><span class="o">.</span><span class="n">left</span>
            
        <span class="c1">#get all leaves</span>
        <span class="n">leaf_nodes</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
        <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">leaf_nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="k">def</span> <span class="nf">visit</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
                <span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">left_bd_nodes</span><span class="p">:</span> <span class="n">visit</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">leaf_nodes</span><span class="p">:</span> <span class="n">visit</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">right_bd_nodes</span><span class="p">):</span> <span class="n">visit</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Reverse Words in a String</title>
			<link>https://jasonyangshadow.win/posts/reverse-words-in-a-string/</link>
			<pubDate>Mon, 09 Mar 2020 14:21:16 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/reverse-words-in-a-string/</guid>
			<description>Given an input string , reverse the string word by word.
Example:
Input: [&amp;quot;t&amp;quot;,&amp;quot;h&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot; &amp;quot;,&amp;quot;s&amp;quot;,&amp;quot;k&amp;quot;,&amp;quot;y&amp;quot;,&amp;quot; &amp;quot;,&amp;quot;i&amp;quot;,&amp;quot;s&amp;quot;,&amp;quot; &amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;u&amp;quot;,&amp;quot;e&amp;quot;] Output: [&amp;quot;b&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;u&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot; &amp;quot;,&amp;quot;i&amp;quot;,&amp;quot;s&amp;quot;,&amp;quot; &amp;quot;,&amp;quot;s&amp;quot;,&amp;quot;k&amp;quot;,&amp;quot;y&amp;quot;,&amp;quot; &amp;quot;,&amp;quot;t&amp;quot;,&amp;quot;h&amp;quot;,&amp;quot;e&amp;quot;] Note:
 A word is defined as a sequence of non-space characters. The input string does not contain leading or trailing spaces. The words are always separated by a single space.
Follow up: Could you do it in-place without allocating extra space?  Reverse sentence then reverse word.</description>
			<content type="html"><![CDATA[<p>Given an input string , reverse the string word by word.</p>
<p>Example:</p>
<pre><code>Input:  [&quot;t&quot;,&quot;h&quot;,&quot;e&quot;,&quot; &quot;,&quot;s&quot;,&quot;k&quot;,&quot;y&quot;,&quot; &quot;,&quot;i&quot;,&quot;s&quot;,&quot; &quot;,&quot;b&quot;,&quot;l&quot;,&quot;u&quot;,&quot;e&quot;]
Output: [&quot;b&quot;,&quot;l&quot;,&quot;u&quot;,&quot;e&quot;,&quot; &quot;,&quot;i&quot;,&quot;s&quot;,&quot; &quot;,&quot;s&quot;,&quot;k&quot;,&quot;y&quot;,&quot; &quot;,&quot;t&quot;,&quot;h&quot;,&quot;e&quot;]
</code></pre><p>Note:</p>
<ul>
<li>A word is defined as a sequence of non-space characters.</li>
<li>The input string does not contain leading or trailing spaces.</li>
<li>The words are always separated by a single space.<br>
Follow up: Could you do it in-place without allocating extra space?</li>
</ul>
<p>Reverse sentence then reverse word.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
        <span class="k">while</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>
            <span class="n">s</span><span class="p">[</span><span class="n">start</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">end</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">end</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">start</span><span class="p">]</span>
            <span class="n">start</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">end</span> <span class="o">-=</span> <span class="mi">1</span>
            
    <span class="k">def</span> <span class="nf">reverseWords</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify s in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="c1">#reverse sentence firstly</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        
        <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="c1">#reverse words</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                <span class="n">start</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="c1">#when encountering the end, no &#39; &#39;</span>
            <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Set Matrix Zeros</title>
			<link>https://jasonyangshadow.win/posts/set-matrix-zeros/</link>
			<pubDate>Mon, 09 Mar 2020 13:58:39 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/set-matrix-zeros/</guid>
			<description>Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.
Example 1:
Input: [ [1,1,1], [1,0,1], [1,1,1] ] Output: [ [1,0,1], [0,0,0], [1,0,1] ] Example 2: Input: [ [0,1,2,0], [3,4,5,2], [1,3,1,5] ] Output: [ [0,0,0,0], [0,4,5,0], [0,3,1,0] ] Follow up:
A straight forward solution using O(mn) space is probably a bad idea. A simple improvement uses O(m + n) space, but still not the best solution.</description>
			<content type="html"><![CDATA[<p>Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.</p>
<p>Example 1:</p>
<pre><code>Input: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
Output: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]
Example 2:

Input: 
[
  [0,1,2,0],
  [3,4,5,2],
  [1,3,1,5]
]
Output: 
[
  [0,0,0,0],
  [0,4,5,0],
  [0,3,1,0]
]
</code></pre><p>Follow up:</p>
<p>A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?</p>
<p>The trick is that we temporarily set non-zero elements to &lsquo;a&rsquo; and then set them all to zero.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">setZeroes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify matrix in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">matrix</span><span class="p">:</span>
            <span class="k">return</span>
        
        <span class="n">row</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
        <span class="n">col</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">col</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">tmp</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
                        <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">tmp</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">matrix</span><span class="p">[</span><span class="n">tmp</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span>
                    <span class="k">for</span> <span class="n">tmp</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">col</span><span class="p">):</span>
                        <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">tmp</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">tmp</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span>
                    
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">col</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;a&#39;</span><span class="p">:</span>
                    <span class="n">matrix</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Circular Array Loop</title>
			<link>https://jasonyangshadow.win/posts/circular-array-loop/</link>
			<pubDate>Sun, 08 Mar 2020 20:27:42 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/circular-array-loop/</guid>
			<description>You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it&amp;rsquo;s negative (-k), move backward k steps. Since the array is circular, you may assume that the last element&amp;rsquo;s next element is the first element, and the first element&amp;rsquo;s previous element is the last element.
Determine if there is a loop (or a cycle) in nums.</description>
			<content type="html"><![CDATA[<p>You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it&rsquo;s negative (-k), move backward k steps. Since the array is circular, you may assume that the last element&rsquo;s next element is the first element, and the first element&rsquo;s previous element is the last element.</p>
<p>Determine if there is a loop (or a cycle) in nums. A cycle must start and end at the same index and the cycle&rsquo;s length &gt; 1. Furthermore, movements in a cycle must all follow a single direction. In other words, a cycle must not consist of both forward and backward movements.</p>
<p>Example 1:</p>
<pre><code>Input: [2,-1,1,2,2]
Output: true
Explanation: There is a cycle, from index 0 -&gt; 2 -&gt; 3 -&gt; 0. The cycle's length is 3.
</code></pre><p>Example 2:</p>
<pre><code>Input: [-1,2]
Output: false
Explanation: The movement from index 1 -&gt; 1 -&gt; 1 ... is not a cycle, because the cycle's length is 1. By definition the cycle's length must be greater than 1.
</code></pre><p>Example 3:</p>
<pre><code>Input: [-2,1,-1,-2,-2]
Output: false
Explanation: The movement from index 1 -&gt; 2 -&gt; 1 -&gt; ... is not a cycle, because movement from index 1 -&gt; 2 is a forward movement, but movement from index 2 -&gt; 1 is a backward movement. All movements in a cycle must follow a single direction.
</code></pre><p>This solution will change the value of element. We change it from int to str with the same value.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">circularArrayLoop</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="c1">#custom mark, if encountering any marked elements in the following loops, we skip it. because its value is fixed,and we already knew the result.</span>
            <span class="n">mark</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="c1"># value is new, not changed to str, and the same direction, num * nums[i] &gt; 0, if nums[i] is a negative value, we need to break. nums[i] should not be self-looped. </span>
            <span class="k">while</span> <span class="nb">type</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="nb">int</span> <span class="ow">and</span> <span class="n">num</span> <span class="o">*</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">jump</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="c1">#mark current value to custom mark value</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">mark</span>
                <span class="c1">#jump</span>
                <span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">jump</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mark</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find First and Last Position of Element in Sorted Array</title>
			<link>https://jasonyangshadow.win/posts/find-first-and-last-position-of-element-in-sorted-array/</link>
			<pubDate>Sun, 08 Mar 2020 20:00:16 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-first-and-last-position-of-element-in-sorted-array/</guid>
			<description>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm&amp;rsquo;s runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4] Example 2:
Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1] The solution is based on finding the leftmost and rightmost position of target in a sorted array</description>
			<content type="html"><![CDATA[<p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</p>
<p>Your algorithm&rsquo;s runtime complexity must be in the order of O(log n).</p>
<p>If the target is not found in the array, return [-1, -1].</p>
<p>Example 1:</p>
<pre><code>Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
</code></pre><p>The solution is based on finding the leftmost and rightmost position of target in a sorted array</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#find leftmost index of target</span>
<span class="k">def</span> <span class="nf">left</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
  <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">while</span> <span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="p">:</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
    <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">:</span>
      <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="n">r</span> <span class="o">=</span> <span class="n">m</span>
  <span class="k">return</span> <span class="n">l</span>

<span class="c1">#find rightmost index of target</span>
<span class="k">def</span> <span class="nf">right</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
  <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
  <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
    <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">t</span><span class="p">:</span>
      <span class="n">r</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="n">l</span> <span class="o">=</span> <span class="n">m</span>
  <span class="k">return</span> <span class="n">l</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">searchRange</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">low</span> <span class="o">==</span> <span class="n">high</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
        
        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1">#include equal</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span>
        
        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">!=</span> <span class="n">target</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">low</span><span class="p">)</span>
        
        <span class="n">high</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span>
                
        <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">low</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Inorder Successor in Bst</title>
			<link>https://jasonyangshadow.win/posts/inorder-successor-in-bst/</link>
			<pubDate>Sun, 08 Mar 2020 17:55:09 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/inorder-successor-in-bst/</guid>
			<description>Given a binary search tree and a node in it, find the in-order successor of that node in the BST.
The successor of a node p is the node with the smallest key greater than p.val.
Example 1:
Input: root = [2,1,3], p = 1
Output: 2
Explanation: 1&amp;rsquo;s in-order successor node is 2. Note that both p and the return value is of TreeNode type.
Example 2:
Input: root = [5,3,6,2,4,null,null,1], p = 6</description>
			<content type="html"><![CDATA[<p>Given a binary search tree and a node in it, find the in-order successor of that node in the BST.</p>
<p>The successor of a node p is the node with the smallest key greater than p.val.</p>
<p>Example 1:<br>
<img src="https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG" alt="image"></p>
<p>Input: root = [2,1,3], p = 1<br>
Output: 2<br>
Explanation: 1&rsquo;s in-order successor node is 2. Note that both p and the return value is of TreeNode type.<br>
Example 2:</p>
<p><img src="https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG" alt="image"><br>
Input: root = [5,3,6,2,4,null,null,1], p = 6<br>
Output: null<br>
Explanation: There is no in-order successor of the current node, so the answer is null.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">inorderSuccessor</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">:</span>
    <span class="c1">#the successor is the value which is a bit larger than the given node. Should be either root node or left sub-tree in right branch.</span>
        <span class="n">succ</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">succ</span> <span class="o">=</span> <span class="n">root</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span>
        
        <span class="k">return</span> <span class="n">succ</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Reverse Linked List 2</title>
			<link>https://jasonyangshadow.win/posts/reverse-linked-list-2/</link>
			<pubDate>Sun, 08 Mar 2020 17:41:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/reverse-linked-list-2/</guid>
			<description>Reverse a linked list from position m to n. Do it in one-pass.
Note: 1 ≤ m ≤ n ≤ length of list.
Example:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, m = 2, n = 4 Output: 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;NULL Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def reverseBetween(self, head: ListNode, m: int, n: int) -&amp;gt; ListNode: if not head or m == n: return head p = dummy = ListNode(None) dummy.</description>
			<content type="html"><![CDATA[<p>Reverse a linked list from position m to n. Do it in one-pass.</p>
<p>Note: 1 ≤ m ≤ n ≤ length of list.</p>
<p>Example:</p>
<pre><code>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4
Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL
</code></pre><p><img src="https://leetcode.com/uploads/files/1490008792563-reversed_linked_list.jpeg" alt="image"></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">Definition</span> <span class="k">for</span> <span class="n">singly</span><span class="o">-</span><span class="n">linked</span> <span class="nb">list</span><span class="o">.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.next = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverseBetween</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">head</span> <span class="ow">or</span> <span class="n">m</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span>
        
        <span class="n">p</span> <span class="o">=</span> <span class="n">dummy</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
        <span class="n">dummy</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">next</span>
            
        <span class="n">tail</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">next</span>
        
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">m</span><span class="p">):</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">next</span>
            <span class="n">p</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">tail</span><span class="o">.</span><span class="n">next</span>
            <span class="n">tail</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span><span class="n">tail</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span>
            <span class="n">p</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">tmp</span>
        
        <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="n">next</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sparse Matrix Multiplication</title>
			<link>https://jasonyangshadow.win/posts/sparse-matrix-multiplication/</link>
			<pubDate>Sat, 07 Mar 2020 22:28:38 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sparse-matrix-multiplication/</guid>
			<description>Given two sparse matrices A and B, return the result of AB.
You may assume that A&amp;rsquo;s column number is equal to B&amp;rsquo;s row number.
Example:
Input: A = [ [ 1, 0, 0], [-1, 0, 3] ] B = [ [ 7, 0, 0 ], [ 0, 0, 0 ], [ 0, 0, 1 ] ] Output: | 1 0 0 | | 7 0 0 | | 7 0 0 | AB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 | | 0 0 1 | class Solution: def multiply(self, A: List[List[int]], B: List[List[int]]) -&amp;gt; List[List[int]]: ar, ac = len(A), len(A[0]) br, bc = len(B), len(B[0]) def multipy(A, r, B, c): c1 = A[r] c2 = [row[c] for row in B] sum = 0 for x1,x2 in zip(c1,c2): sum += x1*x2 return sum ret = [[0 for _ in range(bc)] for _ in range(ar)] for i in range(len(ret)): for j in range(len(ret[0])): ret[i][j] = multipy(A, i, B, j) return ret </description>
			<content type="html"><![CDATA[<p>Given two sparse matrices A and B, return the result of AB.</p>
<p>You may assume that A&rsquo;s column number is equal to B&rsquo;s row number.</p>
<p>Example:</p>
<pre><code>Input:

A = [
  [ 1, 0, 0],
  [-1, 0, 3]
]

B = [
  [ 7, 0, 0 ],
  [ 0, 0, 0 ],
  [ 0, 0, 1 ]
]

Output:

     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |
AB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |
                  | 0 0 1 |
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">B</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">ar</span><span class="p">,</span> <span class="n">ac</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">br</span><span class="p">,</span> <span class="n">bc</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">B</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">B</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="k">def</span> <span class="nf">multipy</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
            <span class="n">c1</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
            <span class="n">c2</span> <span class="o">=</span> <span class="p">[</span><span class="n">row</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">B</span><span class="p">]</span>
            <span class="nb">sum</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">x1</span><span class="p">,</span><span class="n">x2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span><span class="n">c2</span><span class="p">):</span>
                <span class="nb">sum</span> <span class="o">+=</span> <span class="n">x1</span><span class="o">*</span><span class="n">x2</span>
            <span class="k">return</span> <span class="nb">sum</span>
        
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">bc</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">ar</span><span class="p">)]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ret</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="n">ret</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">multipy</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Single Element in a Sorted Array</title>
			<link>https://jasonyangshadow.win/posts/single-element-in-a-sorted-array/</link>
			<pubDate>Sat, 07 Mar 2020 22:15:06 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/single-element-in-a-sorted-array/</guid>
			<description>You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.
Example 1:
Input: [1,1,2,3,3,4,4,8,8] Output: 2 Example 2:
Input: [3,3,7,7,10,11,11] Output: 10 Note: Your solution should run in O(log n) time and O(1) space.
class Solution: def singleNonDuplicate(self, nums: List[int]) -&amp;gt; int: low, high = 0, len(nums) - 1 while low &amp;lt; high: mid = low + (high - low) // 2 #if mid item is different from both left and right nodes, we found it if nums[mid] !</description>
			<content type="html"><![CDATA[<p>You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.</p>
<p>Example 1:</p>
<pre><code>Input: [1,1,2,3,3,4,4,8,8]
Output: 2
</code></pre><p>Example 2:</p>
<pre><code>Input: [3,3,7,7,10,11,11]
Output: 10
</code></pre><p>Note: Your solution should run in O(log n) time and O(1) space.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">singleNonDuplicate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
            
            <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="c1">#if mid item is different from both left and right nodes, we found it</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">!=</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">!=</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
                <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span>
            <span class="c1">#if its index is odd, its left node should be equal to it</span>
            <span class="c1"># 1 1 2 2</span>
            <span class="c1"># 0 1 2 3</span>
            <span class="k">elif</span> <span class="n">mid</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]:</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="c1">#if its index is even, its right node should be equal to it</span>
            <span class="k">elif</span> <span class="n">mid</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
            <span class="c1">#left branch contains this single element</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span>
                
        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">low</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Delete Node in a Bst</title>
			<link>https://jasonyangshadow.win/posts/delete-node-in-a-bst/</link>
			<pubDate>Sat, 07 Mar 2020 21:55:49 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/delete-node-in-a-bst/</guid>
			<description>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.
Basically, the deletion can be divided into two stages:
Search for a node to remove. If the node is found, delete the node. Note: Time complexity should be O(height of tree).
Example:
root = [5,3,6,2,4,null,7] key = 3 5 / \ 3 6 / \ \ 2 4 7 Given key to delete is 3.</description>
			<content type="html"><![CDATA[<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>
<p>Basically, the deletion can be divided into two stages:</p>
<p>Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).</p>
<p>Example:</p>
<pre><code>root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the following BST.

    5
   / \
  4   6
 /     \
2       7

Another valid answer is [5,2,6,null,4,null,7].

    5
   / \
  2   6
   \   \
    4   7
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">deleteNode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">root</span>
        
        <span class="c1">#if root.val &gt; key, we need to find the delete node in right branch</span>
        <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">key</span><span class="p">:</span>
            <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">deleteNode</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">key</span><span class="p">:</span>
            <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">deleteNode</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>

           <span class="c1">#here we find the node</span>
           <span class="c1">#if it does not have left sub-tree, we directly use right one </span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>

            <span class="c1">#if it both has left and right sub-tree, we need to find the minimum one from right sub-tree</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span>
            <span class="n">mini</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="n">val</span>
            <span class="k">while</span> <span class="n">temp</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="n">left</span>
                <span class="n">mini</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="n">val</span>
            
            <span class="c1">#**here is the most important part, replacing value and deleting the mini node**</span>
            <span class="n">root</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">mini</span>
            <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">deleteNode</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">root</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sum Root to Leaf Numbers</title>
			<link>https://jasonyangshadow.win/posts/sum-root-to-leaf-numbers/</link>
			<pubDate>Sat, 07 Mar 2020 21:18:37 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sum-root-to-leaf-numbers/</guid>
			<description>Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1-&amp;gt;2-&amp;gt;3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.
Note: A leaf is a node with no children.
Example:
Input: [1,2,3] 1 / \ 2 3 Output: 25 Explanation: The root-to-leaf path 1-&amp;gt;2 represents the number 12. The root-to-leaf path 1-&amp;gt;3 represents the number 13.</description>
			<content type="html"><![CDATA[<p>Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.</p>
<p>An example is the root-to-leaf path 1-&gt;2-&gt;3 which represents the number 123.</p>
<p>Find the total sum of all root-to-leaf numbers.</p>
<p>Note: A leaf is a node with no children.</p>
<p>Example:</p>
<pre><code>Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1-&gt;2 represents the number 12.
The root-to-leaf path 1-&gt;3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
</code></pre><p>Example 2:</p>
<pre><code>Input: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
Output: 1026
Explanation:
The root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.
The root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.
The root-to-leaf path 4-&gt;0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sumNumbers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">prev</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="c1">#use prev to add value          </span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span>
            
            <span class="c1">#only if the root is leaf node, then add prev to ret</span>
            <span class="c1">#Attention use nolocal to indicate ret is global value</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">nonlocal</span> <span class="n">ret</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="n">prev</span>
            
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">prev</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">prev</span><span class="p">)</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Compare Version Numbers</title>
			<link>https://jasonyangshadow.win/posts/compare-version-numbers/</link>
			<pubDate>Sat, 07 Mar 2020 20:47:06 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/compare-version-numbers/</guid>
			<description>Compare two version numbers version1 and version2. If version1 &amp;gt; version2 return 1; if version1 &amp;lt; version2 return -1;otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not &amp;ldquo;two and a half&amp;rdquo; or &amp;ldquo;half way to version three&amp;rdquo;, it is the fifth second-level revision of the second first-level revision.</description>
			<content type="html"><![CDATA[<p>Compare two version numbers version1 and version2.
If version1 &gt; version2 return 1; if version1 &lt; version2 return -1;otherwise return 0.</p>
<p>You may assume that the version strings are non-empty and contain only digits and the . character.</p>
<p>The . character does not represent a decimal point and is used to separate number sequences.</p>
<p>For instance, 2.5 is not &ldquo;two and a half&rdquo; or &ldquo;half way to version three&rdquo;, it is the fifth second-level revision of the second first-level revision.</p>
<p>You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.</p>
<p>Example 1:</p>
<pre><code>Input: version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;
Output: -1
</code></pre><p>Example 2:</p>
<pre><code>Input: version1 = &quot;1.0.1&quot;, version2 = &quot;1&quot;
Output: 1
</code></pre><p>Example 3:</p>
<pre><code>Input: version1 = &quot;7.5.2.4&quot;, version2 = &quot;7.5.3&quot;
Output: -1
</code></pre><p>Example 4:</p>
<pre><code>Input: version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;
Output: 0
Explanation: Ignoring leading zeroes, both “01” and “001&quot; represent the same number “1”
</code></pre><p>Example 5:</p>
<pre><code>Input: version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;
Output: 0
Explanation: The first version number does not have a third level revision number, which means its third level revision number is default to &quot;0&quot;
</code></pre><p>Note:</p>
<ul>
<li>Version strings are composed of numeric strings separated by dots . and this numeric strings may have leading zeroes.</li>
<li>Version strings do not start or end with dots, and they will not be two consecutive dots.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">compareVersion</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">version1</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">version2</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">v1</span> <span class="o">=</span> <span class="n">version1</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
        <span class="n">v2</span> <span class="o">=</span> <span class="n">version2</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
        <span class="n">max_len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">v1</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">v2</span><span class="p">))</span>
        
        <span class="c1">#use zero to fill in order to make two list the same length.</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_len</span><span class="p">:</span>
            <span class="n">v1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_len</span><span class="p">:</span>
            <span class="n">v2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span><span class="n">v2</span><span class="p">):</span>
            <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="mi">0</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Search Tree Iterator</title>
			<link>https://jasonyangshadow.win/posts/binary-search-tree-iterator/</link>
			<pubDate>Fri, 06 Mar 2020 21:04:33 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-search-tree-iterator/</guid>
			<description>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.
Calling next() will return the next smallest number in the BST.
Example: BSTIterator iterator = new BSTIterator(root); iterator.next(); // return 3 iterator.next(); // return 7 iterator.hasNext(); // return true iterator.next(); // return 9 iterator.hasNext(); // return true iterator.next(); // return 15 iterator.hasNext(); // return true iterator.next(); // return 20 iterator.</description>
			<content type="html"><![CDATA[<p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>
<p>Calling next() will return the next smallest number in the BST.</p>
<p>Example:
<img src="https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png" alt="image"></p>
<pre><code>BSTIterator iterator = new BSTIterator(root);
iterator.next();    // return 3
iterator.next();    // return 7
iterator.hasNext(); // return true
iterator.next();    // return 9
iterator.hasNext(); // return true
iterator.next();    // return 15
iterator.hasNext(); // return true
iterator.next();    // return 20
iterator.hasNext(); // return false
</code></pre><p>Note:</p>
<ul>
<li>next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.</li>
<li>You may assume that next() call will always be valid, that is, there will be at least a next smallest number in the BST when next() is called.</li>
</ul>
<p>Solution: The most difficult part here is that the space should be o(h) rather than o(n). h = log(n). Therefore, we need to only save left branch in each loop. When popping out item, we need to check if having right branch, if so , we need to save left sub-branch of its right branch.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">BSTIterator</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pushall</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        @return the next smallest number
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
            <span class="c1">#when popping out item</span>
            <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="c1">#check if it has right branch</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                <span class="c1">#add all left sub-branch items</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">pushall</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>
        
        

    <span class="k">def</span> <span class="nf">hasNext</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        @return whether we have a next smallest number
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
    
    <span class="c1">#only saving left branch, so that only log(n) nodes are saved</span>
    <span class="k">def</span> <span class="nf">pushall</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
        


<span class="c1"># Your BSTIterator object will be instantiated and called as such:</span>
<span class="c1"># obj = BSTIterator(root)</span>
<span class="c1"># param_1 = obj.next()</span>
<span class="c1"># param_2 = obj.hasNext()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Trapping Rain Water</title>
			<link>https://jasonyangshadow.win/posts/trapping-rain-water/</link>
			<pubDate>Fri, 06 Mar 2020 20:44:35 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/trapping-rain-water/</guid>
			<description>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!
Example:
Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Not good solution
class Solution: def trap(self, height: List[int]) -&amp;gt; int: l, r = 0, len(height) - 1 #level indicates the highest threshold, roof level = 0 #low indicates the lowest threshold, floor low = 0 water = 0 while l &amp;lt; r: #find minimum one from l,r idx = l if height[l] &amp;lt; height[r] else r #shrink to middle if idx == l: l += 1 else: r -= 1 #curent low value low = height[idx] #max value equals highest threshold, roof level = max(low, level) #accumulate water if there is difference between level and low water += level - low return water Good solution</description>
			<content type="html"><![CDATA[<p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt="image"><br>
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!</p>
<p>Example:</p>
<pre><code>Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
</code></pre><p>Not good solution</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">trap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">height</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="c1">#level indicates the highest threshold, roof</span>
        <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="c1">#low indicates the lowest threshold, floor</span>
        <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">water</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="c1">#find minimum one from l,r</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="n">l</span> <span class="k">if</span> <span class="n">height</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="k">else</span> <span class="n">r</span>
            <span class="c1">#shrink to middle</span>
            <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="n">l</span><span class="p">:</span>
                <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="c1">#curent low value</span>
            <span class="n">low</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="c1">#max value equals highest threshold, roof</span>
            <span class="n">level</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">level</span><span class="p">)</span>
            <span class="c1">#accumulate water if there is difference between level and low</span>
            <span class="n">water</span> <span class="o">+=</span> <span class="n">level</span> <span class="o">-</span> <span class="n">low</span>
        <span class="k">return</span> <span class="n">water</span>
</code></pre></div><p>Good solution</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">trap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">q</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">water</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">height</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">q</span> <span class="ow">or</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">[</span><span class="n">q</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]:</span>
                <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">q</span><span class="p">:</span>
                    <span class="n">mh</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">q</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]],</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                    <span class="n">water</span> <span class="o">+=</span> <span class="p">(</span><span class="n">mh</span> <span class="o">-</span> <span class="n">height</span><span class="p">[</span><span class="n">p</span><span class="p">])</span><span class="o">*</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">q</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">water</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Walls and Gates</title>
			<link>https://jasonyangshadow.win/posts/walls-and-gates/</link>
			<pubDate>Fri, 06 Mar 2020 15:16:29 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/walls-and-gates/</guid>
			<description>You are given a m x n 2D grid initialized with these three possible values.
-1 - A wall or an obstacle. 0 - A gate. INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.</description>
			<content type="html"><![CDATA[<p>You are given a m x n 2D grid initialized with these three possible values.</p>
<p>-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.</p>
<p>Example:</p>
<p>Given the 2D grid:</p>
<pre><code>INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
</code></pre><p>After running your function, the 2D grid should be:</p>
<pre><code>  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">wallsAndGates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">rooms</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify rooms in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="c1">#find all gate</span>
        <span class="n">q</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">rooms</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">r</span><span class="p">]</span>
        
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">q</span><span class="p">:</span>
        <span class="c1">#starts from gate, finding any INF</span>
            <span class="k">for</span> <span class="n">I</span><span class="p">,</span> <span class="n">J</span> <span class="ow">in</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="mi">0</span><span class="o">&lt;=</span> <span class="n">I</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">rooms</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span> <span class="n">J</span> <span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">rooms</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">and</span> <span class="n">rooms</span><span class="p">[</span><span class="n">I</span><span class="p">][</span><span class="n">J</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">**</span><span class="mi">30</span><span class="p">:</span>
                <span class="c1">#add step + 1</span>
                    <span class="n">rooms</span><span class="p">[</span><span class="n">I</span><span class="p">][</span><span class="n">J</span><span class="p">]</span> <span class="o">=</span> <span class="n">rooms</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="c1">#add it to q</span>
                    <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">I</span><span class="p">,</span><span class="n">J</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Restore IP Addresses</title>
			<link>https://jasonyangshadow.win/posts/restore-ip-addresses/</link>
			<pubDate>Fri, 06 Mar 2020 14:51:43 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/restore-ip-addresses/</guid>
			<description>Given a string containing only digits, restore it by returning all possible valid IP address combinations.
Example:
Input: &amp;quot;25525511135&amp;quot; Output: [&amp;quot;255.255.11.135&amp;quot;, &amp;quot;255.255.111.35&amp;quot;] Use backtrack algorithm.
class Solution: def restoreIpAddresses(self, s: str) -&amp;gt; List[str]: rst = [] #here the input str might be longer than 12, which is treated as illegal input. Just return empty list if(len(s) &amp;gt; 12): return rst #backtrack algorithm #count is current segement number, path is current asembled path, s is the string left part def backtrack(s, count, path): if count == 4: if not s: #if all done, we have 4 blocks and no string left, remove last &amp;#39;.</description>
			<content type="html"><![CDATA[<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>
<p>Example:</p>
<pre><code>Input: &quot;25525511135&quot;
Output: [&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]
</code></pre><p>Use backtrack algorithm.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">restoreIpAddresses</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">rst</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1">#here the input str might be longer than 12, which is treated as illegal input. Just return empty list</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">12</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">rst</span>
        
        <span class="c1">#backtrack algorithm</span>
        <span class="c1">#count is current segement number, path is current asembled path, s is the string left part</span>
        <span class="k">def</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
                    <span class="c1">#if all done, we have 4 blocks and no string left, remove last &#39;.&#39; and add it to rst</span>
                    <span class="n">rst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                    <span class="k">return</span>
            <span class="c1">#else we need to split 1, 2, 3 to test</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
                <span class="c1">#if not enough long string left</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="k">continue</span>
                <span class="c1">#if current splits has 0 as the first char</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;0&#39;</span><span class="p">:</span> <span class="k">continue</span>
                <span class="c1">#if the number is larger than 255</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[:</span><span class="mi">3</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">255</span><span class="p">:</span> <span class="k">continue</span>
                <span class="c1">#else try another splits based on current split</span>
                <span class="n">backtrack</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:],</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">path</span> <span class="o">+</span> <span class="n">s</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span>
            
        <span class="n">backtrack</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">rst</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Rotate List</title>
			<link>https://jasonyangshadow.win/posts/rotate-list/</link>
			<pubDate>Fri, 06 Mar 2020 13:51:31 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/rotate-list/</guid>
			<description>Given a linked list, rotate the list to the right by k places, where k is non-negative.
Example 1:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, k = 2 Output: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL Explanation: rotate 1 steps to the right: 5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;NULL rotate 2 steps to the right: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL Example 2:
Input: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL, k = 4 Output: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL Explanation: rotate 1 steps to the right: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL rotate 2 steps to the right: 1-&amp;gt;2-&amp;gt;0-&amp;gt;NULL rotate 3 steps to the right: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL rotate 4 steps to the right: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL # Definition for singly-linked list.</description>
			<content type="html"><![CDATA[<p>Given a linked list, rotate the list to the right by k places, where k is non-negative.</p>
<p>Example 1:</p>
<pre><code>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2
Output: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL
Explanation:
rotate 1 steps to the right: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL
rotate 2 steps to the right: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL
</code></pre><p>Example 2:</p>
<pre><code>Input: 0-&gt;1-&gt;2-&gt;NULL, k = 4
Output: 2-&gt;0-&gt;1-&gt;NULL
Explanation:
rotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL
rotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL
rotate 3 steps to the right: 0-&gt;1-&gt;2-&gt;NULL
rotate 4 steps to the right: 2-&gt;0-&gt;1-&gt;NULL
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for singly-linked list.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.next = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">rotateRight</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">head</span> <span class="ow">or</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span>
        <span class="c1">#calculate count firstly</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">orig_head</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
            
        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span> <span class="o">%</span> <span class="n">count</span>
        <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="c1">#we do not need to rotate, just return</span>
            <span class="k">return</span> <span class="n">head</span>
        <span class="c1">#how many items to skip</span>
        <span class="n">skip</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="n">k</span>
        
        <span class="n">prev</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">while</span> <span class="n">skip</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">cur</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
            <span class="n">skip</span> <span class="o">-=</span> <span class="mi">1</span>
        
        <span class="c1">#skip firstly then relink the following list(k)</span>
        <span class="n">prev</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">cur</span>
        <span class="k">while</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span><span class="p">:</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
        <span class="n">cur</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">orig_head</span>
        
        <span class="k">return</span> <span class="n">head</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find All Duplicates in an Array</title>
			<link>https://jasonyangshadow.win/posts/find-all-duplicates-in-an-array/</link>
			<pubDate>Thu, 05 Mar 2020 17:28:08 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-all-duplicates-in-an-array/</guid>
			<description>Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements that appear twice in this array.
Could you do it without extra space and in O(n) runtime?
Example:
Input: [4,3,2,7,8,2,3,1] Output: [2,3] Using index as the indication of seen item.
class Solution: def findDuplicates(self, nums: List[int]) -&amp;gt; List[int]: ret = [] for num in nums: if nums[abs(num) - 1] &amp;lt; 0: ret.</description>
			<content type="html"><![CDATA[<p>Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.</p>
<p>Find all the elements that appear twice in this array.</p>
<p>Could you do it without extra space and in O(n) runtime?</p>
<p>Example:</p>
<pre><code>Input:
[4,3,2,7,8,2,3,1]

Output:
[2,3]
</code></pre><p>Using index as the indication of seen item.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findDuplicates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">nums</span><span class="p">[</span><span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">ret</span> 
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Contains Duplicate 2</title>
			<link>https://jasonyangshadow.win/posts/contains-duplicate-2/</link>
			<pubDate>Thu, 05 Mar 2020 16:46:35 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/contains-duplicate-2/</guid>
			<description>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.
Example 1:
Input: nums = [1,2,3,1], k = 3 Output: true Example 2:
Input: nums = [1,0,1,1], k = 1 Output: true Example 3:
Input: nums = [1,2,3,1,2,3], k = 2 Output: false Maintain a set containing at most K last seen elements.</description>
			<content type="html"><![CDATA[<p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.</p>
<p>Example 1:</p>
<pre><code>Input: nums = [1,2,3,1], k = 3
Output: true
</code></pre><p>Example 2:</p>
<pre><code>Input: nums = [1,0,1,1], k = 1
Output: true
</code></pre><p>Example 3:</p>
<pre><code>Input: nums = [1,2,3,1,2,3], k = 2
Output: false
</code></pre><p>Maintain a set containing at most K last seen elements. If number exists in set then return True, else add it into set.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">containsNearbyDuplicate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">seen</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">:</span>
                <span class="n">seen</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">k</span><span class="p">])</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Implement Stack Using Queues</title>
			<link>https://jasonyangshadow.win/posts/implement-stack-using-queues/</link>
			<pubDate>Thu, 05 Mar 2020 16:23:18 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/implement-stack-using-queues/</guid>
			<description>Implement the following operations of a stack using queues.
push(x) &amp;ndash; Push element x onto stack. pop() &amp;ndash; Removes the element on top of the stack. top() &amp;ndash; Get the top element. empty() &amp;ndash; Return whether the stack is empty. Example:
MyStack stack = new MyStack(); stack.push(1); stack.push(2); stack.top(); // returns 2 stack.pop(); // returns 2 stack.empty(); // returns false Notes:
You must use only standard operations of a queue &amp;ndash; which means only push to back, peek/pop from front, size, and is empty operations are valid.</description>
			<content type="html"><![CDATA[<p>Implement the following operations of a stack using queues.</p>
<p>push(x) &ndash; Push element x onto stack.
pop() &ndash; Removes the element on top of the stack.
top() &ndash; Get the top element.
empty() &ndash; Return whether the stack is empty.
Example:</p>
<pre><code>MyStack stack = new MyStack();

stack.push(1);
stack.push(2);  
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false
</code></pre><p>Notes:</p>
<p>You must use only standard operations of a queue &ndash; which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">MyStack</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">q</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">()</span>
        

    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Push element x onto stack.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Removes the element on top of the stack and returns that element.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        

    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Get the top element.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
        

    <span class="k">def</span> <span class="nf">empty</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Returns whether the stack is empty.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">False</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">q</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">True</span>
        


<span class="c1"># Your MyStack object will be instantiated and called as such:</span>
<span class="c1"># obj = MyStack()</span>
<span class="c1"># obj.push(x)</span>
<span class="c1"># param_2 = obj.pop()</span>
<span class="c1"># param_3 = obj.top()</span>
<span class="c1"># param_4 = obj.empty()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Implement Queue Using Stacks</title>
			<link>https://jasonyangshadow.win/posts/implement-queue-using-stacks/</link>
			<pubDate>Thu, 05 Mar 2020 16:19:45 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/implement-queue-using-stacks/</guid>
			<description>Implement the following operations of a queue using stacks.
push(x) &amp;ndash; Push element x to the back of queue. pop() &amp;ndash; Removes the element from in front of queue. peek() &amp;ndash; Get the front element. empty() &amp;ndash; Return whether the queue is empty. Example:
MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // returns 1 queue.pop(); // returns 1 queue.empty(); // returns false Notes:
You must use only standard operations of a stack &amp;ndash; which means only push to top, peek/pop from top, size, and is empty operations are valid.</description>
			<content type="html"><![CDATA[<p>Implement the following operations of a queue using stacks.</p>
<p>push(x) &ndash; Push element x to the back of queue.
pop() &ndash; Removes the element from in front of queue.
peek() &ndash; Get the front element.
empty() &ndash; Return whether the queue is empty.
Example:</p>
<pre><code>MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // returns 1
queue.pop();   // returns 1
queue.empty(); // returns false
</code></pre><p>Notes:</p>
<p>You must use only standard operations of a stack &ndash; which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">MyQueue</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">st1</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">st2</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Push element x to the back of queue.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Removes the element from in front of queue and returns that element.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">st2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">st2</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st2</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">ret</span>
        

    <span class="k">def</span> <span class="nf">peek</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Get the front element.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        

    <span class="k">def</span> <span class="nf">empty</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Returns whether the queue is empty.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="bp">False</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">True</span>
        


<span class="c1"># Your MyQueue object will be instantiated and called as such:</span>
<span class="c1"># obj = MyQueue()</span>
<span class="c1"># obj.push(x)</span>
<span class="c1"># param_2 = obj.pop()</span>
<span class="c1"># param_3 = obj.peek()</span>
<span class="c1"># param_4 = obj.empty()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Kth Largest Element in a Stream</title>
			<link>https://jasonyangshadow.win/posts/kth-largest-element-in-a-stream/</link>
			<pubDate>Thu, 05 Mar 2020 15:48:59 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/kth-largest-element-in-a-stream/</guid>
			<description>Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.
Your KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from the stream. For each call to the method KthLargest.add, return the element representing the kth largest element in the stream.</description>
			<content type="html"><![CDATA[<p>Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>
<p>Your KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from the stream. For each call to the method KthLargest.add, return the element representing the kth largest element in the stream.</p>
<p>Example:</p>
<pre><code>int k = 3;
int[] arr = [4,5,8,2];
KthLargest kthLargest = new KthLargest(3, arr);
kthLargest.add(3);   // returns 4
kthLargest.add(5);   // returns 5
kthLargest.add(10);  // returns 5
kthLargest.add(9);   // returns 8
kthLargest.add(4);   // returns 8
</code></pre><p>Note:
You may assume that nums&rsquo; length ≥ k-1 and k ≥ 1.</p>
<p>Solution 1: using two stacks to process k&rsquo;s largest number but encountering TLE.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">KthLargest</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">st1</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">st2</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="n">k</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">st1</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">val</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">st2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">k</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">st2</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">k</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st2</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">st2</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">st2</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">k</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">st1</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
        


<span class="c1"># Your KthLargest object will be instantiated and called as such:</span>
<span class="c1"># obj = KthLargest(k, nums)</span>
<span class="c1"># param_1 = obj.add(val)</span>
</code></pre></div><p>Solution 2: using heap structure</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">KthLargest</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pool</span> <span class="o">=</span> <span class="n">nums</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="n">k</span>
        <span class="n">heapq</span><span class="o">.</span><span class="n">heapify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="p">)</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="p">)</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">k</span><span class="p">:</span>
            <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="p">)</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">k</span><span class="p">:</span>
            <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
            <span class="n">heapq</span><span class="o">.</span><span class="n">heapreplace</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        


<span class="c1"># Your KthLargest object will be instantiated and called as such:</span>
<span class="c1"># obj = KthLargest(k, nums)</span>
<span class="c1"># param_1 = obj.add(val)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Palindrome Permutation</title>
			<link>https://jasonyangshadow.win/posts/palindrome-permutation/</link>
			<pubDate>Thu, 05 Mar 2020 14:39:41 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/palindrome-permutation/</guid>
			<description>Given a string, determine if a permutation of the string could form a palindrome.
Example 1:
Input: &amp;quot;code&amp;quot; Output: false Example 2:
Input: &amp;quot;aab&amp;quot; Output: true Example 3:
Input: &amp;quot;carerac&amp;quot; Output: true Though this problem is very easy to solve. We need to notice that any char could be in s, even &amp;lsquo;&#39; or upper-lower char, or etc&amp;hellip; . we&amp;rsquo;d better use dic to calculate the appearance frequency.
class Solution: def canPermutePalindrome(self, s: str) -&amp;gt; bool: dic = collections.</description>
			<content type="html"><![CDATA[<p>Given a string, determine if a permutation of the string could form a palindrome.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;code&quot;
Output: false
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;aab&quot;
Output: true
</code></pre><p>Example 3:</p>
<pre><code>Input: &quot;carerac&quot;
Output: true
</code></pre><p>Though this problem is very easy to solve. We need to notice that any char could be in s, even &lsquo;' or upper-lower char, or etc&hellip; . we&rsquo;d better use dic to calculate the appearance frequency.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">canPermutePalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            
        <span class="n">odd</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">dic</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">odd</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">odd</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find Largest Value in Each Tree Row</title>
			<link>https://jasonyangshadow.win/posts/find-largest-value-in-each-tree-row/</link>
			<pubDate>Wed, 04 Mar 2020 19:20:07 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-largest-value-in-each-tree-row/</guid>
			<description>You need to find the largest value in each row of a binary tree.
Example: Input:
 1 / \ 3 2 / \ \ 5 3 9  Output: [1, 3, 9]
# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def largestValues(self, root: TreeNode) -&amp;gt; List[int]: dic = collections.defaultdict(list) def dfs(node, level): if node: dic[level].</description>
			<content type="html"><![CDATA[<p>You need to find the largest value in each row of a binary tree.</p>
<p>Example:
Input:</p>
<pre><code>      1
     / \
    3   2
   / \   \  
  5   3   9 
</code></pre>
<p>Output: [1, 3, 9]</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">largestValues</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">level</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">:</span>
                <span class="n">dic</span><span class="p">[</span><span class="n">level</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">dic</span><span class="o">.</span><span class="n">values</span><span class="p">()]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Integer to English Words</title>
			<link>https://jasonyangshadow.win/posts/integer-to-english-words/</link>
			<pubDate>Wed, 04 Mar 2020 19:03:15 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/integer-to-english-words/</guid>
			<description>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.
Example 1:
Input: 123 Output: &amp;quot;One Hundred Twenty Three&amp;quot; Example 2:
Input: 12345 Output: &amp;quot;Twelve Thousand Three Hundred Forty Five&amp;quot; Example 3:
Input: 1234567 Output: &amp;quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&amp;quot; Example 4:
Input: 1234567891 Output: &amp;quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&amp;quot; class Solution: def numberToWords(self, num: int) -&amp;gt; str: to19 = &amp;#39;One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve &amp;#39; \ &amp;#39;Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen&amp;#39;.</description>
			<content type="html"><![CDATA[<p>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.</p>
<p>Example 1:</p>
<pre><code>Input: 123
Output: &quot;One Hundred Twenty Three&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input: 12345
Output: &quot;Twelve Thousand Three Hundred Forty Five&quot;
</code></pre><p>Example 3:</p>
<pre><code>Input: 1234567
Output: &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;
</code></pre><p>Example 4:</p>
<pre><code>Input: 1234567891
Output: &quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&quot;
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numberToWords</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">to19</span> <span class="o">=</span> <span class="s1">&#39;One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve &#39;</span> \
           <span class="s1">&#39;Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen&#39;</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">tens</span> <span class="o">=</span> <span class="s1">&#39;Twenty Thirty Forty Fifty Sixty Seventy Eighty Ninety&#39;</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        
        <span class="k">def</span> <span class="nf">word</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">to19</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="n">n</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">tens</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">10</span><span class="p">)</span> <span class="o">-</span><span class="mi">2</span><span class="p">]]</span> <span class="o">+</span> <span class="n">word</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">to19</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">+</span> <span class="p">[</span><span class="s1">&#39;Hundred&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">word</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">100</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">p</span><span class="p">,</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">((</span><span class="s1">&#39;Thousand&#39;</span><span class="p">,</span> <span class="s1">&#39;Million&#39;</span><span class="p">,</span> <span class="s1">&#39;Billion&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">**</span><span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                    <span class="k">return</span> <span class="n">word</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">1000</span><span class="o">**</span><span class="n">p</span><span class="p">))</span> <span class="o">+</span> <span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">+</span> <span class="n">word</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="mi">1000</span><span class="o">**</span><span class="n">p</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">word</span><span class="p">(</span><span class="n">num</span><span class="p">))</span> <span class="ow">or</span> <span class="s1">&#39;Zero&#39;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Flatten a Multilevel Doubly Linked List</title>
			<link>https://jasonyangshadow.win/posts/flatten-a-multilevel-doubly-linked-list/</link>
			<pubDate>Wed, 04 Mar 2020 18:35:39 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/flatten-a-multilevel-doubly-linked-list/</guid>
			<description>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.
Flatten the list so that all the nodes appear in a single-level, doubly linked list.</description>
			<content type="html"><![CDATA[<p>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.</p>
<p>Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.</p>
<p>Example 1:</p>
<pre><code>Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
Explanation:

The multilevel linked list in the input is as follows:
</code></pre><p><img src="https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png" alt="image"></p>
<pre><code>After flattening the multilevel linked list it becomes:
</code></pre><p><img src="https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png" alt="image"></p>
<p>Example 2:</p>
<pre><code>Input: head = [1,2,null,3]
Output: [1,3,2]
Explanation:

The input multilevel linked list is as follows:

  1---2---NULL
  |
  3---NULL
</code></pre><p>Example 3:</p>
<pre><code>Input: head = []
Output: []
 

How multilevel linked list is represented in test case:

We use the multilevel linked list from Example 1 above:

 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL
The serialization of each level is as follows:

[1,2,3,4,5,6,null]
[7,8,9,10,null]
[11,12,null]
To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:

[1,2,3,4,5,6,null]
[null,null,7,8,9,10,null]
[null,11,12,null]
Merging the serialization of each level and removing trailing nulls we obtain:

[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
</code></pre><p>Constraints:</p>
<p>Number of Nodes will not exceed 1000.
1 &lt;= Node.val &lt;= 10^5</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># Definition for a Node.
</span><span class="s2">class Node:
</span><span class="s2">    def __init__(self, val, prev, next, child):
</span><span class="s2">        self.val = val
</span><span class="s2">        self.prev = prev
</span><span class="s2">        self.next = next
</span><span class="s2">        self.child = child
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">flatten</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="s1">&#39;Node&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;Node&#39;</span><span class="p">:</span>
        <span class="n">cur</span><span class="p">,</span> <span class="n">stack</span> <span class="o">=</span> <span class="n">head</span><span class="p">,</span> <span class="p">[]</span>
        
        <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cur</span><span class="o">.</span><span class="n">child</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span><span class="p">:</span>
                    <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">next</span><span class="p">)</span>
                <span class="n">cur</span><span class="o">.</span><span class="n">next</span><span class="p">,</span> <span class="n">cur</span><span class="o">.</span><span class="n">child</span><span class="o">.</span><span class="n">prev</span><span class="p">,</span> <span class="n">cur</span><span class="o">.</span><span class="n">child</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">child</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span> <span class="ow">and</span> <span class="n">stack</span><span class="p">:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="n">cur</span><span class="o">.</span><span class="n">next</span><span class="p">,</span> <span class="n">left</span><span class="o">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">left</span><span class="p">,</span> <span class="n">cur</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
        <span class="k">return</span> <span class="n">head</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Valid Palindrome 2</title>
			<link>https://jasonyangshadow.win/posts/valid-palindrome-2/</link>
			<pubDate>Wed, 04 Mar 2020 17:17:56 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/valid-palindrome-2/</guid>
			<description>Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.
Example 1: Input: &amp;ldquo;aba&amp;rdquo; Output: True Example 2: Input: &amp;ldquo;abca&amp;rdquo; Output: True Explanation: You could delete the character &amp;lsquo;c&amp;rsquo;. Note: The string will only contain lowercase characters a-z. The maximum length of the string is 50000.
Though this problem is in easy level. It is still interesting to write the code for it.</description>
			<content type="html"><![CDATA[<p>Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.</p>
<p>Example 1:
Input: &ldquo;aba&rdquo;
Output: True
Example 2:
Input: &ldquo;abca&rdquo;
Output: True
Explanation: You could delete the character &lsquo;c&rsquo;.
Note:
The string will only contain lowercase characters a-z. The maximum length of the string is 50000.</p>
<p>Though this problem is in easy level. It is still interesting to write the code for it. There are at most 2 different continuous chars allowed.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">validPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        :type s: str
</span><span class="s2">        :rtype: bool
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="c1"># Time: O(n)</span>
        <span class="c1"># Space: O(n)</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">!=</span> <span class="n">s</span><span class="p">[</span><span class="n">right</span><span class="p">]:</span>
                <span class="n">one</span><span class="p">,</span> <span class="n">two</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">left</span><span class="p">:</span><span class="n">right</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
                <span class="k">return</span> <span class="n">one</span> <span class="o">==</span> <span class="n">one</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">or</span> <span class="n">two</span> <span class="o">==</span> <span class="n">two</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Max Area of Island</title>
			<link>https://jasonyangshadow.win/posts/max-area-of-island/</link>
			<pubDate>Tue, 03 Mar 2020 17:38:33 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/max-area-of-island/</guid>
			<description>Given a non-empty 2D array grid of 0&amp;rsquo;s and 1&amp;rsquo;s, an island is a group of 1&amp;rsquo;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)
Example 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0], [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]] Given the above grid, return 6.</description>
			<content type="html"><![CDATA[<p>Given a non-empty 2D array grid of 0&rsquo;s and 1&rsquo;s, an island is a group of 1&rsquo;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>
<p>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)</p>
<p>Example 1:</p>
<pre><code>[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.
</code></pre><p>Example 2:</p>
<pre><code>[[0,0,0,0,0,0,0,0]]
Given the above grid, return 0.
</code></pre><p>Note: The length of each dimension in the given grid does not exceed 50.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxAreaOfIsland</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
            <span class="k">if</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span> <span class="ow">and</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">+</span> <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">+</span> <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="n">areas</span> <span class="o">=</span> <span class="p">[</span><span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]]</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">areas</span><span class="p">)</span> <span class="k">if</span> <span class="n">areas</span> <span class="k">else</span> <span class="mi">0</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Validate IP Address</title>
			<link>https://jasonyangshadow.win/posts/validate-ip-address/</link>
			<pubDate>Tue, 03 Mar 2020 17:14:12 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/validate-ip-address/</guid>
			<description>Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.
IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots (&amp;rdquo;.&amp;quot;), e.g.,172.16.254.1;
Besides, leading zeros in the IPv4 is invalid. For example, the address 172.16.254.01 is invalid.
IPv6 addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits.</description>
			<content type="html"><![CDATA[<p>Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.</p>
<p>IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots (&rdquo;.&quot;), e.g.,172.16.254.1;</p>
<p>Besides, leading zeros in the IPv4 is invalid. For example, the address 172.16.254.01 is invalid.</p>
<p>IPv6 addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons (&quot;:&quot;). For example, the address 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is a valid one. Also, we could omit some leading zeros among four hexadecimal digits and some low-case characters in the address to upper-case ones, so 2001:db8:85a3:0:0:8A2E:0370:7334 is also a valid IPv6 address(Omit leading zeros and using upper cases).</p>
<p>However, we don&rsquo;t replace a consecutive group of zero value with a single empty group using two consecutive colons (::) to pursue simplicity. For example, 2001:0db8:85a3::8A2E:0370:7334 is an invalid IPv6 address.</p>
<p>Besides, extra leading zeros in the IPv6 is also invalid. For example, the address 02001:0db8:85a3:0000:0000:8a2e:0370:7334 is invalid.</p>
<p>Note: You may assume there is no extra space or special characters in the input string.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;172.16.254.1&quot;

Output: &quot;IPv4&quot;

Explanation: This is a valid IPv4 address, return &quot;IPv4&quot;.
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;

Output: &quot;IPv6&quot;

Explanation: This is a valid IPv6 address, return &quot;IPv6&quot;.
</code></pre><p>Example 3:</p>
<pre><code>Input: &quot;256.256.256.256&quot;

Output: &quot;Neither&quot;

Explanation: This is neither a IPv4 address nor a IPv6 address.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">validIPAddress</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">IP</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">ipv4</span><span class="p">(</span><span class="n">ipstr</span><span class="p">):</span>
            <span class="n">ips</span> <span class="o">=</span> <span class="n">ipstr</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
            <span class="c1">#ipv4 must have 4 blocks</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ips</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="k">for</span> <span class="n">ip</span> <span class="ow">in</span> <span class="n">ips</span><span class="p">:</span>
                <span class="c1"># 01.01 is wrong</span>
                <span class="c1"># not digit wrong</span>
                <span class="c1"># num limitation [0,255]</span>
                <span class="k">if</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">ip</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">))</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">ip</span><span class="o">.</span><span class="n">isdigit</span><span class="p">()</span> <span class="ow">or</span> <span class="nb">int</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nb">int</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">255</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
            <span class="k">return</span> <span class="bp">True</span>
            
        <span class="k">def</span> <span class="nf">ipv6</span><span class="p">(</span><span class="n">ipstr</span><span class="p">):</span>
            <span class="c1">#ipv6 does not have &#39;::&#39;</span>
            <span class="k">if</span> <span class="s1">&#39;::&#39;</span> <span class="ow">in</span> <span class="n">ipstr</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">ips</span> <span class="o">=</span> <span class="n">ipstr</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
            <span class="c1">#must 8 blocks</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ips</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">8</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="k">for</span> <span class="n">ip</span> <span class="ow">in</span> <span class="n">ips</span><span class="p">:</span>
                <span class="c1">#each block longest length is 4</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="c1">#between [0,f]</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">ip</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="s1">&#39;0&#39;</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="s1">&#39;f&#39;</span><span class="p">:</span>
                        <span class="k">return</span> <span class="bp">False</span>
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="n">ret</span> <span class="o">=</span> <span class="n">ipv4</span><span class="p">(</span><span class="n">IP</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ret</span><span class="p">:</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">ipv6</span><span class="p">(</span><span class="n">IP</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">ret</span><span class="p">:</span>
                <span class="k">return</span> <span class="s2">&#34;IPv6&#34;</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="s2">&#34;Neither&#34;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;IPv4&#34;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Course Schedule 2</title>
			<link>https://jasonyangshadow.win/posts/course-schedule-2/</link>
			<pubDate>Tue, 03 Mar 2020 16:51:11 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/course-schedule-2/</guid>
			<description>There are a total of n courses you have to take, labeled from 0 to n-1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.
There may be multiple correct orders, you just need to return one of them.</description>
			<content type="html"><![CDATA[<p>There are a total of n courses you have to take, labeled from 0 to n-1.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>
<p>Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.</p>
<p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.</p>
<p>Example 1:</p>
<pre><code>Input: 2, [[1,0]] 
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   
             course 0. So the correct course order is [0,1] .
</code></pre><p>Example 2:</p>
<pre><code>Input: 4, [[1,0],[2,0],[3,1],[3,2]]
Output: [0,1,2,3] or [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .
</code></pre><p>Note:</p>
<p>The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findOrder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">numCourses</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">prerequisites</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="c1">#dep[i] depends on set()</span>
        <span class="c1">#rdep[i] is the dependencies of set()</span>
        <span class="n">dep</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">set</span><span class="p">)</span>
        <span class="n">rdep</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">set</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">prerequisites</span><span class="p">:</span>
            <span class="n">dep</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
            <span class="n">rdep</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            
        <span class="c1">#find isolated item firstly(no dependencies)</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numCourses</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">dep</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            
            <span class="c1">#get all items depending on current item</span>
            <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rdep</span><span class="p">[</span><span class="n">c</span><span class="p">]:</span>
                <span class="c1">#remove current item in its dependency list</span>
                <span class="n">dep</span><span class="p">[</span><span class="n">r</span><span class="p">]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
                <span class="c1">#if empty which means all its dependencies are processed, we turn to find the item depending on r</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">dep</span><span class="p">[</span><span class="n">r</span><span class="p">]:</span>
                    <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
            <span class="c1">#remove processed item</span>
            <span class="n">dep</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">res</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">dep</span> <span class="k">else</span> <span class="p">[]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Remove Comments</title>
			<link>https://jasonyangshadow.win/posts/remove-comments/</link>
			<pubDate>Tue, 03 Mar 2020 15:38:59 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/remove-comments/</guid>
			<description>Given a C++ program, remove comments from it. The program source is an array where source[i] is the i-th line of the source code. This represents the result of splitting the original source code string by the newline character \n.
In C++, there are two types of comments, line comments, and block comments.
The string // denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.</description>
			<content type="html"><![CDATA[<p>Given a C++ program, remove comments from it. The program source is an array where source[i] is the i-th line of the source code. This represents the result of splitting the original source code string by the newline character \n.</p>
<p>In C++, there are two types of comments, line comments, and block comments.</p>
<p>The string // denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.</p>
<p>The string /* denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of */ should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string /*/ does not yet end the block comment, as the ending would be overlapping the beginning.</p>
<p>The first effective comment takes precedence over others: if the string // occurs in a block comment, it is ignored. Similarly, if the string /* occurs in a line or block comment, it is also ignored.</p>
<p>If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.</p>
<p>There will be no control characters, single quote, or double quote characters. For example, source = &ldquo;string s = &ldquo;/* Not a comment. */&quot;;&rdquo; will not be a test case. (Also, nothing else such as defines or macros will interfere with the comments.)</p>
<p>It is guaranteed that every open block comment will eventually be closed, so /* outside of a line or block comment always starts a new comment.</p>
<p>Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details.</p>
<p>After removing the comments from the source code, return the source code in the same format.</p>
<p>Example 1:</p>
<pre><code>Input: 
source = [&quot;/*Test program */&quot;, &quot;int main()&quot;, &quot;{ &quot;, &quot;  // variable declaration &quot;, &quot;int a, b, c;&quot;, &quot;/* This is a test&quot;, &quot;   multiline  &quot;, &quot;   comment for &quot;, &quot;   testing */&quot;, &quot;a = b + c;&quot;, &quot;}&quot;]

The line by line code is visualized as below:
/*Test program */
int main()
{ 
  // variable declaration 
int a, b, c;
/* This is a test
   multiline  
   comment for 
   testing */
a = b + c;
}

Output: [&quot;int main()&quot;,&quot;{ &quot;,&quot;  &quot;,&quot;int a, b, c;&quot;,&quot;a = b + c;&quot;,&quot;}&quot;]

The line by line code is visualized as below:
int main()
{ 
  
int a, b, c;
a = b + c;
}

Explanation: 
The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.
</code></pre><p>Example 2:</p>
<pre><code>Input: 
source = [&quot;a/*comment&quot;, &quot;line&quot;, &quot;more_comment*/b&quot;]
Output: [&quot;ab&quot;]
Explanation: The original source string is &quot;a/*comment\nline\nmore_comment*/b&quot;, where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string &quot;ab&quot;, which when delimited by newline characters becomes [&quot;ab&quot;].
</code></pre><p>use regular expression to check and replace<br>
explanation:</p>
<pre><code>//.* any line starts with '//'
/\*(.|\n)*?\*/ any block starts with /* and ends with */ including anything(include \n)

if function in filter(function, iterator) is None, then any item in iterator with the value of False will be removed 
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeComments</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nb">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;//.*|/\*(.|</span><span class="se">\n</span><span class="s1">)*?\*/&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">source</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">))</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeComments</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">res</span><span class="p">,</span> <span class="nb">buffer</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[],</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="bp">False</span>
        
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">source</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="c1">#check every char in the string</span>
            <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
                <span class="n">char</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">b</span><span class="p">:</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
                <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">b</span><span class="p">:</span>
                    <span class="n">b</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="c1">#skip next *</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span> <span class="ow">and</span> <span class="n">b</span><span class="p">:</span>
                    <span class="n">b</span> <span class="o">=</span> <span class="bp">False</span>
                    <span class="c1">#skip next /</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="ow">not</span> <span class="n">b</span><span class="p">:</span>
                    <span class="nb">buffer</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="c1">#increase i because we need to check the next one</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="nb">buffer</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">b</span><span class="p">:</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">buffer</span><span class="p">)</span>
                <span class="nb">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Meeting Rooms</title>
			<link>https://jasonyangshadow.win/posts/meeting-rooms/</link>
			<pubDate>Tue, 03 Mar 2020 15:10:36 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/meeting-rooms/</guid>
			<description>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],&amp;hellip;] (si &amp;lt; ei), determine if a person could attend all meetings.
Example 1:
Input: [[0,30],[5,10],[15,20]] Output: false Example 2:
Input: [[7,10],[2,4]] Output: true class Solution: def canAttendMeetings(self, intervals: List[List[int]]) -&amp;gt; bool: #most important thing here is we use a customized key function for sorted def skey(key): return key[0] intervals = sorted(intervals, key=skey) i = 1 #check if any conflicts while i &amp;lt; len(intervals): if intervals[i-1][1] &amp;gt; intervals[i][0]: return False i += 1 return True </description>
			<content type="html"><![CDATA[<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],&hellip;] (si &lt; ei), determine if a person could attend all meetings.</p>
<p>Example 1:</p>
<pre><code>Input: [[0,30],[5,10],[15,20]]
Output: false
</code></pre><p>Example 2:</p>
<pre><code>Input: [[7,10],[2,4]]
Output: true
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">canAttendMeetings</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">intervals</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="c1">#most important thing here is we use a customized key function for sorted</span>
        <span class="k">def</span> <span class="nf">skey</span><span class="p">(</span><span class="n">key</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">key</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        
        <span class="n">intervals</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">intervals</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">skey</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="c1">#check if any conflicts</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">intervals</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">intervals</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">intervals</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Hashmap</title>
			<link>https://jasonyangshadow.win/posts/design-hashmap/</link>
			<pubDate>Mon, 02 Mar 2020 21:09:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-hashmap/</guid>
			<description>Design a HashMap without using any built-in hash table libraries.
To be specific, your design should include these functions:
put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value. get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key. remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.</description>
			<content type="html"><![CDATA[<p>Design a HashMap without using any built-in hash table libraries.</p>
<p>To be specific, your design should include these functions:</p>
<p>put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.
get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.</p>
<p>Example:</p>
<pre><code>MyHashMap hashMap = new MyHashMap();
hashMap.put(1, 1);          
hashMap.put(2, 2);         
hashMap.get(1);            // returns 1
hashMap.get(3);            // returns -1 (not found)
hashMap.put(2, 1);          // update the existing value
hashMap.get(2);            // returns 1 
hashMap.remove(2);          // remove the mapping for 2
hashMap.get(2);            // returns -1 (not found) 
</code></pre><p>Note:</p>
<p>All keys and values will be in the range of [0, 1000000].
The number of operations will be in the range of [1, 10000].
Please do not use the built-in HashMap library.</p>
<p>Explanation:<br>
using a linked list to process conflicted items with the same hash value</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="bp">None</span>
        
<span class="k">class</span> <span class="nc">MyHashMap</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">=</span> <span class="mi">1001</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span>
        

    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        value will always be non-negative.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">hs</span> <span class="o">=</span> <span class="n">key</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">[</span><span class="n">hs</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">[</span><span class="n">hs</span><span class="p">]</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">[</span><span class="n">hs</span><span class="p">]</span>
            <span class="k">while</span> <span class="n">item</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">item</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                    <span class="n">item</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
                    <span class="k">break</span>
                <span class="k">if</span> <span class="n">item</span><span class="o">.</span><span class="n">next</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">item</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">key</span><span class="p">:</span>
                    <span class="n">item</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
                    <span class="k">break</span>
                <span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">next</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">hs</span> <span class="o">=</span> <span class="n">key</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">[</span><span class="n">hs</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">[</span><span class="n">hs</span><span class="p">]</span>
            <span class="k">while</span> <span class="n">item</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">item</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">item</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">next</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        

    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Removes the mapping of the specified value key if this map contains a mapping for the key
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">hs</span> <span class="o">=</span> <span class="n">key</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">[</span><span class="n">hs</span><span class="p">]</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">prev</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">[</span><span class="n">hs</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">cur</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="k">if</span> <span class="n">cur</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">[</span><span class="n">hs</span><span class="p">]</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
                <span class="k">while</span> <span class="n">cur</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">cur</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                        <span class="n">prev</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span>
                        <span class="k">break</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">cur</span><span class="p">,</span><span class="n">prev</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">next</span><span class="p">,</span> <span class="n">prev</span><span class="o">.</span><span class="n">next</span>


<span class="c1"># Your MyHashMap object will be instantiated and called as such:</span>
<span class="c1"># obj = MyHashMap()</span>
<span class="c1"># obj.put(key,value)</span>
<span class="c1"># param_2 = obj.get(key)</span>
<span class="c1"># obj.remove(key)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Word Ladder</title>
			<link>https://jasonyangshadow.win/posts/word-ladder/</link>
			<pubDate>Mon, 02 Mar 2020 19:38:44 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/word-ladder/</guid>
			<description>Given two words (beginWord and endWord), and a dictionary&amp;rsquo;s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:
Only one letter can be changed at a time. Each transformed word must exist in the word list. Note that beginWord is not a transformed word. Note:
Return 0 if there is no such transformation sequence. All words have the same length. All words contain only lowercase alphabetic characters.</description>
			<content type="html"><![CDATA[<p>Given two words (beginWord and endWord), and a dictionary&rsquo;s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:</p>
<p>Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:</p>
<p>Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:</p>
<pre><code>Input:
beginWord = &quot;hit&quot;,
endWord = &quot;cog&quot;,
wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]

Output: 5

Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,
return its length 5.
</code></pre><p>Example 2:</p>
<pre><code>Input:
beginWord = &quot;hit&quot;
endWord = &quot;cog&quot;
wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]

Output: 0

Explanation: The endWord &quot;cog&quot; is not in wordList, therefore no possible transformation.
</code></pre><p>Explanation:<br>
A bfs solution that create all possible combinations in matrix and search endWorld in them</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">ladderLength</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">beginWord</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">endWord</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">wordList</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1">#word length</span>
        <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">beginWord</span><span class="p">)</span>
        <span class="n">wordlist</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">wordList</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">endWord</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">wordList</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="n">wordlist</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">beginWord</span><span class="p">)</span>
        <span class="n">matrix</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">wordList</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="n">s</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="c1">#matrix is something like</span>
        <span class="c1"># _ot = [hot, lot], h_t = [hot, hit] ... all combinations in wordLists are listed here</span>
                
        <span class="n">queue</span> <span class="o">=</span> <span class="p">[</span><span class="n">beginWord</span><span class="p">]</span>
        <span class="n">visited</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="n">visited</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">beginWord</span><span class="p">)</span>
        <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
            <span class="n">next_queue</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
            <span class="c1">#get the leftmost one</span>
                <span class="n">word</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                    <span class="n">s</span> <span class="o">=</span> <span class="n">word</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;_&#34;</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
                    <span class="k">for</span> <span class="n">next_word</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">[</span><span class="n">s</span><span class="p">]:</span>
                    <span class="c1">#if not tested, test it otherwise skip</span>
                        <span class="k">if</span> <span class="n">next_word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">visited</span><span class="p">:</span>
                            <span class="k">if</span> <span class="n">next_word</span> <span class="o">==</span> <span class="n">endWord</span><span class="p">:</span>
                                <span class="k">return</span> <span class="n">step</span> <span class="o">+</span> <span class="mi">1</span>
                            <span class="n">visited</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">next_word</span><span class="p">)</span>
                            <span class="n">next_queue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">next_word</span><span class="p">)</span>
            <span class="n">queue</span> <span class="o">=</span> <span class="n">next_queue</span> <span class="c1">#bfs loop to test</span>
            <span class="n">step</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="mi">0</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Open the Lock</title>
			<link>https://jasonyangshadow.win/posts/open-the-lock/</link>
			<pubDate>Mon, 02 Mar 2020 15:38:00 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/open-the-lock/</guid>
			<description>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: &amp;lsquo;0&amp;rsquo;, &amp;lsquo;1&amp;rsquo;, &amp;lsquo;2&amp;rsquo;, &amp;lsquo;3&amp;rsquo;, &amp;lsquo;4&amp;rsquo;, &amp;lsquo;5&amp;rsquo;, &amp;lsquo;6&amp;rsquo;, &amp;lsquo;7&amp;rsquo;, &amp;lsquo;8&amp;rsquo;, &amp;lsquo;9&amp;rsquo;. The wheels can rotate freely and wrap around: for example we can turn &amp;lsquo;9&amp;rsquo; to be &amp;lsquo;0&amp;rsquo;, or &amp;lsquo;0&amp;rsquo; to be &amp;lsquo;9&amp;rsquo;. Each move consists of turning one wheel one slot.
The lock initially starts at &amp;lsquo;0000&amp;rsquo;, a string representing the state of the 4 wheels.</description>
			<content type="html"><![CDATA[<p>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: &lsquo;0&rsquo;, &lsquo;1&rsquo;, &lsquo;2&rsquo;, &lsquo;3&rsquo;, &lsquo;4&rsquo;, &lsquo;5&rsquo;, &lsquo;6&rsquo;, &lsquo;7&rsquo;, &lsquo;8&rsquo;, &lsquo;9&rsquo;. The wheels can rotate freely and wrap around: for example we can turn &lsquo;9&rsquo; to be &lsquo;0&rsquo;, or &lsquo;0&rsquo; to be &lsquo;9&rsquo;. Each move consists of turning one wheel one slot.</p>
<p>The lock initially starts at &lsquo;0000&rsquo;, a string representing the state of the 4 wheels.</p>
<p>You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</p>
<p>Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</p>
<p>Example 1:</p>
<pre><code>Input: deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;  
Output: 6  
Explanation:  
A sequence of valid moves would be &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;.  
Note that a sequence like &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; would be invalid, because the wheels of the lock become stuck after the display becomes the dead end &quot;0102&quot;.  
</code></pre><p>Example 2:</p>
<pre><code>Input: deadends = [&quot;8888&quot;], target = &quot;0009&quot;
Output: 1
Explanation:
We can turn the last wheel in reverse to move from &quot;0000&quot; -&gt; &quot;0009&quot;.
</code></pre><p>Example 3:</p>
<pre><code>Input: deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;
Output: -1
Explanation:
We can't reach the target without getting stuck.
</code></pre><p>Example 4:</p>
<pre><code>Input: deadends = [&quot;0000&quot;], target = &quot;8888&quot;
Output: -1
</code></pre><p>Note:
The length of deadends will be in the range [1, 500].
target will not be in the list deadends.
Every string in deadends and the string target will be a string of 4 digits from the 10,000 possibilities &lsquo;0000&rsquo; to &lsquo;9999&rsquo;.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">openLock</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">deadends</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1">#the count for turning wheels</span>
        <span class="n">count</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="c1">#visited -&gt; including failing trials, including visited and deadends</span>
        <span class="n">visited</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">deadends</span><span class="p">),</span><span class="n">deque</span><span class="p">([</span><span class="s2">&#34;0000&#34;</span><span class="p">])</span>
        
        <span class="c1">#turn the wheel</span>
        <span class="k">def</span> <span class="nf">extend</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
            <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="c1">#for each wheel(4 here)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">ch</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
                <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
                <span class="c1">#here -1 % 10 = 9 only python has this feature</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="nb">str</span><span class="p">((</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="n">node</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="nb">str</span><span class="p">((</span><span class="n">num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="n">node</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>    
            <span class="c1">#return all combinations</span>
            <span class="k">return</span> <span class="n">res</span>
                
        
        <span class="c1">#test every one</span>
        <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
            <span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
                <span class="c1">#bfs search</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span> <span class="k">return</span> <span class="n">count</span>
                <span class="k">if</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">visited</span><span class="p">:</span> <span class="k">continue</span>
                <span class="n">visited</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
                <span class="n">q</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">extend</span><span class="p">(</span><span class="n">node</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Remove Duplicate Letters</title>
			<link>https://jasonyangshadow.win/posts/remove-duplicate-letters/</link>
			<pubDate>Mon, 02 Mar 2020 15:04:43 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/remove-duplicate-letters/</guid>
			<description>Given a string which contains only lowercase letters, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.
Example 1:
Input: &amp;quot;bcabc&amp;quot; Output: &amp;quot;abc&amp;quot; Example 2:
Input: &amp;quot;cbacdcbc&amp;quot; Output: &amp;quot;acdb&amp;quot; Explanation:
First, given &amp;quot;bcabc&amp;quot;, the solution should be &amp;quot;abc&amp;quot;. If we think about this problem intuitively, you would sort of go from the beginning of the string and start removing one if there is still the same character left and a smaller character is after it.</description>
			<content type="html"><![CDATA[<p>Given a string which contains only lowercase letters, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</p>
<p>Example 1:</p>
<pre><code>Input: &quot;bcabc&quot;
Output: &quot;abc&quot;
</code></pre><p>Example 2:</p>
<pre><code>Input: &quot;cbacdcbc&quot;
Output: &quot;acdb&quot;
</code></pre><p>Explanation:</p>
<pre><code>First, given &quot;bcabc&quot;, the solution should be &quot;abc&quot;. If we think about this problem intuitively, you would sort of go from the beginning of the string and start removing one if there is still the same character left and a smaller character is after it. Given &quot;bcabc&quot;, when you see a 'b', keep it and continue with the search, then keep the following 'c', then we see an 'a'. Now we get a chance to get a smaller lexi order, you can check if after 'a', there is still 'b' and 'c' or not. We indeed have them and &quot;abc&quot; will be our result.

Come to the implementation, we need some data structure to store the previous characters 'b' and 'c', and we need to compare the current character with previous saved ones, and if there are multiple same characters, we prefer left ones. This calls for a stack.

After we decided to use stack, the implementation becomes clearer. From the intuition, we know that we need to know if there are still remaining characters left or not. So we need to iterate the array and save how many each characters are there. A visited array is also required since we want unique character in the solution. The line while(!stack.isEmpty() &amp;&amp; stack.peek() &gt; c &amp;&amp; count[stack.peek()-'a'] &gt; 0) checks that the queued character should be removed or not, like the 'b' and 'c' in the previous example. After removing the previous characters, push in the new char and mark the visited array.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeDuplicateLetters</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="c1">#count of appearance of each char in string</span>
        <span class="n">count</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">26</span>
        <span class="k">for</span> <span class="n">sc</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="n">count</span><span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="c1">#visit array for each char</span>
        <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="mi">26</span>
        
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">sc</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="c1">#decrease the count of visit times</span>
            <span class="n">count</span><span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)]</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">visited</span><span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)]:</span>
                <span class="k">continue</span>
            
            <span class="c1">#if the last item&#39;s value in stack is larger than current char, and still we have duplicated char</span>
            <span class="k">while</span> <span class="n">stack</span> <span class="ow">and</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">sc</span> <span class="ow">and</span> <span class="n">count</span><span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">visited</span><span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="c1">#pop until peek item&#39;s value is smaller than current char until to the last one</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                
            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span>
            <span class="n">visited</span><span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">True</span>
        
        <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Binary Tree Coloring Game</title>
			<link>https://jasonyangshadow.win/posts/binary-tree-coloring-game/</link>
			<pubDate>Sun, 01 Mar 2020 16:01:04 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/binary-tree-coloring-game/</guid>
			<description>Two players play a turn based game on a binary tree. We are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n.
Initially, the first player names a value x with 1 &amp;lt;= x &amp;lt;= n, and the second player names a value y with 1 &amp;lt;= y &amp;lt;= n and y !</description>
			<content type="html"><![CDATA[<p>Two players play a turn based game on a binary tree.  We are given the root of this binary tree, and the number of nodes n in the tree.  n is odd, and each node has a distinct value from 1 to n.</p>
<p>Initially, the first player names a value x with 1 &lt;= x &lt;= n, and the second player names a value y with 1 &lt;= y &lt;= n and y != x.  The first player colors the node with value x red, and the second player colors the node with value y blue.</p>
<p>Then, the players take turns starting with the first player.  In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)</p>
<p>If (and only if) a player cannot choose such a node in this way, they must pass their turn.  If both players pass their turn, the game ends, and the winner is the player that colored more nodes.</p>
<p>You are the second player.  If it is possible to choose such a y to ensure you win the game, return true.  If it is not possible, return false.</p>
<p>Example 1:
<img src="https://assets.leetcode.com/uploads/2019/08/01/1480-binary-tree-coloring-game.png" alt="image"></p>
<pre><code>Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
Output: true
Explanation: The second player can choose the node with value 2.
</code></pre><p>Explanation:</p>
<pre><code>Count left and right children's nodes of the player 1's initial node with value x. Lets call countLeft and countRight.  

1. if countLeft or countRight are bigger than n/2, player 2 chooses this child of the node and will win.
2. If countLeft + countRight + 1 is smaller than n/2, player 2 chooses the parent of the node and will win;
3. otherwise, player 2 has not chance to win.
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">btreeGameWinningMove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">left_num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">right_num</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">def</span> <span class="nf">countnode</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">countnode</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">countnode</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">x</span><span class="p">:</span>
                <span class="n">left_num</span> <span class="o">=</span> <span class="n">l</span>
                <span class="n">right_num</span> <span class="o">=</span> <span class="n">r</span>
            <span class="k">return</span> <span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span>
        
        <span class="n">countnode</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">left_num</span> <span class="o">+</span> <span class="n">right_num</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">if</span> <span class="n">left_num</span><span class="o">&gt;</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span> <span class="ow">or</span> <span class="n">right_num</span><span class="o">&gt;</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
    
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Remove K Digits</title>
			<link>https://jasonyangshadow.win/posts/remove-k-digits/</link>
			<pubDate>Sun, 01 Mar 2020 14:38:05 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/remove-k-digits/</guid>
			<description>Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
Note: The length of num is less than 10002 and will be ≥ k. The given num does not contain any leading zero.
Example 1: Input: num = &amp;quot;1432219&amp;quot;, k = 3 Output: &amp;quot;1219&amp;quot; Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.</description>
			<content type="html"><![CDATA[<p>Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.</p>
<p>Note:
The length of num is less than 10002 and will be ≥ k.
The given num does not contain any leading zero.</p>
<pre><code>Example 1:

Input: num = &quot;1432219&quot;, k = 3
Output: &quot;1219&quot;
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
</code></pre><pre><code>Example 2:

Input: num = &quot;10200&quot;, k = 1
Output: &quot;200&quot;
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
</code></pre><pre><code>Example 3:

Input: num = &quot;10&quot;, k = 2
Output: &quot;0&quot;
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
</code></pre><p>The way to make number as small as possible is equal to make right most digit as small as possible</p>
<p>as example of &ldquo;1432219&rdquo;<br>
[]<br>
[&lsquo;1&rsquo;] =&gt; since stack is empty , just add into stack<br>
[&lsquo;1&rsquo;, &lsquo;4&rsquo;] =&gt; since 1 &lt; 4, so we do not need to repalce<br>
[&lsquo;1&rsquo;, &lsquo;3&rsquo;] =&gt; since 3 is less than 4, andwe have k(3)&ndash; times able to remove,so we can<br>
replace 4 with 3<br>
[&lsquo;1&rsquo;, &lsquo;2&rsquo;] =&gt; 2 &lt; 3, replace 3 with 2 k(2) &ndash;<br>
[&lsquo;1&rsquo;, &lsquo;2&rsquo;, &lsquo;2&rsquo;] =&gt; 2 == 2, continue<br>
[&lsquo;1&rsquo;, &lsquo;2&rsquo;, &lsquo;1&rsquo;] =&gt; since 1 &lt; 2, replace it k(1)&ndash;<br>
[&lsquo;1&rsquo;, &lsquo;2&rsquo;, &lsquo;1&rsquo;, &lsquo;9&rsquo;] =&gt; does not matter the next number is less or greater, since k is zero, we can not remove any more digit, so this is the end of program&rdquo;</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeKdigits</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
            
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="c1">#if we could not remove any digits any more</span>
                <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">stack</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="c1">#we need to pop if candidate&#39;s value is smaller than top item&#39;s value in stack</span>
                <span class="k">if</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">s</span><span class="p">:</span>
                    <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span> <span class="c1">#need to decrease k</span>
                    <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">break</span>
            
            <span class="c1">#add to stack</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            
        <span class="c1">#if k is not 0, we have to remove another k items</span>
        <span class="k">while</span> <span class="n">k</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span>
        
        <span class="c1">#remove any 0 in the head</span>
        <span class="k">while</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">stack</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">stack</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;0&#34;</span><span class="p">:</span>
                <span class="n">stack</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>
                
        <span class="k">if</span> <span class="ow">not</span> <span class="n">stack</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;0&#34;</span>
        <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Flood Fill</title>
			<link>https://jasonyangshadow.win/posts/flood-fill/</link>
			<pubDate>Sun, 01 Mar 2020 13:53:36 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/flood-fill/</guid>
			<description>An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).
Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, &amp;ldquo;flood fill&amp;rdquo; the image.
To perform a &amp;ldquo;flood fill&amp;rdquo;, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.</description>
			<content type="html"><![CDATA[<p>An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).</p>
<p>Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, &ldquo;flood fill&rdquo; the image.</p>
<p>To perform a &ldquo;flood fill&rdquo;, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.</p>
<p>At the end, return the modified image.</p>
<p>Example 1:
Input:
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
Explanation:
From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected
by a path of the same color as the starting pixel are colored with the new color.
Note the bottom corner is not colored 2, because it is not 4-directionally connected
to the starting pixel.
Note:</p>
<p>The length of image and image[0] will be in the range [1, 50].
The given starting pixel will satisfy 0 &lt;= sr &lt; image.length and 0 &lt;= sc &lt; image[0].length.
The value of each color in image[i][j] and newColor will be an integer in [0, 65535].</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">floodFill</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">image</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">sr</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">sc</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">newColor</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">image</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">image</span>
        
        <span class="n">oldColor</span> <span class="o">=</span> <span class="n">image</span><span class="p">[</span><span class="n">sr</span><span class="p">][</span><span class="n">sc</span><span class="p">]</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
            <span class="n">image</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">newColor</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="p">((</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)):</span>
                <span class="k">if</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">x</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">y</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">and</span> <span class="n">image</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">oldColor</span><span class="p">:</span>
                    <span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">oldColor</span> <span class="o">!=</span> <span class="n">newColor</span><span class="p">:</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">sr</span><span class="p">,</span><span class="n">sc</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">image</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Day of the Week</title>
			<link>https://jasonyangshadow.win/posts/day-of-the-week/</link>
			<pubDate>Sat, 29 Feb 2020 20:39:31 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/day-of-the-week/</guid>
			<description>Given a date, return the corresponding day of the week for that date. The input is given as three integers representing the day, month and year respectively. Return the answer as one of the following values {&amp;ldquo;Sunday&amp;rdquo;, &amp;ldquo;Monday&amp;rdquo;, &amp;ldquo;Tuesday&amp;rdquo;, &amp;ldquo;Wednesday&amp;rdquo;, &amp;ldquo;Thursday&amp;rdquo;, &amp;ldquo;Friday&amp;rdquo;, &amp;ldquo;Saturday&amp;rdquo;}. Example 1: Input: day = 31, month = 8, year = 2019 Output: &amp;ldquo;Saturday&amp;rdquo; Example 2: Input: day = 18, month = 7, year = 1999 Output:</description>
			<content type="html"><![CDATA[<p>Given a date, return the corresponding day of the week for that date.</p>
<p>The input is given as three integers representing the day, month and year respectively.</p>
<p>Return the answer as one of the following values {&ldquo;Sunday&rdquo;, &ldquo;Monday&rdquo;, &ldquo;Tuesday&rdquo;, &ldquo;Wednesday&rdquo;, &ldquo;Thursday&rdquo;, &ldquo;Friday&rdquo;, &ldquo;Saturday&rdquo;}.</p>
<p>Example 1:</p>
<p>Input: day = 31, month = 8, year = 2019
Output: &ldquo;Saturday&rdquo;
Example 2:</p>
<p>Input: day = 18, month = 7, year = 1999
Output: &ldquo;Sunday&rdquo;
Example 3:</p>
<p>Input: day = 15, month = 8, year = 1993
Output: &ldquo;Sunday&rdquo;</p>
<p>Constraints:</p>
<p>The given dates are valid dates between the years 1971 and 2100.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">dayOfTheWeek</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">day</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">month</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">year</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        
        <span class="c1">#闰年</span>
        <span class="k">def</span> <span class="nf">hasLeepDay</span><span class="p">(</span><span class="n">year</span><span class="p">):</span>
            <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
        
        <span class="c1">#the order is decided by 2019-09-14, this day is Saturday</span>
        <span class="n">dayNames</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Saturday&#34;</span><span class="p">,</span> <span class="s2">&#34;Sunday&#34;</span><span class="p">,</span> <span class="s2">&#34;Monday&#34;</span><span class="p">,</span> <span class="s2">&#34;Tuesday&#34;</span><span class="p">,</span> <span class="s2">&#34;Wednesday&#34;</span><span class="p">,</span> <span class="s2">&#34;Thursday&#34;</span><span class="p">,</span> <span class="s2">&#34;Friday&#34;</span><span class="p">]</span>
        <span class="n">daysInMonth</span> <span class="o">=</span> <span class="p">[</span><span class="mi">31</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">]</span>
        
        <span class="c1">#from 1970-01-01</span>
        <span class="k">def</span> <span class="nf">daySinceStart</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
            <span class="n">numDays</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">year</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1970</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">numDays</span> <span class="o">+=</span> <span class="mi">365</span> <span class="o">+</span> <span class="n">hasLeepDay</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
            <span class="n">numDays</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">daysInMonth</span><span class="p">[:</span><span class="n">month</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="n">numDays</span> <span class="o">+=</span> <span class="n">day</span>
            <span class="k">if</span> <span class="n">month</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">numDays</span> <span class="o">+=</span> <span class="n">hasLeepDay</span><span class="p">(</span><span class="n">year</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">numDays</span>
        
        
        <span class="n">knownStart</span> <span class="o">=</span> <span class="n">daySinceStart</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">2019</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">daySinceStart</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span> 
        <span class="c1">#the day from 2019-09-14</span>
        <span class="k">return</span> <span class="n">dayNames</span><span class="p">[</span> <span class="p">(</span><span class="n">d</span> <span class="o">-</span> <span class="n">knownStart</span><span class="p">)</span> <span class="o">%</span> <span class="mi">7</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Design Tic Tac Toe</title>
			<link>https://jasonyangshadow.win/posts/design-tic-tac-toe/</link>
			<pubDate>Sat, 29 Feb 2020 15:32:53 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/design-tic-tac-toe/</guid>
			<description>Design a Tic-tac-toe game that is played between two players on a n x n grid.
You may assume the following rules:
 A move is guaranteed to be valid and is placed on an empty block. Once a winning condition is reached, no more moves is allowed. A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.  Example:</description>
			<content type="html"><![CDATA[<p>Design a Tic-tac-toe game that is played between two players on a n x n grid.</p>
<p>You may assume the following rules:</p>
<ol>
<li>A move is guaranteed to be valid and is placed on an empty block.</li>
<li>Once a winning condition is reached, no more moves is allowed.</li>
<li>A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.</li>
</ol>
<p>Example:</p>
<pre><code>Given n = 3, assume that player 1 is &quot;X&quot; and player 2 is &quot;O&quot; in the board.

TicTacToe toe = new TicTacToe(3);

toe.move(0, 0, 1); -&gt; Returns 0 (no one wins)
|X| | |
| | | |    // Player 1 makes a move at (0, 0).
| | | |

toe.move(0, 2, 2); -&gt; Returns 0 (no one wins)
|X| |O|
| | | |    // Player 2 makes a move at (0, 2).
| | | |

toe.move(2, 2, 1); -&gt; Returns 0 (no one wins)
|X| |O|
| | | |    // Player 1 makes a move at (2, 2).
| | |X|

toe.move(1, 1, 2); -&gt; Returns 0 (no one wins)
|X| |O|
| |O| |    // Player 2 makes a move at (1, 1).
| | |X|

toe.move(2, 0, 1); -&gt; Returns 0 (no one wins)
|X| |O|
| |O| |    // Player 1 makes a move at (2, 0).
|X| |X|

toe.move(1, 0, 2); -&gt; Returns 0 (no one wins)
|X| |O|
|O|O| |    // Player 2 makes a move at (1, 0).
|X| |X|

toe.move(2, 1, 1); -&gt; Returns 1 (player 1 wins)
|X| |O|
|O|O| |    // Player 1 makes a move at (2, 1).
|X|X|X|
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span>
<span class="k">class</span> <span class="nc">TicTacToe</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Initialize your data structure here.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">plate</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dim</span> <span class="o">=</span> <span class="n">n</span>
        

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">row</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">col</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">player</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Player {player} makes a move at ({row}, {col}).
</span><span class="s2">        @param row The row of the board.
</span><span class="s2">        @param col The column of the board.
</span><span class="s2">        @param player The player, can be either 1 or 2.
</span><span class="s2">        @return The current winning condition, can be either:
</span><span class="s2">                0: No one wins.
</span><span class="s2">                1: Player 1 wins.
</span><span class="s2">                2: Player 2 wins.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="c1">#set value if player1 =&gt; 1 if player2 =&gt; -1</span>
        <span class="k">if</span> <span class="n">player</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">plate</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">plate</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            
        <span class="c1">#use numpy to sum via row/column</span>
        <span class="c1">#start check</span>
        <span class="n">rv</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">plate</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">dim</span> <span class="ow">in</span> <span class="n">rv</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">dim</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">rv</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">2</span>
        
        <span class="n">cv</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">plate</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">dim</span> <span class="ow">in</span> <span class="n">cv</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">dim</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">cv</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">2</span>

        <span class="c1">#diagnal value</span>
        <span class="n">dia1</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">dia2</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">dim</span><span class="p">):</span>
            <span class="n">dia1</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">plate</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
            <span class="n">dia2</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">plate</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">dim</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
            
        <span class="n">dia1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dia1</span><span class="p">)</span>
        <span class="n">dia2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dia2</span><span class="p">)</span>
            
        <span class="k">if</span> <span class="n">dia1</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">dim</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">dia1</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">dim</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">2</span>
        
        <span class="k">if</span> <span class="n">dia2</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">dim</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">dia2</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">dim</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">2</span>
        
        <span class="k">return</span> <span class="mi">0</span>
        


<span class="c1"># Your TicTacToe object will be instantiated and called as such:</span>
<span class="c1"># obj = TicTacToe(n)</span>
<span class="c1"># param_1 = obj.move(row,col,player)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Simplify Path</title>
			<link>https://jasonyangshadow.win/posts/simplify-path/</link>
			<pubDate>Sat, 29 Feb 2020 13:47:03 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/simplify-path/</guid>
			<description>Given an absolute path for a file (Unix-style), simplify it. Or in other words, convert it to the canonical path.
In a UNIX-style file system, a period . refers to the current directory. Furthermore, a double period .. moves the directory up a level. For more information, see: Absolute path vs relative path in Linux/Unix
Note that the returned canonical path must always begin with a slash /, and there must be only a single slash / between two directory names.</description>
			<content type="html"><![CDATA[<p>Given an absolute path for a file (Unix-style), simplify it. Or in other words, convert it to the canonical path.</p>
<p>In a UNIX-style file system, a period . refers to the current directory. Furthermore, a double period .. moves the directory up a level. For more information, see: Absolute path vs relative path in Linux/Unix</p>
<p>Note that the returned canonical path must always begin with a slash /, and there must be only a single slash / between two directory names. The last directory name (if it exists) must not end with a trailing /. Also, the canonical path must be the shortest string representing the absolute path.</p>
<p>Example 1:</p>
<p>Input: &ldquo;/home/&rdquo;<br>
Output: &ldquo;/home&rdquo;<br>
Explanation: Note that there is no trailing slash after the last directory name.</p>
<p>Example 2:</p>
<p>Input: &ldquo;/../&rdquo;<br>
Output: &ldquo;/&rdquo;<br>
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.</p>
<p>Example 3:</p>
<p>Input: &ldquo;/home//foo/&rdquo;<br>
Output: &ldquo;/home/foo&rdquo;<br>
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.</p>
<p>Example 4:</p>
<p>Input: &ldquo;/a/./b/../../c/&rdquo;<br>
Output: &ldquo;/c&rdquo;</p>
<p>Example 5:</p>
<p>Input: &ldquo;/a/../../b/../c//.//&rdquo;<br>
Output: &ldquo;/c&rdquo;</p>
<p>Example 6:</p>
<p>Input: &ldquo;/a//b////c/d//././/..&rdquo;<br>
Output: &ldquo;/a/b/c&rdquo;</p>
<p>#A very easy solution, using stack to process string, if facing &lsquo;/&rsquo;, skip, &lsquo;.&rsquo;, skip, &lsquo;..&rsquo; pop if stack is not empty, otherwise, push item into stack
reverse the stack vals and assemble output</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">simplifyPath</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">path</span>
        
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">elif</span> <span class="n">item</span> <span class="o">==</span> <span class="s1">&#39;.&#39;</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">elif</span> <span class="n">item</span> <span class="o">==</span> <span class="s1">&#39;..&#39;</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">stack</span><span class="p">:</span>
                    <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        
        <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;/&#34;</span>
        <span class="k">if</span> <span class="n">stack</span><span class="p">:</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
            <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
                <span class="nb">str</span> <span class="o">=</span> <span class="nb">str</span> <span class="o">+</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&#34;/&#34;</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">str</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">str</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Search in Rotated Sorted Array</title>
			<link>https://jasonyangshadow.win/posts/search-in-rotated-sorted-array/</link>
			<pubDate>Sat, 29 Feb 2020 13:08:48 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/search-in-rotated-sorted-array/</guid>
			<description>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm&amp;rsquo;s runtime complexity must be in the order of O(log n).
Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 Example 2:</description>
			<content type="html"><![CDATA[<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>
<p>You may assume no duplicate exists in the array.</p>
<p>Your algorithm&rsquo;s runtime complexity must be in the order of O(log n).</p>
<p>Example 1:</p>
<p>Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:</p>
<p>Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        
        <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                <span class="k">return</span> <span class="n">mid</span>
            
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                    <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">high</span><span class="p">]:</span>
                    <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span>
        
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Sort Colors</title>
			<link>https://jasonyangshadow.win/posts/sort-colors/</link>
			<pubDate>Sat, 29 Feb 2020 11:01:35 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/sort-colors/</guid>
			<description>Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
Note: You are not suppose to use the library&amp;rsquo;s sort function for this problem.
Example:
Input: [2,0,2,1,1,0] Output: [0,0,1,1,2,2] Follow up:</description>
			<content type="html"><![CDATA[<p>Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p>Note: You are not suppose to use the library&rsquo;s sort function for this problem.</p>
<p>Example:</p>
<p>Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Follow up:</p>
<p>A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0&rsquo;s, 1&rsquo;s, and 2&rsquo;s, then overwrite array with total number of 0&rsquo;s, then 1&rsquo;s and followed by 2&rsquo;s.
Could you come up with a one-pass algorithm using only constant space?</p>
<p>The first solution is scanning all data firstly then set the value in position. but it also requires o(m+n) space, as the generated list requires space</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sortColors</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify nums in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">num0</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">num1</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">num2</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="c1">#constant space, scan the count of target number</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">num0</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">num1</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">num2</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">num0</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">num0</span>
        <span class="n">nums</span><span class="p">[</span><span class="n">num0</span><span class="p">:(</span><span class="n">num0</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">num1</span>
        <span class="n">nums</span><span class="p">[</span><span class="n">num0</span> <span class="o">+</span> <span class="n">num1</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="n">num2</span>
</code></pre></div><p>The second solution is moving item one by one in place without swap.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sortColors</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify nums in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">n0</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">n1</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">n2</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="c1">#if num = 0, from the left side, we need to move every item by 1</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">n2</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">n1</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">n0</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">n2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">n1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">n0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">n2</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">n1</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">n2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">n1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">n2</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">n2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sortColors</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        Do not return anything, modify nums in-place instead.
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">red</span><span class="p">,</span> <span class="n">white</span><span class="p">,</span> <span class="n">blue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">white</span> <span class="o">&lt;=</span> <span class="n">blue</span><span class="p">:</span>
            <span class="c1">#if nums[cur] == 0, we have to move both cur and start</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">white</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">white</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">red</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">red</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">white</span><span class="p">]</span>
                <span class="n">white</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">red</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">white</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">white</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1">#if nums[cur] == 2, we have to swap current item with last unclassified one</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">white</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">blue</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">blue</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">white</span><span class="p">]</span>
                <span class="n">blue</span> <span class="o">-=</span> <span class="mi">1</span>

        <span class="c1">#make sure using if ... elif.. else rather than 3 if, it will cause unexpected behavior</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Gas Station</title>
			<link>https://jasonyangshadow.win/posts/gas-station/</link>
			<pubDate>Thu, 27 Feb 2020 13:01:47 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/gas-station/</guid>
			<description>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].
You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.
Return the starting gas station&amp;rsquo;s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.</description>
			<content type="html"><![CDATA[<p>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].</p>
<p>You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.</p>
<p>Return the starting gas station&rsquo;s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.</p>
<p>Note:</p>
<p>If there exists a solution, it is guaranteed to be unique.
Both input arrays are non-empty and have the same length.
Each element in the input arrays is a non-negative integer.
Example 1:</p>
<p>Input:
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]</p>
<p>Output: 3</p>
<p>Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:</p>
<p>Input:
gas  = [2,3,4]
cost = [3,4,3]</p>
<p>Output: -1</p>
<p>Explanation:
You can&rsquo;t start at station 0 or 1, as there is not enough gas to travel to the next station.
Let&rsquo;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can&rsquo;t travel around the circuit once no matter where you start.</p>
<h2 id="analysis">Analysis</h2>
<ul>
<li>If car starts at A and can not reach B. Any station between A and B can not reach B.(B is the first station that A can not reach.)</li>
</ul>
<pre><code> Proof by contradiction:  
 A --- C1 --- C2  --- ... Ck --- B  
 Assume:  C1 can reach B
 
 A can reach C1 (by Fact3) &amp; C1 can reach B =&gt; A can reach B (Contradict with Fact1 !)  =&gt; assumption is wrong, C1 cannot reach B 
 
 Same proof could be applied to C2 ~ Ck =&gt; any station between A and B that A can reach cannot reach B 
</code></pre><ul>
<li>If the total number of gas is bigger than the total number of cost. There must be a solution.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#every thime if a fail occurs, accumulate the amount of gas taht is needed, after looping through all stations, if the left gas is more than cost, then a solution comes, otherwise not.</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">canCompleteCircuit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">gas</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">cost</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">gas_need</span> <span class="o">=</span> <span class="n">gas_left</span> <span class="o">=</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">c</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">gas</span><span class="p">,</span> <span class="n">cost</span><span class="p">)):</span>
            <span class="c1">#accumulate left gas</span>
            <span class="n">gas_left</span> <span class="o">+=</span> <span class="n">g</span><span class="o">-</span><span class="n">c</span>
            <span class="k">if</span> <span class="n">gas_left</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1">#we need more gas</span>
                <span class="n">gas_need</span> <span class="o">-=</span> <span class="n">gas_left</span>
                <span class="c1">#always starts with gas_left &gt; 0</span>
                <span class="n">start</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">gas_left</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">return</span> <span class="n">start</span> <span class="k">if</span> <span class="n">gas_left</span> <span class="o">&gt;=</span> <span class="n">gas_need</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Maximum Length of Concatstring With Unique Characters</title>
			<link>https://jasonyangshadow.win/posts/maximum-length-of-concatstring-with-unique-characters/</link>
			<pubDate>Thu, 27 Feb 2020 12:37:20 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/maximum-length-of-concatstring-with-unique-characters/</guid>
			<description>Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.
Return the maximum possible length of s.
Example 1:
Input: arr = [&amp;ldquo;un&amp;rdquo;,&amp;ldquo;iq&amp;rdquo;,&amp;ldquo;ue&amp;rdquo;] Output: 4 Explanation: All possible concatenations are &amp;ldquo;&amp;rdquo;,&amp;ldquo;un&amp;rdquo;,&amp;ldquo;iq&amp;rdquo;,&amp;ldquo;ue&amp;rdquo;,&amp;ldquo;uniq&amp;rdquo; and &amp;ldquo;ique&amp;rdquo;. Maximum length is 4. Example 2:
Input: arr = [&amp;ldquo;cha&amp;rdquo;,&amp;ldquo;r&amp;rdquo;,&amp;ldquo;act&amp;rdquo;,&amp;ldquo;ers&amp;rdquo;] Output: 6 Explanation: Possible solutions are &amp;ldquo;chaers&amp;rdquo; and &amp;ldquo;acters&amp;rdquo;. Example 3:
Input: arr = [&amp;ldquo;abcdefghijklmnopqrstuvwxyz&amp;rdquo;] Output: 26</description>
			<content type="html"><![CDATA[<p>Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.</p>
<p>Return the maximum possible length of s.</p>
<p>Example 1:</p>
<p>Input: arr = [&ldquo;un&rdquo;,&ldquo;iq&rdquo;,&ldquo;ue&rdquo;]
Output: 4
Explanation: All possible concatenations are &ldquo;&rdquo;,&ldquo;un&rdquo;,&ldquo;iq&rdquo;,&ldquo;ue&rdquo;,&ldquo;uniq&rdquo; and &ldquo;ique&rdquo;.
Maximum length is 4.
Example 2:</p>
<p>Input: arr = [&ldquo;cha&rdquo;,&ldquo;r&rdquo;,&ldquo;act&rdquo;,&ldquo;ers&rdquo;]
Output: 6
Explanation: Possible solutions are &ldquo;chaers&rdquo; and &ldquo;acters&rdquo;.
Example 3:</p>
<p>Input: arr = [&ldquo;abcdefghijklmnopqrstuvwxyz&rdquo;]
Output: 26</p>
<p>Constraints:</p>
<p>1 &lt;= arr.length &lt;= 16
1 &lt;= arr[i].length &lt;= 26
arr[i] contains only lower case English letters.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxLength</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1">#all combinations of concat strings</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="nb">set</span><span class="p">()]</span>
        <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
            <span class="c1">#a itself has duplicated chars</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">a</span><span class="p">))</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="n">a</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">dp</span><span class="p">:</span>
                <span class="c1">#a &amp; c has interset</span>
                <span class="k">if</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">c</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="c1">#append a | c</span>
                <span class="n">dp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span> <span class="o">|</span> <span class="n">c</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">dp</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Slides a Study of Security Isolation Techniques</title>
			<link>https://jasonyangshadow.win/posts/slides-a-study-of-security-isolation-techniques/</link>
			<pubDate>Thu, 27 Feb 2020 08:21:26 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/slides-a-study-of-security-isolation-techniques/</guid>
			<description>A slide made for paper introduction. Sharing a common study of security isolation techniques used in different implementations.
 </description>
			<content type="html"><![CDATA[<p>A slide made for paper introduction. Sharing a common study of security isolation techniques used in different implementations.</p>
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSE-pHSaQ6j8VjDEAEMC1b77SqILX9ogqaN8gCUOYT7MMlY2V7Gw4u5-zYptlLg-zPvBCcnWTfxbpoT/embed?start=true&loop=false&delayms=60000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
]]></content>
		</item>
		
		<item>
			<title>Add Two Numbers 2</title>
			<link>https://jasonyangshadow.win/posts/add-two-numbers-2/</link>
			<pubDate>Tue, 25 Feb 2020 11:47:55 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/add-two-numbers-2/</guid>
			<description>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Follow up: What if you cannot modify the input lists? In other words, reversing the lists is not allowed.</description>
			<content type="html"><![CDATA[<p>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p>Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.</p>
<p>Example:</p>
<pre><code>Input: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
Output: 7 -&gt; 8 -&gt; 0 -&gt; 7
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for singly-linked list.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.next = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">l2</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="c1">#convert l1 l2 to number as python3 has unbounded number</span>
        <span class="n">n1</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">n2</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">l1</span><span class="p">:</span>
            <span class="n">n1</span> <span class="o">=</span> <span class="n">n1</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">l1</span><span class="o">.</span><span class="n">val</span>
            <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="n">next</span>
        <span class="k">while</span> <span class="n">l2</span><span class="p">:</span>
            <span class="n">n2</span> <span class="o">=</span> <span class="n">n2</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">l2</span><span class="o">.</span><span class="n">val</span>
            <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="n">next</span>
            
        <span class="n">n3</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">head</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">while</span> <span class="n">n3</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">head</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">n3</span> <span class="o">%</span> <span class="mi">10</span>
            <span class="n">n3</span> <span class="o">//=</span> <span class="mi">10</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">head</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">cur</span>
        <span class="k">if</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">head</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Serialize and Deserialize Binary Tree</title>
			<link>https://jasonyangshadow.win/posts/serialize-and-deserialize-binary-tree/</link>
			<pubDate>Mon, 24 Feb 2020 22:52:17 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/serialize-and-deserialize-binary-tree/</guid>
			<description>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</description>
			<content type="html"><![CDATA[<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>
<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>
<p>Example:</p>
<p>You may serialize the following tree:</p>
<pre><code>    1
   / \
  2   3
     / \
    4   5
</code></pre><p>as &ldquo;[1,2,3,null,null,4,5]&rdquo;
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>
<p>Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode(object):</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Codec</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;Encodes a tree to a single string.
</span><span class="s2">        
</span><span class="s2">        :type root: TreeNode
</span><span class="s2">        :rtype: str
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">def</span> <span class="nf">tostr</span><span class="p">(</span><span class="n">vals</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">root</span><span class="p">:</span>
                <span class="n">vals</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">))</span>
                <span class="n">tostr</span><span class="p">(</span><span class="n">vals</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
                <span class="n">tostr</span><span class="p">(</span><span class="n">vals</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">vals</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;#&#34;</span><span class="p">)</span>
                
        <span class="k">if</span> <span class="n">root</span><span class="p">:</span>
            <span class="n">vals</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">tostr</span><span class="p">(</span><span class="n">vals</span><span class="p">,</span> <span class="n">root</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">vals</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="s1">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">vals</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="s2">&#34;&#34;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;&#34;</span>

    <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;Decodes your encoded data to tree.
</span><span class="s2">        
</span><span class="s2">        :type data: str
</span><span class="s2">        :rtype: TreeNode
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">def</span> <span class="nf">tonode</span><span class="p">():</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">vals</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">val</span> <span class="o">==</span> <span class="s2">&#34;#&#34;</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">None</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">))</span>
                <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">tonode</span><span class="p">()</span>
                <span class="n">node</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">tonode</span><span class="p">()</span>
                <span class="k">return</span> <span class="n">node</span>
            <span class="n">vals</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
            <span class="n">vals</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">vals</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">tonode</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        

<span class="c1"># Your Codec object will be instantiated and called as such:</span>
<span class="c1"># codec = Codec()</span>
<span class="c1"># codec.deserialize(codec.serialize(root))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Find the Duplicate Number</title>
			<link>https://jasonyangshadow.win/posts/find-the-duplicate-number/</link>
			<pubDate>Mon, 24 Feb 2020 19:50:57 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/find-the-duplicate-number/</guid>
			<description>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.
Example 1:
Input: [1,3,4,2,2] Output: 2 Example 2:
Input: [3,1,3,4,2] Output: 3 Note:
You must not modify the array (assume the array is read only). You must use only constant, O(1) extra space.</description>
			<content type="html"><![CDATA[<p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p>
<p>Example 1:</p>
<p>Input: [1,3,4,2,2]
Output: 2
Example 2:</p>
<p>Input: [3,1,3,4,2]
Output: 3
Note:</p>
<p>You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#this solution uses slow, fast chasing method, because there is only one number duplicated. So we can use number value as index.</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findDuplicate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">slow</span><span class="p">,</span> <span class="n">fast</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        <span class="n">check</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">slow</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">slow</span><span class="p">]</span>
            <span class="n">fast</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">fast</span><span class="p">]]</span>
            
            <span class="k">if</span> <span class="n">slow</span> <span class="o">==</span> <span class="n">fast</span><span class="p">:</span>
                <span class="k">break</span>
                
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">slow</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">slow</span><span class="p">]</span>
            <span class="n">check</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">check</span><span class="p">]</span>
            
            <span class="k">if</span> <span class="n">slow</span> <span class="o">==</span> <span class="n">check</span><span class="p">:</span>
                <span class="k">break</span>
                
        <span class="k">return</span> <span class="n">check</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Linked List Cycle 2</title>
			<link>https://jasonyangshadow.win/posts/linked-list-cycle-2/</link>
			<pubDate>Mon, 24 Feb 2020 15:21:40 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/linked-list-cycle-2/</guid>
			<description>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.
Note: Do not modify the linked list.
Example 1:
Input: head = [3,2,0,-4], pos = 1 Output: tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node.</description>
			<content type="html"><![CDATA[<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p>
<p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p>
<p>Note: Do not modify the linked list.</p>
<p>Example 1:</p>
<p>Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
<img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="image"></p>
<p>Example 2:</p>
<p>Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.
<img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt="image"></p>
<p>Example 3:</p>
<p>Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
<img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt="image"></p>
<p>Follow-up:
Can you solve it without using extra space?</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for singly-linked list.</span>
<span class="c1"># class ListNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.next = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">detectCycle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">head</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        
        <span class="k">if</span> <span class="n">head</span> <span class="ow">and</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        
        <span class="n">slow</span><span class="p">,</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">,</span> <span class="n">head</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">while</span> <span class="n">fast</span> <span class="ow">and</span> <span class="n">fast</span><span class="o">.</span><span class="n">next</span><span class="p">:</span>
            <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">.</span><span class="n">next</span>
            <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span>
            <span class="k">if</span> <span class="n">slow</span> <span class="o">==</span> <span class="n">fast</span><span class="p">:</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">break</span>
                
        <span class="k">if</span> <span class="ow">not</span> <span class="n">flag</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        
        <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">while</span> <span class="n">fast</span> <span class="o">!=</span> <span class="n">slow</span><span class="p">:</span>
            <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">.</span><span class="n">next</span>
            <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">.</span><span class="n">next</span>
            
        <span class="k">return</span> <span class="n">fast</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Migration to Hugo</title>
			<link>https://jasonyangshadow.win/posts/migration-to-hugo/</link>
			<pubDate>Mon, 24 Feb 2020 14:06:02 +0900</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/migration-to-hugo/</guid>
			<description>After tired of struggling on fixing error in Hexo, at last migrating my website from Hexo to Hugo. Hugo is a lightweight and fast golang framework to build static websites. The best feature of golang is that binary file is used in distribution, so that it will be very easy for me(tired of using &amp;lsquo;npm install xxx &amp;ndash;save or npm install xxx -g&amp;rsquo; to install necessary dependencies) to generate and deploy website.</description>
			<content type="html"><![CDATA[<p>After tired of struggling on fixing error in Hexo, at last migrating my website from Hexo to Hugo.
<a href="https://gohugo.io/">Hugo</a> is a lightweight and fast golang framework to build static websites. The best feature of golang is that binary file is used in distribution, so that it will be very easy for me(tired of using &lsquo;npm install xxx &ndash;save or npm install xxx -g&rsquo; to install necessary dependencies) to generate and deploy website.</p>
<p>All posts are written in markdown and I could even import old posts from hexo to Hugo, which is quite nice for this migration. The theme is also nice and elegant. Good work! Hugo!</p>
]]></content>
		</item>
		
		<item>
			<title>construct binary tree from preorder and inorder traversal</title>
			<link>https://jasonyangshadow.win/posts/construct-binary-tree-from-preorder-and-inorder-traversal/</link>
			<pubDate>Mon, 24 Feb 2020 00:47:19 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/construct-binary-tree-from-preorder-and-inorder-traversal/</guid>
			<description>Given preorder and inorder traversal of a tree, construct the binary tree.
Note: You may assume that duplicates do not exist in the tree.
For example, given
preorder = [3,9,20,15,7] inorder = [9,3,15,20,7] Return the following binary tree:
 3 / \ 9 20 / \ 15 7 Solution:
# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.</description>
			<content type="html"><![CDATA[<p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p><strong>Note:</strong>
You may assume that duplicates do not exist in the tree.</p>
<p>For example, given</p>
<pre><code>preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
</code></pre><p>Return the following binary tree:</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre><p>Solution:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Definition for a binary tree node.</span>
<span class="c1"># class TreeNode:</span>
<span class="c1">#     def __init__(self, x):</span>
<span class="c1">#         self.val = x</span>
<span class="c1">#         self.left = None</span>
<span class="c1">#         self.right = None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">buildTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">preorder</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">inorder</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="c1">#inline method</span>
        <span class="k">def</span> <span class="nf">constructor</span><span class="p">(</span><span class="n">preorder</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">inorder</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
            <span class="c1">#if empty</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">preorder</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">inorder</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
        
            <span class="c1">#find root</span>
            <span class="c1">#the first element in preorder is always the root of subtree</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="n">inorder</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            
            <span class="c1">#recursively construction</span>
            <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">constructor</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">inorder</span><span class="p">[:</span><span class="n">idx</span><span class="p">])</span>
            <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">constructor</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="n">inorder</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
            <span class="k">return</span> <span class="n">root</span>
            
        <span class="k">return</span> <span class="n">constructor</span><span class="p">(</span><span class="n">preorder</span><span class="p">,</span> <span class="n">inorder</span><span class="p">)</span>
        
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Next Closest Time</title>
			<link>https://jasonyangshadow.win/posts/next-closest-time/</link>
			<pubDate>Thu, 23 Jan 2020 22:52:16 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/next-closest-time/</guid>
			<description>Next Closest Time Given a time represented in the format &amp;ldquo;HH:MM&amp;rdquo;, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.
You may assume the given input string is always valid. For example, &amp;ldquo;01:34&amp;rdquo;, &amp;ldquo;12:09&amp;rdquo; are all valid. &amp;ldquo;1:34&amp;rdquo;, &amp;ldquo;12:9&amp;rdquo; are all invalid.
Example 1:
Input: &amp;quot;19:34&amp;quot; Output: &amp;quot;19:39&amp;quot; Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.</description>
			<content type="html"><![CDATA[<h4 id="next-closest-time">Next Closest Time</h4>
<p>Given a time represented in the format &ldquo;HH:MM&rdquo;, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.</p>
<p>You may assume the given input string is always valid. For example,  &ldquo;01:34&rdquo;, &ldquo;12:09&rdquo; are all valid. &ldquo;1:34&rdquo;, &ldquo;12:9&rdquo; are all invalid.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: &quot;19:34&quot;
Output: &quot;19:39&quot;
Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.  It is not 19:33, because this occurs 23 hours and 59 minutes later.
</code></pre><p><strong>Example 2:</strong></p>
<pre><code>Input: &quot;23:59&quot;
Output: &quot;22:22&quot;
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.
</code></pre><p><strong>Analysis:</strong></p>
<p>Use &ldquo;17:38&rdquo; as an example.</p>
<p>Retrieve all four digits from given string and sort them in asscending order, <code>&quot;17:38&quot;</code> -&gt; <code>digits[] {'1', '3', '7', '8'}</code></p>
<p>Apply <code>findNext()</code> from the right most digit to left most digit, try to find next greater digit from <code>digits[]</code> (if exist) which is suitable for current position, otherwise return the minimum digit (<code>digits[0]</code>):</p>
<ul>
<li>
<p>&ldquo;HH:M_&ldquo;<code>: there is no upperLimit for this position (0-9). Just pick the next different digit in the sequence. In the example above, </code>'8'<code> is already the greatest one, so we change it into the smallest one (</code>digits[0]<code>i.e.</code>'1'<code>) and move to next step: </code>&quot;17:38&rdquo; -&gt; &ldquo;17:31&quot;`</p>
</li>
<li>
<p>&ldquo;HH:_M&quot;<code>: the upperLimit is </code>'5'<code>(00~59). The next different digit for</code>'3'<code>is</code>'7'<code>, which is greater than </code>'5'<code>, so we should omit it and try next. Similarly, </code>'8'<code>is beyond the limit, so we should choose next, i.e.</code>'1'<code>: </code>&quot;17:38&rdquo; -&gt; &ldquo;17:11&quot;`</p>
</li>
<li>
<p>&ldquo;H_:MM&quot;<code>: the upperLimit depends on </code>result[0]<code>. If </code>result[0] == &lsquo;2'<code>, then it should be no more than </code>'3'<code>; else no upperLimit (0-9). Here we have </code>result[0]<code>=</code>'1'<code>, so we could choose any digit we want. The next digit for </code>'7'<code>is</code>'8'<code>, so we change it and return the result directly. </code>&quot;17:38&rdquo; -&gt; &ldquo;18:11&quot;`</p>
</li>
<li>
<p>&ldquo;_H:MM&quot;<code>: the upperLimit is </code>'2'<code>(00~23). e.g.</code>&quot;03:33&rdquo; -&gt; &ldquo;00:00&quot;`</p>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">nextClosestTime</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">time</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">cand</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)))</span>
        <span class="n">res</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
        
        <span class="c1">#from right to left</span>
        <span class="n">res</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">findNext</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="s2">&#34;9&#34;</span><span class="p">,</span> <span class="n">cand</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">res</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">time</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
        
        <span class="n">res</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">findNext</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="s2">&#34;5&#34;</span><span class="p">,</span> <span class="n">cand</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">res</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">time</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
        
        <span class="n">res</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">findNext</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;4&#34;</span> <span class="k">if</span> <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;2&#34;</span> <span class="k">else</span> <span class="s2">&#34;9&#34;</span><span class="p">,</span> <span class="n">cand</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">res</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">time</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
        
        <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">findNext</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s2">&#34;2&#34;</span><span class="p">,</span> <span class="n">cand</span><span class="p">)</span>
        <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">findNext</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">can</span><span class="p">):</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">can</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">can</span><span class="p">)</span> <span class="ow">and</span> <span class="n">can</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">can</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">can</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>__libc_start_main usage</title>
			<link>https://jasonyangshadow.win/posts/libc-start-main-usage/</link>
			<pubDate>Tue, 21 Jan 2020 22:10:23 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/libc-start-main-usage/</guid>
			<description>__libc_start_main usage Recently I am working on hacking user&amp;rsquo;s main function. The reason why I need to do this is that we are unable to change argv0 via ld.so.
Basically, there are two ways if you want to use execve syscall. http://man7.org/linux/man-pages/man2/execve.2.html
 Directy using execve with executable&amp;rsquo;s filename as the target (absolute path) and argv0(the first item in argv array) as the argument passed to &amp;ldquo;main&amp;rdquo; function.   argv is an array of argument strings passed to the new program.</description>
			<content type="html"><![CDATA[<h3 id="__libc_start_main-usage">__libc_start_main usage</h3>
<p>Recently I am working on hacking user&rsquo;s main function. The reason why I need to do this is that we are unable to change argv0 via ld.so.</p>
<p>Basically, there are two ways if you want to use execve syscall. <a href="http://man7.org/linux/man-pages/man2/execve.2.html">http://man7.org/linux/man-pages/man2/execve.2.html</a></p>
<ul>
<li>Directy using execve with executable&rsquo;s filename as the target  (absolute path) and argv0(the first item in argv array) as the argument  passed to &ldquo;main&rdquo; function.</li>
</ul>
<blockquote>
<p>argv is an array of argument strings passed to the new program.  By
convention, the first of these strings (i.e., argv[0]) should contain
the filename associated with the file being executed.  envp is an
array of strings, conventionally of the form key=value, which are
passed as environment to the new program.  The argv and envp arrays
must each include a null pointer at the end of the array</p>
</blockquote>
<pre><code>execve(target_executable_path, argv[](filename, ...), envp[])
</code></pre><ul>
<li>Using execve with ld.so as its filename and passing  target(absolute path) as the second item in argv array. The first one  should be ld.so.</li>
</ul>
<p>Check out the source code rtld.c here <a href="https://code.woboq.org/userspace/glibc/elf/rtld.c.html#1120">https://code.woboq.org/userspace/glibc/elf/rtld.c.html#1120</a></p>
<blockquote>
<p>Ho ho.  We are not the program interpreter!  We are the program
itself!  This means someone ran ld.so as a command.  Well, that
might be convenient to do sometimes.  We support it by
interpreting the args like this:
ld.so PROGRAM ARGS&hellip;
The first argument is the name of a file containing an ELF
executable we will load and run with the following arguments.
To simplify life here, PROGRAM is searched for using the
normal rules for shared objects, rather than $PATH or anything
like that.  We just load it and use its entry point; we don&rsquo;t
pay attention to its PT_INTERP command (we are the interpreter
ourselves).  This is an easy way to test a new ld.so before
installing it.</p>
</blockquote>
<pre><code>execve(ld.so, argv[](ld.so, target_executable_path, ...), envp[])
</code></pre><p>Why do we need these two ways? As mentioned above, when users want to test newly built ld.so before installing it into system. A good feature provided here is that we do not need to patch elf header(or recompile  binaries with setting &ndash;dynamic-linker option) while replacing custom  ld.so as our wish. But a key feature lacked here is that <strong>we are unable to pass argv0(custom filename)</strong> to target executable.</p>
<p>One method to solve this problem is to patch ld.so:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="mi">798</span><span class="n">d797</span>
<span class="o">&lt;</span>       <span class="kt">char</span> <span class="o">*</span><span class="n">argv0</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="mi">854</span><span class="p">,</span><span class="mi">860</span><span class="n">d852</span>
<span class="o">&lt;</span>       <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span> <span class="n">strcmp</span> <span class="p">(</span><span class="n">_dl_argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34;--argv0&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">_dl_argc</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span>
<span class="o">&lt;</span>       <span class="p">{</span>
<span class="o">&lt;</span>          <span class="n">argv0</span> <span class="o">=</span> <span class="n">_dl_argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="o">&lt;</span>          <span class="n">_dl_skip_args</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
<span class="o">&lt;</span>          <span class="n">_dl_argc</span> <span class="o">-=</span> <span class="mi">2</span><span class="p">;</span>
<span class="o">&lt;</span>          <span class="n">_dl_argv</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
<span class="o">&lt;</span>       <span class="p">}</span>
<span class="mi">889</span><span class="p">,</span><span class="mi">890</span><span class="n">c881</span>
<span class="o">&lt;</span>   <span class="o">--</span><span class="n">audit</span> <span class="n">LIST</span>          <span class="n">use</span> <span class="n">objects</span> <span class="n">named</span> <span class="n">in</span> <span class="n">LIST</span> <span class="n">as</span> <span class="n">auditors</span><span class="err">\</span><span class="n">n</span>\
<span class="o">&lt;</span>   <span class="o">--</span><span class="n">argv0</span> <span class="n">STRING</span>      <span class="n">argv0</span> <span class="n">patch</span> <span class="k">for</span> <span class="n">ld</span><span class="p">.</span><span class="n">so</span><span class="err">\</span><span class="n">n</span><span class="s">&#34;);</span>
<span class="o">---</span>
<span class="o">&gt;</span>   <span class="o">--</span><span class="n">audit</span> <span class="n">LIST</span>          <span class="n">use</span> <span class="n">objects</span> <span class="n">named</span> <span class="n">in</span> <span class="n">LIST</span> <span class="n">as</span> <span class="n">auditors</span><span class="err">\</span><span class="n">n</span><span class="s">&#34;);</span>
<span class="mi">942</span><span class="p">,</span><span class="mi">944</span><span class="n">d932</span>
<span class="o">&lt;</span>       <span class="k">if</span><span class="p">(</span><span class="n">argv0</span><span class="p">){</span>
<span class="o">&lt;</span>         <span class="n">_dl_argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">argv0</span><span class="p">;</span>
<span class="o">&lt;</span>       <span class="p">}</span>

</code></pre></div><p>But this way has one problem that we have to patch every containered os user are about to download. As different distros contain different ld.so(version, backports contained), it is a really painful job.</p>
<p>Another way to solve this problem is to overwrite &lsquo;__libc_start_main&rsquo; via LD_PRELOAD tricks:</p>
<div class="highlight"><pre class="chroma"><code class="language-plain" data-lang="plain">__libc_start_main
Name
__libc_start_main -- initialization routine
Synopsis

BP_SYM __libc_start_main(int (*main) (int, char**, char**), int argc, char *__unbounded *__unbounded ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (*__unbounded stack_end));

Description

__libc_start_main initializes glibc.

__libc_start_main is not in the source standard; it is only in the binary standard.
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;config.h&gt;</span><span class="cp">
</span><span class="cp">#define _GNU_SOURCE
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;dlfcn.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;unionfs.h&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;setenv.h&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;log.h&#34;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">int</span> <span class="nf">__libc_start_main</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">main</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="p">),</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">ubp_av</span><span class="p">,</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">init</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">fini</span><span class="p">)(</span><span class="kt">void</span><span class="p">),</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">rtld_fini</span><span class="p">)(</span><span class="kt">void</span><span class="p">),</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">stack_end</span><span class="p">))</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">original__libc_start_main</span><span class="p">)(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">main</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="p">),</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">ubp_av</span><span class="p">,</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">init</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">fini</span><span class="p">)(</span><span class="kt">void</span><span class="p">),</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">rtld_fini</span><span class="p">)(</span><span class="kt">void</span><span class="p">),</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">stack_end</span><span class="p">));</span>

    <span class="k">if</span><span class="p">(</span><span class="n">ubp_av</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
        <span class="kt">char</span> <span class="n">tmp</span><span class="p">[</span><span class="n">PATH_MAX</span><span class="p">];</span>
        <span class="n">strcpy</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">ubp_av</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">narrow_path</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="n">log_debug</span><span class="p">(</span><span class="s">&#34;__libc_start_main narrows down argv0 path in main from: %s -&gt; %s&#34;</span><span class="p">,</span> <span class="n">ubp_av</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">tmp</span><span class="p">);</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">ubp_av</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">tmp</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">original__libc_start_main</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">RTLD_NEXT</span><span class="p">,</span><span class="s">&#34;__libc_start_main&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">original__libc_start_main</span><span class="p">(</span><span class="n">main</span><span class="p">,</span><span class="n">argc</span><span class="p">,</span><span class="n">ubp_av</span><span class="p">,</span><span class="n">init</span><span class="p">,</span><span class="n">fini</span><span class="p">,</span><span class="n">rtld_fini</span><span class="p">,</span><span class="n">stack_end</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>By using LD_PRELOAD tricks, this  customized main function could process argv0 parameter before calling user&rsquo;s main funciton. The implementation is so nice and elegant!!! No more distros dependent patches.</p>
]]></content>
		</item>
		
		<item>
			<title>DP Pattern 3</title>
			<link>https://jasonyangshadow.win/posts/dp-pattern-3/</link>
			<pubDate>Sun, 12 Jan 2020 22:41:20 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/dp-pattern-3/</guid>
			<description>DP Pattern 3 Merging Intervals
Generate problem statement for this pattern
Statement
 Given a set of numbers and find an optimal solution for a problem cosidering the current number and the best you can get from the left and right sides.
 Approach
 Find all optimal solutions for every interval and return the best possible answer
 #from i to j dp[i][j] = dp[i][k] + result[k] + dp[k+1][j] Get the best from the left and right sides and add a solution for the current position.</description>
			<content type="html"><![CDATA[<h3 id="dp-pattern-3">DP Pattern 3</h3>
<p>Merging Intervals</p>
<p>Generate problem statement for this pattern</p>
<p>Statement</p>
<blockquote>
<p>Given a set of numbers and find an optimal solution for a problem cosidering the current number and the best you can get from the left and right sides.</p>
</blockquote>
<p>Approach</p>
<blockquote>
<p>Find all optimal solutions for every interval and return the best possible answer</p>
</blockquote>
<pre><code>#from i to j
dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]
</code></pre><p>Get the best from the left and right sides and add a solution for the current position.</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">l</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">l</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="n">l</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
       <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">l</span><span class="p">;</span>
       <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">j</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
           <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">result</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
       <span class="p">}</span>
   <span class="p">}</span>
<span class="p">}</span>
 
<span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><p><a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mctFromLeafValues</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">{})</span>
    
    <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">cache</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">cache</span><span class="p">[(</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)]</span>
        
        <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;=</span> <span class="n">r</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s1">&#39;inf&#39;</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">):</span>
            <span class="n">rootval</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">l</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="nb">max</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
            <span class="n">res</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">rootval</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">cache</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">cache</span><span class="p">))</span>
            
        <span class="n">cache</span><span class="p">[(</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)]</span> <span class="o">=</span> <span class="n">res</span>
        
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#greedy search, find minimum value each time and find the first big num from left and right of current index. Calculate the result and remove current item from arr until only one left</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mctFromLeafValues</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">index</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">+</span> <span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">*</span><span class="nb">min</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">+</span> <span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">*</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="n">arr</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#monotone stack method</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mctFromLeafValues</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="s1">&#39;inf&#39;</span><span class="p">)]</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">stack</span> <span class="ow">and</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">stack</span><span class="p">:</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="n">cur</span> <span class="o">*</span> <span class="nb">min</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">num</span><span class="p">)</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
            
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">*</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            
        <span class="k">return</span> <span class="n">res</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>DP Pattern 2</title>
			<link>https://jasonyangshadow.win/posts/dp-pattern-2/</link>
			<pubDate>Sun, 12 Jan 2020 21:54:51 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/dp-pattern-2/</guid>
			<description>DP Pattern 2 Distinct Ways
Generate problem statement for this pattern
Statement:
 Given a target and find a nuber of distinct ways to reach the target
 Approach
 Sum all possible ways to reach the current state
 routes[i] = routes[i-1] + routes[i-2], ..., + routes[i-k] https://leetcode.com/problems/climbing-stairs/
class Solution: def climbStairs(self, n: int) -&amp;gt; int: if n == 1: return 1 if n == 2: return 2 res = [0]*n res[0], res[1] = 1, 2 for i in range(2,n): res[i] = res[i-1] + res[i-2] return res[-1] https://leetcode.</description>
			<content type="html"><![CDATA[<h3 id="dp-pattern-2">DP Pattern 2</h3>
<p>Distinct Ways</p>
<p>Generate problem statement for this pattern</p>
<p>Statement:</p>
<blockquote>
<p>Given a target and find a nuber of distinct ways to reach the target</p>
</blockquote>
<p>Approach</p>
<blockquote>
<p>Sum all possible ways to reach the current state</p>
</blockquote>
<pre><code>routes[i] = routes[i-1] + routes[i-2], ..., + routes[i-k]
</code></pre><p><a href="https://leetcode.com/problems/climbing-stairs/">https://leetcode.com/problems/climbing-stairs/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">climbStairs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">2</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>
        <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">res</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
            
        <span class="k">return</span> <span class="n">res</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><p><a href="https://leetcode.com/problems/unique-paths/">https://leetcode.com/problems/unique-paths/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">uniquePaths</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">m</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">m</span><span class="p">):</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><p><a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numRollsToTarget</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">f</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
        
        <span class="k">def</span> <span class="nf">dp</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">d</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">target</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">memo</span><span class="p">[(</span><span class="n">d</span><span class="p">,</span> <span class="n">target</span><span class="p">)]</span>
            
            <span class="n">to_return</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">target</span> <span class="o">-</span><span class="n">f</span><span class="p">),</span> <span class="n">target</span><span class="p">):</span>
                <span class="n">to_return</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">(</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
            <span class="n">memo</span><span class="p">[(</span><span class="n">d</span><span class="p">,</span> <span class="n">target</span><span class="p">)]</span> <span class="o">=</span> <span class="n">to_return</span>
            <span class="k">return</span> <span class="n">to_return</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="o">%</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span>
</code></pre></div><p><a href="https://leetcode.com/problems/target-sum/">https://leetcode.com/problems/target-sum/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">combinationSum4</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">sort_nums</span><span class="p">,</span> <span class="n">dp</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">nums</span><span class="p">),</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">sort_nums</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">num</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><p><a href="https://leetcode.com/problems/out-of-boundary-paths/">https://leetcode.com/problems/out-of-boundary-paths/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#DP[i][j][k] stands for how many possible ways to walk into cell j,k in step i, DP[i][j][k] only depends on DP[i-1][j][k]</span>
<span class="kn">import</span> <span class="nn">numpy</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findPaths</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">j</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">N</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="c1">#!!! we have to use numpy matrix rather than [[0]*m]*n or [[0]*m for _ in range(n)], all implementations have bugs</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">))</span>
        <span class="n">mod</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">7</span>
        <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        
        <span class="n">directions</span> <span class="o">=</span> <span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">))</span>
            <span class="c1">#we have to check all cells under step i-1</span>
            <span class="c1">#then upgrade to step i based on step i-1</span>
            <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">m</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
                    <span class="c1">#walk to different directions</span>
                    <span class="k">for</span> <span class="n">direction</span> <span class="ow">in</span> <span class="n">directions</span><span class="p">:</span>
                        <span class="n">nr</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">direction</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                        <span class="n">nc</span> <span class="o">=</span> <span class="n">c</span> <span class="o">+</span> <span class="n">direction</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                        <span class="k">if</span> <span class="n">nr</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">nr</span> <span class="o">&gt;=</span> <span class="n">m</span> <span class="ow">or</span> <span class="n">nc</span> <span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">nc</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">:</span>
                            <span class="c1">#found a boundary skip</span>
                            <span class="n">ret</span> <span class="o">=</span> <span class="p">(</span><span class="n">ret</span> <span class="o">+</span> <span class="n">count</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">])</span> <span class="o">%</span> <span class="n">mod</span>
                        <span class="k">else</span><span class="p">:</span>
                            <span class="c1">#temp stands for step i-1</span>
                            <span class="n">temp</span><span class="p">[</span><span class="n">nr</span><span class="p">][</span><span class="n">nc</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">nr</span><span class="p">][</span><span class="n">nc</span><span class="p">]</span> <span class="o">+</span> <span class="n">count</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">])</span> <span class="o">%</span> <span class="n">mod</span>
            <span class="c1">#temp stands for i-1 solution</span>
            <span class="n">count</span> <span class="o">=</span> <span class="n">temp</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>monotone stack</title>
			<link>https://jasonyangshadow.win/posts/monotone-stack/</link>
			<pubDate>Sat, 11 Jan 2020 12:42:07 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/monotone-stack/</guid>
			<description>Monotonic Stack Monotonic stack contains elements either increasing only or decreasing only.
Problem 1: Given an array, return the same length array whose item is the count of steps moving towards to the right until encounting a larger item than the orginal one.
For example:
 Input: 5,3,1,2,4
return: -1,3,1,1,-1
For 5, no other items from right are larger than it, so return -1
For 3, 3 steps towards to right could get 4.</description>
			<content type="html"><![CDATA[<h3 id="monotonic-stack">Monotonic Stack</h3>
<p>Monotonic stack contains elements either increasing only or decreasing only.</p>
<h4 id="problem-1">Problem 1:</h4>
<p>Given an array, return the same length array whose item is the count of steps moving towards to the right until encounting a larger item than the orginal one.</p>
<p>For example:</p>
<blockquote>
<p>Input: 5,3,1,2,4</p>
<p>return: -1,3,1,1,-1</p>
<p>For 5, no other items from right are larger than it, so return -1</p>
<p>For 3, 3 steps towards to right could get 4.</p>
</blockquote>
<p>The brute force method:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                    <span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">-</span><span class="n">i</span>
                    <span class="k">break</span>
        <span class="k">return</span> <span class="n">result</span>



<span class="k">if</span> <span class="vm">__name__</span><span class="o">==</span><span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">Solution</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">solution</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]))</span>
</code></pre></div><h4 id="problem-2">Problem 2:</h4>
<p><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/">https://leetcode.com/problems/largest-rectangle-in-histogram/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">largestRectangleArea</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">heights</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">heights</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">st</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">heights</span><span class="p">)):</span>
            <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">heights</span><span class="p">[</span><span class="n">st</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">&gt;</span> <span class="n">heights</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">idx</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">st</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="n">backcount</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">idx</span>
                <span class="n">frontcount</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="c1">#split idx into front part and back part</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">st</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">frontcount</span> <span class="o">=</span> <span class="n">idx</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">frontcount</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">-</span> <span class="n">st</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span><span class="mi">1</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="p">(</span><span class="n">backcount</span> <span class="o">+</span> <span class="n">frontcount</span><span class="p">)</span><span class="o">*</span><span class="n">heights</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
            <span class="n">st</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div><h4 id="problem-3">Problem 3:</h4>
<p><a href="https://leetcode.com/problems/maximal-rectangle/">https://leetcode.com/problems/maximal-rectangle/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maximalRectangle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span> <span class="o">&lt;=</span><span class="mi">0</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="n">row</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
        <span class="n">col</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="c1">#additional 0 for stop according to monotone stack algorithm</span>
        <span class="n">height</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">height</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">row</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="c1">#set value for height</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">height</span><span class="p">)):</span>
                
                <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span><span class="p">:</span>
                        <span class="c1">#here for different rows if the same column in different rows contains 1, then height will increase by one. Similar to largest rectangle -&gt; height</span>
                        <span class="n">height</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="c1">#if not continous, reset it to zero in order for later area calculation</span>
                        <span class="n">height</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                
                <span class="c1">#find largest rectangle area</span>
                <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">height</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">&gt;=</span> <span class="n">height</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                    <span class="c1">#already found largest height value</span>
                    <span class="n">h</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
                    <span class="n">s</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
                    <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span>
                    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="c1">#if stack is empty, current j is the width</span>
                        <span class="n">w</span> <span class="o">=</span> <span class="n">j</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="c1">#width is updated by the topest &#39;idx&#39; in stack</span>
                        <span class="n">w</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span><span class="mi">1</span>
                    <span class="n">area</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">area</span><span class="p">,</span> <span class="n">h</span><span class="o">*</span><span class="n">w</span><span class="p">)</span>
                    
                <span class="n">s</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
                
        <span class="k">return</span> <span class="n">area</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>DP pattern 1</title>
			<link>https://jasonyangshadow.win/posts/dp-pattern-1/</link>
			<pubDate>Wed, 08 Jan 2020 15:46:36 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/dp-pattern-1/</guid>
			<description>DP Pattern(1) Dynamic Programming pattern for &amp;ldquo;Minimum(Maximum) cost/path/sum to reach the target&amp;rdquo;
Statement
 Given a target find minimum(Maximum) cost/path/sum to reach the target
 Approach
 Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.
 routes[i] = min(routes[i-1], routes[i-2], ..., routes[i-k]) + cost[i] Examples:
https://leetcode.com/problems/min-cost-climbing-stairs/
class Solution: def minCostClimbingStairs(self, cost: List[int]) -&amp;gt; int: min_0, min_1 = cost[0], cost[1] for c in cost[2:]: min_0, min_1 = min_1, min(min_0, min_1) + c return min(min_0, min_1) https://leetcode.</description>
			<content type="html"><![CDATA[<h3 id="dp-pattern1">DP Pattern(1)</h3>
<p>Dynamic Programming pattern for &ldquo;Minimum(Maximum) cost/path/sum to reach the target&rdquo;</p>
<p>Statement</p>
<blockquote>
<p>Given a target find minimum(Maximum) cost/path/sum to reach the target</p>
</blockquote>
<p>Approach</p>
<blockquote>
<p>Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.</p>
</blockquote>
<pre><code>routes[i] = min(routes[i-1], routes[i-2], ..., routes[i-k]) + cost[i]
</code></pre><p>Examples:</p>
<p><a href="https://leetcode.com/problems/min-cost-climbing-stairs/">https://leetcode.com/problems/min-cost-climbing-stairs/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minCostClimbingStairs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cost</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">min_0</span><span class="p">,</span> <span class="n">min_1</span> <span class="o">=</span> <span class="n">cost</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cost</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cost</span><span class="p">[</span><span class="mi">2</span><span class="p">:]:</span>
            <span class="n">min_0</span><span class="p">,</span> <span class="n">min_1</span> <span class="o">=</span> <span class="n">min_1</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">min_0</span><span class="p">,</span> <span class="n">min_1</span><span class="p">)</span> <span class="o">+</span> <span class="n">c</span>
        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">min_0</span><span class="p">,</span> <span class="n">min_1</span><span class="p">)</span>
</code></pre></div><p><a href="https://leetcode.com/problems/minimum-path-sum/">https://leetcode.com/problems/minimum-path-sum/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minPathSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">m</span><span class="p">):</span>
            <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">m</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">min</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><p><a href="https://leetcode.com/problems/coin-change">https://leetcode.com/problems/coin-change</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">coinChange</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">coins</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">amount</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">amount</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">coins</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">-</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">c</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="o">//</span><span class="n">previous</span> <span class="n">coin</span> <span class="n">selection</span> <span class="n">may</span> <span class="n">change</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="n">find</span> <span class="n">the</span> <span class="n">fewest</span> <span class="n">combination</span>
                    <span class="k">if</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">c</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">c</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">amount</span><span class="p">]</span>
</code></pre></div><p><a href="https://leetcode.com/problems/minimum-falling-path-sum/">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>
<blockquote>
<p>The minimum path to get to element <code>A[i][j]</code> is the minimum of <code>A[i - 1][j - 1]</code>, <code>A[i - 1][j]</code> and <code>A[i - 1][j + 1]</code>.
Starting from row 1, we add the minumum path to each element. The smallest number in the last row is the miminum path sum.
Example:
[1, 2, 3]
[4, 5, 6] =&gt; [5, 6, 8]
[7, 8, 9] =&gt; [7, 8, 9] =&gt; [12, 13, 15]</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minFallingPathSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">A</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
                <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">min</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">k</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">))</span>
                
        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div><p><a href="https://leetcode.com/problems/minimum-cost-for-tickets/">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>
<p>The value should be minimum value of values of yesterday, 7 days ago and 30 days ago</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mincostTickets</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">days</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">costs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">days</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">days</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">days</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="o">+</span> <span class="n">costs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">7</span><span class="p">)]</span> <span class="o">+</span> <span class="n">costs</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">30</span><span class="p">)]</span> <span class="o">+</span> <span class="n">costs</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><p><a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a></p>
<p>First of all, we created the DP array as usual. This DP array stands  for the least number of perfect square numbers for its index. For  example DP[13]=2 stands for if you want to decompose 13 into some  perfect square numbers, it will contains at least two terms which are 3<em>3 and 2</em>2.</p>
<p>After the initialization of the DP array. We want to iterate  through the array to fill all indices. During each iteration we&rsquo;re  actually doing this: <code>dp[i] = 1 + min (dp[i-j*j] for j*j&lt;=i)</code>. The formula itself is a little bit hard to understand. Here&rsquo;s an example of how it works: (C#)</p>
<p>Suppose we want to get DP[13] and we already have the previous indices filled.</p>
<p>DP[13] = DP[13-1x1]+DP[1] = DP[12]+1 = 3;</p>
<p>DP[13] = DP[13-2x2]+DP[2x2] = DP[9]+1 = 2;</p>
<p>DP[13] = DP[13-3x3] + DP[3x3] = DP[4] + 1 = 2;</p>
<p>We pick the smallest one which is 2 so DP[13] = 2. Hope it helps.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numSquares</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">min_val</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">maxsize</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">j</span><span class="o">*</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">:</span>
                    <span class="n">min_val</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">min_val</span><span class="p">,</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">*</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">min_val</span>
            
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><p>A BFS version searches the shortest path</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numSquares</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">n</span>
        <span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mf">0.5</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">)]</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">tocheck</span> <span class="o">=</span> <span class="p">{</span><span class="n">n</span><span class="p">}</span>
        <span class="k">while</span> <span class="n">tocheck</span><span class="p">:</span>
            <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">tocheck</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">:</span>
                        <span class="k">return</span> <span class="n">cnt</span>
                    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="p">:</span>
                        <span class="k">break</span>
                    <span class="n">temp</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span>
            <span class="n">tocheck</span> <span class="o">=</span> <span class="n">temp</span>
            
        
        <span class="k">return</span> <span class="n">cnt</span>
</code></pre></div><p><a href="https://leetcode.com/problems/2-keys-keyboard/">https://leetcode.com/problems/2-keys-keyboard/</a></p>
<p>dp[6] = dp[3*2] = dp[2] + 3 (copyall -&gt; paste -&gt; paste)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minSteps</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="o">/</span><span class="n">j</span><span class="p">)</span>
                    <span class="k">break</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Redis Data Structure-String</title>
			<link>https://jasonyangshadow.win/posts/redis-data-structure-string/</link>
			<pubDate>Thu, 14 Nov 2019 22:00:48 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/redis-data-structure-string/</guid>
			<description>Redis uses its own sds(simple dynamic string) rather than traditional string array because of security and performance requirements.
The definition of sds structures: (sds.h/sds.c)
struct __attribute__ ((__packed__)) sdshdr5 { unsigned char flags; /* 3 lsb of type, and 5 msb of string length */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr8 { uint8_t len; /* used */ uint8_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr16 { uint16_t len; /* used */ uint16_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr32 { uint32_t len; /* used */ uint32_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr64 { uint64_t len; /* used */ uint64_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; There are 5 types of sds definitions, but only 4 of them are used in redis, i.</description>
			<content type="html"><![CDATA[<p>Redis uses its own sds(simple dynamic string) rather than traditional string array because of security and performance requirements.<br>
The definition of sds structures: (sds.h/sds.c)</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">__packed__</span><span class="p">))</span> <span class="n">sdshdr5</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">flags</span><span class="p">;</span> <span class="cm">/* 3 lsb of type, and 5 msb of string length */</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[];</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">__packed__</span><span class="p">))</span> <span class="n">sdshdr8</span> <span class="p">{</span>
    <span class="n">uint8_t</span> <span class="n">len</span><span class="p">;</span> <span class="cm">/* used */</span>
    <span class="n">uint8_t</span> <span class="n">alloc</span><span class="p">;</span> <span class="cm">/* excluding the header and null terminator */</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">flags</span><span class="p">;</span> <span class="cm">/* 3 lsb of type, 5 unused bits */</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[];</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">__packed__</span><span class="p">))</span> <span class="n">sdshdr16</span> <span class="p">{</span>
    <span class="n">uint16_t</span> <span class="n">len</span><span class="p">;</span> <span class="cm">/* used */</span>
    <span class="n">uint16_t</span> <span class="n">alloc</span><span class="p">;</span> <span class="cm">/* excluding the header and null terminator */</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">flags</span><span class="p">;</span> <span class="cm">/* 3 lsb of type, 5 unused bits */</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[];</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">__packed__</span><span class="p">))</span> <span class="n">sdshdr32</span> <span class="p">{</span>
    <span class="n">uint32_t</span> <span class="n">len</span><span class="p">;</span> <span class="cm">/* used */</span>
    <span class="n">uint32_t</span> <span class="n">alloc</span><span class="p">;</span> <span class="cm">/* excluding the header and null terminator */</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">flags</span><span class="p">;</span> <span class="cm">/* 3 lsb of type, 5 unused bits */</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[];</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">__packed__</span><span class="p">))</span> <span class="n">sdshdr64</span> <span class="p">{</span>
    <span class="n">uint64_t</span> <span class="n">len</span><span class="p">;</span> <span class="cm">/* used */</span>
    <span class="n">uint64_t</span> <span class="n">alloc</span><span class="p">;</span> <span class="cm">/* excluding the header and null terminator */</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">flags</span><span class="p">;</span> <span class="cm">/* 3 lsb of type, 5 unused bits */</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[];</span>
<span class="p">};</span>
</code></pre></div><p>There are 5 types of sds definitions, but only 4 of them are used in redis, i.e, sdshdr8, sdshdr16, sdshdr32, sdshdr64. Why defining such structures? Personally I think they are used for preallocating in order to get better performance because server does not need to allocate memory for each request but only finding the proper one to save data.</p>
<p>And also there are two important macros used for acquiring struct pointer address from given data pointer(char *), i.e, char * -&gt; sds *</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));
</span><span class="cp">#define SDS_HDR(T,s) ((struct sdshdr##T *)((s)-(sizeof(struct sdshdr##T))))
</span></code></pre></div><p>The difference between the first and second marco is that, the first one declares one var while the second one directly returns struct pointer.</p>
<p>Another important notice is that: sdsalloc() = sdsavail() + sdslen(), where sdsalloc() = sds-&gt;alloc, sdslen() = sds-&gt; len.  sds-&gt;len does not contain the ending &lsquo;\0&rsquo;, therefore, the real allocated memory size is: sds-&gt;alloc + 1 for the char array.</p>
]]></content>
		</item>
		
		<item>
			<title>cuda issue inside LPMX</title>
			<link>https://jasonyangshadow.win/posts/cuda-issue-inside-lpmx/</link>
			<pubDate>Thu, 04 Jul 2019 18:21:15 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/cuda-issue-inside-lpmx/</guid>
			<description>I find that we could not call application with cuda support inside container even with excluding /dev, /proc, /sys folders inside the container. (which means these folders inside container are actual folders in host) The application fails when trying to read data from /dev/nvidiactl. In our LPMX, we do not need to copy and put every library from host to container, but directly get access to them inside container.
[pid 18836] getcwd(&amp;quot;/home/yangxu/.</description>
			<content type="html"><![CDATA[<p>I find that we could not call application with cuda support inside container even with excluding /dev, /proc, /sys folders inside the container. (which means these folders inside container are actual folders in host)
The application fails when trying to read data from /dev/nvidiactl. In our LPMX, we do not need to copy and put every library from host to container, but directly get access to them inside container.</p>
<pre><code>[pid 18836] getcwd(&quot;/home/yangxu/.docker/ubuntu/16.04/workspace/Xxy3Y3NFzK/rw/root/ont-guppy&quot;, 4096) = 73
[pid 18836] stat(&quot;/dev/nvidiactl&quot;, {st_mode=S_IFCHR|0666, st_rdev=makedev(195, 255), ...}) = 0
[pid 18836] semop(3309669, {{0, -1, SEM_UNDO}}, 1) = 0
[pid 18836] msgsnd(6488262, {1, &quot;\3\0\0\0wI\0\0\245\0\0\0\0\0\0\0\0\0\0\0\333C\1\0\0\0\0\0\5\0\0\0&quot;...}, 56, 0) = 0
[pid 18633] &lt;... msgrcv resumed&gt; {1, &quot;\3\0\0\0wI\0\0\245\0\0\0\0\0\0\0\0\0\0\0\333C\1\0\0\0\0\0\5\0\0\0&quot;...}, 64, 0, 0) = 56
[pid 18836] msgrcv(6521031,  &lt;unfinished ...&gt;
[pid 18633] msgsnd(6521031, {1, &quot;\3\0\0\0wI\0\0\245\0\0\0\0\0\0\0\0\0\0\0\333C\1\0\0\0\0\0\5\0\0\0&quot;...}, 56, 0 &lt;unfinished ...&gt;
[pid 18836] &lt;... msgrcv resumed&gt; {1, &quot;\3\0\0\0wI\0\0\245\0\0\0\0\0\0\0\0\0\0\0\333C\1\0\0\0\0\0\5\0\0\0&quot;...}, 56, 0, 0) = 56
[pid 18633] &lt;... msgsnd resumed&gt; )      = 0
[pid 18836] semop(3309669, {{0, 1, SEM_UNDO}}, 1 &lt;unfinished ...&gt;
[pid 18633] msgrcv(6488262,  &lt;unfinished ...&gt;
[pid 18836] &lt;... semop resumed&gt; )       = 0
[pid 18836] stat(&quot;/dev/nvidiactl&quot;, {st_mode=S_IFCHR|0666, st_rdev=makedev(195, 255), ...}) = 0
[pid 18836] semop(3309669, {{0, -1, SEM_UNDO}}, 1) = 0
[pid 18836] msgsnd(6488262, {1, &quot;\3\0\0\0wI\0\0\246\0\0\0\0\0\0\0\0\0\0\0\333C\1\0\0\0\0\0\5\0\0\0&quot;...}, 56, 0) = 0
[pid 18633] &lt;... msgrcv resumed&gt; {1, &quot;\3\0\0\0wI\0\0\246\0\0\0\0\0\0\0\0\0\0\0\333C\1\0\0\0\0\0\5\0\0\0&quot;...}, 64, 0, 0) = 56
[pid 18836] msgrcv(6521031,  &lt;unfinished ...&gt;
[pid 18633] msgsnd(6521031, {1, &quot;\3\0\0\0wI\0\0\246\0\0\0\0\0\0\0\0\0\0\0\333C\1\0\0\0\0\0\5\0\0\0&quot;...}, 56, 0blo &lt;unfinished ...&gt;
[pid 18836] &lt;... msgrcv resumed&gt; {1, &quot;\3\0\0\0wI\0\0\246\0\0\0\0\0\0\0\0\0\0\0\333C\1\0\0\0\0\0\5\0\0\0&quot;...}, 56, 0, 0) = 56
[pid 18633] &lt;... msgsnd resumed&gt; )      = 0
[pid 18836] semop(3309669, {{0, 1, SEM_UNDO}}, 1 &lt;unfinished ...&gt;
[pid 18633] msgrcv(6488262,  &lt;unfinished ...&gt;
[pid 18836] &lt;... semop resumed&gt; )       = 0
[pid 18836] time(NULL)                  = 1562162203
[pid 18836] stat(&quot;/etc/localtime&quot;, {st_mode=S_IFREG|0644, st_size=333, ...}) = 0

[pid 18836] open(&quot;/dev/nvidiactl&quot;, O_RDWR) = 6
[pid 18836] fcntl(6, F_SETFD, FD_CLOEXEC) = 0
[pid 18836] ioctl(6, 0xc04846d2, 0x7f7bc3539800) = -1 EINVAL (Invalid argument)

[pid 18836] close(6)                    = 0
[pid 18836] ioctl(5, FIGETBSZ, 0)       = 0
[pid 18836] close(5)                    = 0
[pid 18836] futex(0x7f7bc5109680, FUTEX_WAKE_PRIVATE, 2147483647) = 0
[pid 18836] futex(0x7f7bcb589c78, FUTEX_WAKE_PRIVATE, 2147483647) = 0
[pid 18836] madvise(0x7f7bc2b3a000, 10465280, MADV_DONTNEED) = 0
[pid 18836] _exit(0)                    = ?
[pid 18836] +++ exited with 0 +++
[pid 18807] &lt;... futex resumed&gt; )       = 0
[pid 18807] futex(0x7f7bcb589c88, FUTEX_WAKE_PRIVATE, 2147483647) = 0
[pid 18807] brk(0x7f7bcd237000)         = 0x7f7bcd237000
[pid 18807] brk(0x7f7bcd046000)         = 0x7f7bcd046000
[pid 18807] brk(0x7f7bcce56000)         = 0x7f7bcce56000
[pid 18807] brk(0x7f7bccc66000)         = 0x7f7bccc66000
[pid 18807] brk(0x7f7bcca76000)         = 0x7f7bcca76000
[pid 18807] brk(0x7f7bcc885000)         = 0x7f7bcc885000
[pid 18807] brk(0x7f7bcc695000)         = 0x7f7bcc695000
[pid 18807] brk(0x7f7bcc4a5000)         = 0x7f7bcc4a5000
[pid 18807] brk(0x7f7bcc2b5000)         = 0x7f7bcc2b5000
[pid 18807] brk(0x7f7bcc0c4000)         = 0x7f7bcc0c4000
[pid 18807] brk(0x7f7bcbed4000)         = 0x7f7bcbed4000
[pid 18807] brk(0x7f7bcbce4000)         = 0x7f7bcbce4000
[pid 18807] brk(0x7f7bcbaf4000)         = 0x7f7bcbaf4000
[pid 18807] brk(0x7f7bcb903000)         = 0x7f7bcb903000
[pid 18807] brk(0x7f7bcb713000)         = 0x7f7bcb713000
[pid 18807] close(4)                    = 0
[pid 18807] write(3, &quot;2019-07-03 22:56:43.786789 [gupp&quot;..., 171) = 171
[pid 18807] write(2, &quot;[guppy/error] main: Could not cr&quot;..., 149[guppy/error] main: Could not create CUDA device 0: CUDA error at /builds/ofan/ont_core_cpp/ont_core/common/cuda_common.cpp:183: CUDA_ERROR_NO_DEVICE) = 149
</code></pre>]]></content>
		</item>
		
		<item>
			<title>[leedcode]11.Conatiner with Most Water</title>
			<link>https://jasonyangshadow.win/posts/leedcode-11-conatiner-with-most-water/</link>
			<pubDate>Thu, 27 Jun 2019 01:38:32 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/leedcode-11-conatiner-with-most-water/</guid>
			<description>Given n non-negative integers a1, a2, &amp;hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.
Input: [1,8,6,2,5,4,8,3,7] Output: 49 The algorithm is like this, firstly checking the widest length with current most water.</description>
			<content type="html"><![CDATA[<p>Given n non-negative integers a1, a2, &hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<p>Note: You may not slant the container and n is at least 2.</p>
<pre><code>Input: [1,8,6,2,5,4,8,3,7]
Output: 49
</code></pre><p>The algorithm is like this, firstly checking the widest length with current most water. Then shink the length and get higher height because only higher height will bring more water. If encountering lower height then skipping it until finding higher one.</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">maxArea</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">water</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
            <span class="n">water</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">water</span><span class="p">,</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">h</span><span class="p">);</span>
            <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">h</span><span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">height</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">h</span><span class="p">)</span> <span class="n">j</span><span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">water</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>[leetcode]139. Word Break</title>
			<link>https://jasonyangshadow.win/posts/leetcode-139-word-break/</link>
			<pubDate>Wed, 12 Jun 2019 01:55:56 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/leetcode-139-word-break/</guid>
			<description>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.
Note:
 The same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words.  Example 1: Input: s = &amp;quot;leetcode&amp;quot;, wordDict = [&amp;quot;leet&amp;quot;, &amp;quot;code&amp;quot;] Output: true Explanation: Return true because &amp;quot;leetcode&amp;quot; can be segmented as &amp;quot;leet code&amp;quot;.</description>
			<content type="html"><![CDATA[<p>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p>Note:</p>
<ul>
<li>The same word in the dictionary may be reused multiple times in the segmentation.</li>
<li>You may assume the dictionary does not contain duplicate words.</li>
</ul>
<pre><code>Example 1:

Input: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]
Output: true
Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.

Example 2:

Input: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]
Output: true
Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.
             Note that you are allowed to reuse a dictionary word.

Example 3:

Input: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]
Output: false
</code></pre><p>The first solution I could think out of is that, using backtrack solution. If one trial is failed, let algorithm rollback to previous status and try another one. Therefore, we need an stack and skip_len indicator.</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">stack</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">st</span><span class="p">;</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">bool</span> <span class="n">wordBreak</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">wordDict</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//first sorting elements in increasing order
</span><span class="c1"></span>        <span class="n">sort</span><span class="p">(</span><span class="n">wordDict</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">wordDict</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">skip_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()){</span>
            <span class="kt">int</span> <span class="n">pre_len</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">word</span> <span class="p">:</span> <span class="n">wordDict</span><span class="p">){</span>
                <span class="c1">//try every word from shortest length to longest length
</span><span class="c1"></span>                <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">skip_len</span><span class="p">){</span>
                    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
                    <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">word</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            
            <span class="c1">//if failed in finding any new substr
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">==</span> <span class="n">pre_len</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
                    <span class="c1">//rollback
</span><span class="c1"></span>                    <span class="n">s</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">+</span> <span class="n">s</span><span class="p">;</span>
                    <span class="n">skip_len</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">length</span><span class="p">();</span>
                    <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div><p>But this solution requires too much time and achieves the time limitaion. So after searching some docs, DP version is more efficient.</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">bool</span> <span class="n">wordBreak</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">wordDict</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">wordDict</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span><span class="mi">1</span><span class="p">){</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="c1">//here dp[i] represents that whether word sequence ends at i, meaning that index smaller than i contains(or not) word in wordDict
</span><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="c1">//substr ends at i
</span><span class="c1"></span>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
                    <span class="c1">//check each substr ends i
</span><span class="c1"></span>                    <span class="n">string</span> <span class="n">w</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="p">);</span>
                    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">word</span> <span class="p">:</span> <span class="n">wordDict</span><span class="p">){</span>
                        <span class="k">if</span><span class="p">(</span><span class="n">word</span> <span class="o">==</span> <span class="n">w</span><span class="p">){</span>
                            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()];</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>[leetcode]64.Minimum Path Sum</title>
			<link>https://jasonyangshadow.win/posts/leetcode-64-minimum-path-sum/</link>
			<pubDate>Wed, 12 Jun 2019 00:43:00 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/leetcode-64-minimum-path-sum/</guid>
			<description>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time. Example:
Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1→3→1→1→1 minimizes the sum. This is a classical DP problem. The migration function of this problem can be described as:</description>
			<content type="html"><![CDATA[<p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p>
<p>Note: You can only move either down or right at any point in time.
Example:</p>
<pre><code>Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
</code></pre><p>This is a classical DP problem. The migration function of this problem can be described as:</p>
<pre><code>S[i][j] = min(S[i-1][j], S[i][j-1]) + value[i][j], where S[i][j] represents the minimized sum of all numbers to position i, j
</code></pre><div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">minPathSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">grid</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
        
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">m</span> <span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        
        <span class="c1">//initilize first row and first column
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="p">}</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div><p>An optimized version, because we know that each time only two columns are required</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">minPathSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">grid</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
        
        <span class="c1">//pre and cur column, pre is initialized as first item grid[0][0]
</span><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pre</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]),</span> <span class="n">cur</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
        
       <span class="c1">//initialize pre column
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="p">}</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="c1">//initalize the first row
</span><span class="c1"></span>            <span class="n">cur</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="c1">//calculate remain values
</span><span class="c1"></span>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span><span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
                <span class="c1">//cur[i-1] comes from top, pre[i] comes from left
</span><span class="c1"></span>                <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
        <span class="p">}</span>
       <span class="c1">//pre represents current value 
</span><span class="c1"></span>        <span class="k">return</span> <span class="n">pre</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div><p>As we can see, pre column represents the last status of current column. So let use shorten the code again:</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">minPathSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">grid</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
        
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">cur</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="c1">//cur[i-1] comes from top
</span><span class="c1"></span>            <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="p">}</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="c1">//first cur[0] is current status, second cur[0] is last status
</span><span class="c1"></span>            <span class="n">cur</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
                <span class="c1">//first cur[i] is current status, second cur[i] is last status, cur[i-1] comes from top
</span><span class="c1"></span>                <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">cur</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Atcoder beginner solutions(C&#43;&#43; version)</title>
			<link>https://jasonyangshadow.win/posts/atcoder-beginner-solutions-c-version/</link>
			<pubDate>Sat, 08 Jun 2019 18:25:27 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/atcoder-beginner-solutions-c-version/</guid>
			<description>Only for reference, they are not best solutions. ABC086A - Product #include &amp;lt;iostream&amp;gt;using namespace std; int main(){ int a, b; cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b; if(a % 2 == 1 &amp;amp;&amp;amp; b % 2 == 1){ cout&amp;lt;&amp;lt;&amp;#34;Odd&amp;#34;&amp;lt;&amp;lt;endl; }else{ cout&amp;lt;&amp;lt;&amp;#34;Even&amp;#34;&amp;lt;&amp;lt;endl; } return 0; } 2.ABC081A - Placing Marbles #include &amp;lt;iostream&amp;gt;using namespace std; int main(){ string a; cin&amp;gt;&amp;gt;a; int ret = 0; for(auto x : a){ if(x == &amp;#39;1&amp;#39;){ ret++; } } cout&amp;lt;&amp;lt;ret&amp;lt;&amp;lt;endl; return 0; }</description>
			<content type="html"><![CDATA[<p>Only for reference, they are not best solutions.</p>
<ol>
<li><a href="https://atcoder.jp/contests/abs/tasks/abc086_a">ABC086A - Product</a></li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;Odd&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;Even&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>2.<a href="https://atcoder.jp/contests/abs/tasks/abc081_a">ABC081A - Placing Marbles</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="n">string</span> <span class="n">a</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">x</span> <span class="p">:</span> <span class="n">a</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="sc">&#39;1&#39;</span><span class="p">){</span>
      <span class="n">ret</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ret</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>3.<a href="https://atcoder.jp/contests/abs/tasks/abc081_b">ABC081B - Shift only</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;climits&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">;</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">num</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">num</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
    <span class="n">data</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kt">int</span> <span class="n">minv</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">n</span> <span class="p">:</span> <span class="n">data</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)){</span>
      <span class="n">count</span><span class="o">++</span><span class="p">;</span>
      <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">minv</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">minv</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">minv</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>4.<a href="https://atcoder.jp/contests/abs/tasks/abc087_b">ABC087B - Coins</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;climits&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">X</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">A</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">B</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">C</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">X</span><span class="p">;</span>
  
  <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">B</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;=</span><span class="n">C</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="mi">500</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">100</span><span class="o">*</span><span class="n">j</span><span class="o">+</span><span class="mi">50</span><span class="o">*</span><span class="n">k</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span><span class="n">count</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">count</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>5.<a href="https://atcoder.jp/contests/abs/tasks/abc083_b">ABC083B - Some Sums</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;climits&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">bool</span> <span class="nf">valid</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">B</span><span class="p">){</span>
  <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="p">){</span>
    <span class="n">val</span> <span class="o">+=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">val</span><span class="o">&gt;=</span><span class="n">A</span> <span class="o">&amp;&amp;</span> <span class="n">val</span><span class="o">&lt;=</span><span class="n">B</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="o">&gt;&gt;</span><span class="n">A</span><span class="o">&gt;&gt;</span><span class="n">B</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">valid</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">)){</span>
      <span class="n">ret</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ret</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>6.<a href="https://atcoder.jp/contests/abs/tasks/abc088_b">ABC088B - Card Game for Two</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;climits&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
  	<span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">val</span><span class="p">;</span>
    <span class="n">data</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">sort</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">data</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">greater</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">());</span>
  <span class="kt">long</span> <span class="n">alice</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">long</span> <span class="n">bob</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
      <span class="n">alice</span> <span class="o">+=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="n">bob</span> <span class="o">+=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">alice</span> <span class="o">-</span> <span class="n">bob</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>7.<a href="https://atcoder.jp/contests/abs/tasks/abc085_b">ABC085B - Kagami Mochi</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unordered_set&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;climits&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
  <span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
  	<span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">val</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="o">==</span> <span class="n">data</span><span class="p">.</span><span class="n">end</span><span class="p">()){</span>
      <span class="n">data</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>8.<a href="https://atcoder.jp/contests/abs/tasks/abc085_c">ABC085C - Otoshidama</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unordered_set&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;climits&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">Y</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="o">&gt;&gt;</span><span class="n">Y</span><span class="p">;</span>
  
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="o">-</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
      <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">N</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">);</span>
      <span class="k">if</span><span class="p">(</span><span class="mi">10000</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="mi">5000</span><span class="o">*</span><span class="n">j</span> <span class="o">+</span> <span class="n">k</span><span class="o">*</span><span class="mi">1000</span> <span class="o">==</span> <span class="n">Y</span><span class="p">){</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="o">&lt;&lt;</span><span class="n">j</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="o">&lt;&lt;</span><span class="n">k</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;-1 -1 -1&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>9.<a href="https://atcoder.jp/contests/abs/tasks/arc065_a">ABC049C - 白昼夢 / Daydream</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stack&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="n">string</span> <span class="n">S</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">S</span><span class="p">;</span>  
  <span class="n">stack</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">st</span><span class="p">;</span>
  <span class="n">string</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;dream&#34;</span><span class="p">,</span><span class="s">&#34;dreamer&#34;</span><span class="p">,</span> <span class="s">&#34;erase&#34;</span><span class="p">,</span> <span class="s">&#34;eraser&#34;</span><span class="p">};</span>
  <span class="kt">int</span> <span class="n">skip_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">slen</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">length</span><span class="p">()</span><span class="o">&gt;</span><span class="n">skip_len</span><span class="p">){</span>
        <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="n">S</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">length</span><span class="p">());</span>
        <span class="n">skip_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">if</span><span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">==</span> <span class="n">slen</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">S</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">+</span> <span class="n">S</span><span class="p">;</span>
        <span class="n">skip_len</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">length</span><span class="p">();</span>
        <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;NO&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
      	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;YES&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>10.<a href="https://atcoder.jp/contests/abs/tasks/arc089_a">ABC086C - Traveling</a></p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">point</span><span class="p">{</span>
  <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="k">struct</span> <span class="nc">point</span> <span class="o">&amp;</span><span class="n">p1</span><span class="p">,</span> <span class="k">struct</span> <span class="nc">point</span> <span class="o">&amp;</span><span class="n">p2</span><span class="p">){</span>
  <span class="kt">int</span> <span class="n">t_diff</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">t</span> <span class="o">-</span> <span class="n">p2</span><span class="p">.</span><span class="n">t</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">l_diff</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">p2</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">p2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="n">t_diff</span> <span class="o">&lt;</span> <span class="n">l_diff</span><span class="p">){</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">t_diff</span> <span class="o">-</span> <span class="n">l_diff</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="k">struct</span> <span class="nc">point</span><span class="o">&gt;</span> <span class="n">vc</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">point</span> <span class="n">p</span><span class="p">{</span><span class="n">t</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">};</span>
    <span class="n">vc</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="k">struct</span> <span class="nc">point</span> <span class="n">start</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">vc</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">compare</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">p</span><span class="p">)){</span>
      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;No&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;Yes&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>migration to hexo</title>
			<link>https://jasonyangshadow.win/posts/migration-to-hexo/</link>
			<pubDate>Sat, 08 Jun 2019 17:30:43 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/migration-to-hexo/</guid>
			<description>At last, my self-host website migrates from wordpress to hexo, which cost me several hours to make everything work as expected. Wordpress is good, easy to build but too heavy for me, so many plugins and have to expose wp-login.php to public with security risks. Hexo is much lighter, using markdown as editor so I could use my vim. Though, it is a bit of difficult to deploy static files to self-host server, self-host git and git hooks help me so much so that I could edit, generate and deploy my website anywhere.</description>
			<content type="html"><![CDATA[<p>At last, my self-host website migrates from wordpress to hexo, which cost me several hours to make everything work as expected.
Wordpress is good, easy to build but too heavy for me, so many plugins and have to expose wp-login.php to public with security risks. Hexo is much lighter, using markdown as editor so I could use my vim. Though, it is a bit of difficult to deploy static files to self-host server, self-host git and git hooks help me so much so that I could edit, generate and deploy my website anywhere. Also hexo makes the structure of my wewbsite clearer, nginx is used as web server and ufw is enabled. Through port mapping feature of my wireless router, everything goes well and the migration is easy to complete.</p>
<p>Love Hexo!!</p>
]]></content>
		</item>
		
		<item>
			<title>[leetcode]1011 capacity-to-ship-packages-within-d-days</title>
			<link>https://jasonyangshadow.win/posts/leetcode1011-capacity-to-ship-packages-within-d-days/</link>
			<pubDate>Mon, 27 May 2019 14:18:14 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/leetcode1011-capacity-to-ship-packages-within-d-days/</guid>
			<description>A conveyor belt has packages that must be shipped from one port to another within D days.
The i-th package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.
Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within D days.</description>
			<content type="html"><![CDATA[<p>A conveyor belt has packages that must be shipped from one port to another within D days.</p>
<p>The i-th package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.</p>
<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within D days.</p>
<pre><code>    Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5
    Output: 15
    Explanation: 
    A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
    1st day: 1, 2, 3, 4, 5
    2nd day: 6, 7
    3rd day: 8
    4th day: 9
    5th day: 10
    
    Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. 
</code></pre><p>Some common tips for solving this kind of problem.</p>
<ol>
<li>
<p>Determine the lower and higher boundary of searched array.</p>
</li>
<li>
<p>For this problem, lower boundary is max(max_num, sum_of_num / D days), higher boundary is sum_of_num.</p>
</li>
<li>
<p>Loop to check each item in boundary array. The important point is that, after each loop, we have to modify the boundary as we did in binary search algorithm to find optimized target(greedy search)__libc_start_main</p>
<h2 id="name">Name</h2>
<p>__libc_start_main &ndash; initialization routine</p>
<h2 id="synopsis">Synopsis</h2>
<pre><code>BP_SYM   __libc_start_main(int (*main) (int, char**, char**), int   *argc*, char *__unbounded *__unbounded   *ubp_av*, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (*__unbounded  *stack_end*));
</code></pre><h2 id="description">Description</h2>
<p><code>__libc_start_main</code> initializes glibc.</p>
<p><code>__libc_start_main</code> is not in the source standard;  it is only in the binary standard.</p>
</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp">    <span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">countDays</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">ws</span><span class="p">,</span> <span class="kt">int</span> <span class="n">top_cap</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cur_cap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">1</span><span class="p">){</span>
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">w</span> <span class="p">:</span> <span class="n">ws</span><span class="p">){</span>
                <span class="n">cur_cap</span> <span class="o">+=</span> <span class="n">w</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">cur_cap</span> <span class="o">&gt;</span> <span class="n">top_cap</span><span class="p">){</span>
                    <span class="o">++</span><span class="n">ret</span><span class="p">;</span>
                    <span class="n">cur_cap</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
        <span class="p">}</span>
    
        <span class="kt">int</span> <span class="nf">shipWithinDays</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">weights</span><span class="p">,</span> <span class="kt">int</span> <span class="n">D</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">auto</span> <span class="n">r</span> <span class="o">=</span> <span class="n">accumulate</span><span class="p">(</span><span class="n">weights</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">weights</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
            <span class="k">auto</span> <span class="n">l</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">r</span><span class="o">/</span><span class="n">D</span><span class="p">,</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">weights</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">weights</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">auto</span> <span class="n">m</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">countDays</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">D</span><span class="p">)</span>
                    <span class="n">r</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
                <span class="k">else</span>
                    <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>
</code></pre></div><p>reference: <a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/">https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/</a></p>
]]></content>
		</item>
		
		<item>
			<title>Vim plugin to post blogs remotely</title>
			<link>https://jasonyangshadow.win/posts/vim-plugin-to-post-blogs-remotely/</link>
			<pubDate>Tue, 21 May 2019 06:51:55 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/vim-plugin-to-post-blogs-remotely/</guid>
			<description>I uses wordpress as my private website while still struggling on finding different tools to write blogs remotely. I tried different tools including wordpress electron app here and vscode with extension &amp;ldquo;markdown-mail&amp;rdquo;, still gets no luck.
Wordpress desktop app is easy to setup and use, but it does not support markdown edit and preview, kind of disappoint. Markdown-mail is an extension published on vscode marketplace, I have tried it but gets no luck, it could not send my markdown doc to wordpress via email address.</description>
			<content type="html"><![CDATA[<p>I uses wordpress as my private website while still struggling on finding different tools to write blogs remotely. I tried different tools including wordpress electron app <a href="https://apps.wordpress.com/desktop/">here</a> and vscode with extension <a href="https://marketplace.visualstudio.com/items?itemName=ccccly.markdown-mail">&ldquo;markdown-mail&rdquo;</a>, still gets no luck.<br>
Wordpress desktop app is easy to setup and use, but it does not support markdown edit and preview, kind of disappoint. Markdown-mail is an extension published on vscode marketplace, I have tried it but gets no luck, it could not send my markdown doc to wordpress via email address.<br>
Finally I found one vim plugin named <a href="https://github.com/vim-scripts/VimRepress">vimrepress</a>, at first glance, I have to say it has not been updated for more than 5 years, I think it may not work properly as wordpress has already published so many versions. However after installing and configing this plugin, it works correctly as I expect. Great work!!!!</p>
<p>You definitely have to try this plugin if you are like me, expecting using vim as main editor and publishing blogs remotely!!</p>
]]></content>
		</item>
		
		<item>
			<title>golang scheduler</title>
			<link>https://jasonyangshadow.win/posts/golang-os-scheduler/</link>
			<pubDate>Mon, 06 May 2019 02:28:17 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/golang-os-scheduler/</guid>
			<description>Recently I am interested in the implementation and mechanics behind the scheduler in Go, as I just finished developing one job schedule system several days ago. Thougth I could not share more details on that system, it is simple and motives me to dig deeper into golang itself.
Found one really useful blog https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html
Generally speaking, go scheduler is really amazing by trunning I/O blocking work into CPU-bound work at the os level and it has great performance over traditional implementation when programs have to trigger system calls frequently.</description>
			<content type="html"><![CDATA[<p>Recently I am interested in the implementation and mechanics behind the scheduler in Go, as I just finished developing one job schedule system several days ago. Thougth I could not share more details on that system, it is simple and motives me to dig deeper into golang itself.</p>
<p>Found one really useful blog <a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html">https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html</a></p>
<p>Generally speaking, go scheduler is really amazing by trunning I/O blocking work into CPU-bound work at the os level and it has great performance over traditional implementation when programs have to trigger system calls frequently.</p>
]]></content>
		</item>
		
		<item>
			<title>Review of new features of C&#43;&#43; 11/14/17 before C&#43;&#43; 20 comes</title>
			<link>https://jasonyangshadow.win/posts/review-of-new-features-of-c-11-14-17-before-c-20-comes/</link>
			<pubDate>Fri, 26 Apr 2019 10:15:17 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/review-of-new-features-of-c-11-14-17-before-c-20-comes/</guid>
			<description>From C++ 11, it comes with tons of new features, and makes C++ an absolute new langauage. Honestly speaking, my knowledge on C++ still stops in the year of 2008. Recently, golang is popular and it could replace part of C++ to some extend for the development of distributed system.
But we should keep learning? Isn&amp;rsquo;t it?. Just find one github repo, which lists all most of new features of C++ 11/14/17.</description>
			<content type="html"><![CDATA[<p>From C++ 11, it comes with tons of new features, and makes C++ an absolute new langauage. Honestly speaking, my knowledge on C++ still stops in the year of 2008. Recently, golang is popular and it could replace part of C++ to some extend for the development of distributed system.</p>
<p>But we should keep learning? Isn&rsquo;t it?. Just find one github repo, which lists all most of new features of C++ 11/14/17.</p>
<p><a href="https://github.com/AnthonyCalandra/modern-cpp-features">C++ 11/14/17 new features</a></p>
]]></content>
		</item>
		
		<item>
			<title>LPMX Alpha-release v0.4</title>
			<link>https://jasonyangshadow.win/posts/lpmx-alpha-release-v0-4/</link>
			<pubDate>Sat, 13 Apr 2019 15:25:49 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/lpmx-alpha-release-v0-4/</guid>
			<description>LPMX Alpha-v0.4 release
[Fix]
 permission denied issue during uncompressing docker image  [Enhancement]
 Add support for downloading files from google drive  LPMX, i.e, Local Package Manager X, is a pure rootless and composable container system.</description>
			<content type="html"><![CDATA[<p><a href="https://github.com/JasonYangShadow/lpmx/releases/tag/v0.4">LPMX Alpha-v0.4 release</a></p>
<p>[Fix]</p>
<ol>
<li>permission denied issue during uncompressing docker image</li>
</ol>
<p>[Enhancement]</p>
<ol>
<li>Add support for downloading files from google drive</li>
</ol>
<p>LPMX, i.e, Local Package Manager X, is a pure rootless and composable container system.</p>
]]></content>
		</item>
		
		<item>
			<title>containerized ubuntu 16.04 noted issues</title>
			<link>https://jasonyangshadow.win/posts/containerized-ubuntu-16-04-noted-issues/</link>
			<pubDate>Sat, 13 Apr 2019 15:14:37 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/containerized-ubuntu-16-04-noted-issues/</guid>
			<description>Issue 1: Error during &amp;lsquo;apt install xxx&amp;rsquo;
 debconf: delaying package configuration, since apt-utils is not installed (Reading database ... 4768 files and directories currently installed.) Preparing to unpack .../nano_2.5.3-2ubuntu2_amd64.deb ... Unpacking nano (2.5.3-2ubuntu2) ... dpkg: error processing archive /var/cache/apt/archives/nano_2.5.3-2ubuntu2_amd64.deb (--unpack): error setting timestamps of &#39;/bin/rnano.dpkg-new&#39;: No such file or directory Errors were encountered while processing: /var/cache/apt/archives/nano_2.5.3-2ubuntu2_amd64.deb E: Sub-process /usr/bin/dpkg returned an error code (1) Still work on figuring out the reason.</description>
			<content type="html"><![CDATA[<p>Issue 1: Error during &lsquo;apt install xxx&rsquo;</p>
<pre><code>    debconf: delaying package configuration, since apt-utils is not installed
    (Reading database ... 4768 files and directories currently installed.)
    Preparing to unpack .../nano_2.5.3-2ubuntu2_amd64.deb ...
    Unpacking nano (2.5.3-2ubuntu2) ...
    dpkg: error processing archive /var/cache/apt/archives/nano_2.5.3-2ubuntu2_amd64.deb (--unpack):
     error setting timestamps of '/bin/rnano.dpkg-new': No such file or directory
    Errors were encountered while processing:
     /var/cache/apt/archives/nano_2.5.3-2ubuntu2_amd64.deb
    E: Sub-process /usr/bin/dpkg returned an error code (1)
</code></pre><p>Still work on figuring out the reason. It seems that it is caused by our fake union file system in <a href="https://github.com/jasonyangshadow/lpmx">LPMX</a></p>
<p>Will update later.</p>
]]></content>
		</item>
		
		<item>
			<title>containerized centos 7 issues and solutions</title>
			<link>https://jasonyangshadow.win/posts/containerized-centos-7-issues-and-solutions/</link>
			<pubDate>Sat, 13 Apr 2019 15:02:53 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/containerized-centos-7-issues-and-solutions/</guid>
			<description>Just make containerized centos 7 run properly in LPMX. Issue 1: Error during &amp;lsquo;yum update&amp;rsquo;
 error: db5 error(5) from dbenv-&amp;gt;open: Input/output error error: cannot open Packages index using db5 - Input/output error (5) error: cannot open Packages database in /var/lib/rpm CRITICAL:yum.main: Error: rpmdb open failed Solution 1: Rebuild rpm db
 rm -f /var/lib/rpm/__db* db_verify /var/lib/rpm/Packages rpm --rebuilddb yum clean all Issue 2: Error during &amp;lsquo;yum install xxx&amp;rsquo;
 Traceback (most recent call last): File &amp;quot;/usr/bin/yum&amp;quot;, line 29, in &amp;lt;module&amp;gt; yummain.</description>
			<content type="html"><![CDATA[<p>Just make containerized centos 7 run properly in <a href="https://github.com/jasonyangshadow/lpmx">LPMX</a>.
Issue 1: Error during &lsquo;yum update&rsquo;</p>
<pre><code>    error: db5 error(5) from dbenv-&gt;open: Input/output error
    error: cannot open Packages index using db5 - Input/output error (5)
    error: cannot open Packages database in /var/lib/rpm
    CRITICAL:yum.main:
    
    Error: rpmdb open failed
</code></pre><p>Solution 1: Rebuild rpm db</p>
<pre><code>    rm -f /var/lib/rpm/__db*
    db_verify /var/lib/rpm/Packages
    rpm --rebuilddb
    yum clean all
</code></pre><p>Issue 2: Error during &lsquo;yum install xxx&rsquo;</p>
<pre><code>    Traceback (most recent call last):
      File &quot;/usr/bin/yum&quot;, line 29, in &lt;module&gt;
        yummain.user_main(sys.argv[1:], exit_code=True)
      File &quot;/usr/share/yum-cli/yummain.py&quot;, line 375, in user_main
        errcode = main(args)
      File &quot;/usr/share/yum-cli/yummain.py&quot;, line 281, in main
        return_code = base.doTransaction()
      File &quot;/usr/share/yum-cli/cli.py&quot;, line 817, in doTransaction
        resultobject = self.runTransaction(cb=cb)
      File &quot;/home/yangxu/.docker/centos/7/workspace/1UjR02S18N/8ba884070f611d31cb2c42eddb691319dc9facf5e0ec67672fcfa135181ab3df/usr/lib/python2.7/site-packages/yum/__init__.py&quot;, line 1834, in runTransaction                                                                                                                                                                  
        lastdbv = self.history.last()
      File &quot;/home/yangxu/.docker/centos/7/workspace/1UjR02S18N/8ba884070f611d31cb2c42eddb691319dc9facf5e0ec67672fcfa135181ab3df/usr/lib/python2.7/site-packages/yum/history.py&quot;, line 1271, in last                                                                                                                                                                             
        ret = self.old([], 1, complete_transactions_only)
      File &quot;/home/yangxu/.docker/centos/7/workspace/1UjR02S18N/8ba884070f611d31cb2c42eddb691319dc9facf5e0ec67672fcfa135181ab3df/usr/lib/python2.7/site-packages/yum/history.py&quot;, line 1220, in old                                                                                                                                                                              
        executeSQL(cur, sql, params)
      File &quot;/home/yangxu/.docker/centos/7/workspace/1UjR02S18N/8ba884070f611d31cb2c42eddb691319dc9facf5e0ec67672fcfa135181ab3df/usr/lib/python2.7/site-packages/yum/sqlutils.py&quot;, line 166, in executeSQLQmark                                                                                                                                                                  
        return cursor.execute(query)
    sqlite3.DatabaseError: database disk image is malformed

sqlite3 database error
</code></pre><p>Solution 2:</p>
<pre><code>    yum clean all
    yum history new
    yum install xxx
</code></pre><p>Will update later.</p>
]]></content>
		</item>
		
		<item>
			<title>compiling LPMX&#39;s dependencies on centos 5.5</title>
			<link>https://jasonyangshadow.win/posts/compiling-lpmxs-dependencies-on-centos-5-5/</link>
			<pubDate>Tue, 02 Apr 2019 11:32:33 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/compiling-lpmxs-dependencies-on-centos-5-5/</guid>
			<description>LPMX is a pure composable rootless container system. It runs purely in rootless mode and is designed for running under restricted environments such as grid infrastructure and batch system, where end-users could not get root privileges. LPMX itself is developed using golang and could be easily compiled and deployed acroos different platforms. However, its dependencis including fakechroot, fakeroot and memcached related stuff have to be recompiled. Here I use centos 5.</description>
			<content type="html"><![CDATA[<p><a href="https://github.com/jasonyangshadow/lpmx">LPMX</a> is a pure composable rootless container system. It runs purely in rootless mode and is designed for running under restricted environments such as grid infrastructure and batch system, where end-users could not get root privileges. LPMX itself is developed using golang and could be easily compiled and deployed acroos different platforms. However, its dependencis including fakechroot, fakeroot and memcached related stuff have to be recompiled. Here I use centos 5.5 whose glibc version is 2.5(should be enough compatable with other software) to compile LPMX&rsquo;s dependencies.</p>
<ol>
<li>I&rsquo;ve installed centos 5.5 downloaded from <a href="http://vault.centos.org">Vault Centos</a></li>
<li>Install basic packages</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo yum install make gcc44 gcc44-c++ gcc-c++ libevent libevent-devel
</code></pre></div><ol start="3">
<li>Use gcc44 rather than default gcc4.1.2</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">CC</span><span class="o">=</span>/usr/bin/gcc44
<span class="nb">export</span> <span class="nv">CXX</span><span class="o">=</span>/usr/bin/g++44
</code></pre></div><ol start="4">
<li>For downloading the source code from github or other website requiring ssl connection. We have to compile openssl, git, and wget firstly in order for better tls support, here I avoid this by downloading and copying source code from host to virtualized centos 5.5.</li>
<li>compile <a href="https://ftp.gnu.org/gnu/automake">automake 1.10.1</a></li>
<li>compile <a href="https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz">autoconf 2.69</a></li>
<li>compile <a href="https://ftp.gnu.org/gnu/libtool/libtool-2.2.2.tar.gz">libtool 2.2.2</a></li>
<li>compile <a href="https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz">libmemcached 1.0.18</a></li>
<li>compile <a href="https://cmake.org/files/v3.0/">cmake 3.0</a></li>
<li>compile <a href="https://github.com/msgpack/msgpack-c.git">msgpack-c</a></li>
<li>compile <a href="https://github.com/mackyle/fakeroot/archive/debian/1.14.4-1.zip">fakeroot 1.14.4-1</a> if failed to compile fakeroot, we could directly install rpm <a href="https://drive.google.com/file/d/1gHB8Xx_eSQbLVJMKrViPhietFlPQnbah/view?usp=sharing">package</a></li>
<li>compile <a href="https://memcached.org/files/memcached-1.5.12.tar.gz">memcached</a></li>
</ol>
<p>Will be updated later.</p>
<p>2019-04-12 update I have already built a vagrant box for this. <a href="https://app.vagrantup.com/jasonyangshadow/boxes/centos5.5">Available Here</a> or if you have already installed vagrant locally, please run this command:</p>
<pre><code>    vagrant init jasonyangshadow/centos5.5 \
      --box-version 0.1
    vagrant up
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Unravel 2(毛线小精灵2）</title>
			<link>https://jasonyangshadow.win/posts/unravel2/</link>
			<pubDate>Mon, 10 Dec 2018 01:53:57 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/unravel2/</guid>
			<description>最近在origin上收了俩小游戏，毛线小精灵1&amp;amp;2，两年之前在上海的时候还在玩第一代，不过那时候没有坚持下去玩，毕竟忙这忙那的，最近</description>
			<content type="html"><![CDATA[<p>最近在origin上收了俩小游戏，毛线小精灵1&amp;2，两年之前在上海的时候还在玩第一代，不过那时候没有坚持下去玩，毕竟忙这忙那的，最近忙里偷闲呗，正好买来玩玩。超棒！！！</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/o3STQguVs10" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
]]></content>
		</item>
		
		<item>
			<title>wechat-bot</title>
			<link>https://jasonyangshadow.win/posts/wechat-bot/</link>
			<pubDate>Mon, 01 Oct 2018 11:55:39 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/wechat-bot/</guid>
			<description>As wechat is my main social instant message communication tool, I&amp;rsquo;ve used it every day hundreds of times. Let&amp;rsquo;s develop something funny for wechat. Prerequisite: 1. Python 3+ 2. Python-virtualenv 3. Python-pip There is already one famous python framework for wechat web login named &amp;lsquo;itchat&amp;rsquo;, it provides automatic auth and easy event handler registration. The abc abstract metaclass is introduced to develop an abstract base template for customized filters. from</description>
			<content type="html"><![CDATA[<p>As wechat is my main social instant message communication tool, I&rsquo;ve used it every day hundreds of times. Let&rsquo;s develop something funny for wechat. Prerequisite: 1. Python 3+ 2. Python-virtualenv 3. Python-pip There is already one famous python framework for wechat web login named &lsquo;itchat&rsquo;, it provides automatic auth and easy event handler registration. The abc abstract metaclass is introduced to develop an abstract base template for customized filters.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">    <span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">ABCMeta</span><span class="p">,</span> <span class="n">abstractmethod</span>
    <span class="k">class</span> <span class="nc">absfilter</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">ABCMeta</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">reply</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">msg</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">absfilter</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">msgprocess</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
        <span class="nd">@abstractmethod</span>
        <span class="k">def</span> <span class="nf">msgprocess</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">msg</span><span class="p">):</span>
                <span class="k">pass</span>
</code></pre></div><p>Then customized filters for weather querying, currency exchanging and tranlation feature can be established. For example, code for translation through google translate api is as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">    <span class="kn">from</span> <span class="nn">absfilter</span> <span class="kn">import</span> <span class="n">absfilter</span>
    <span class="kn">from</span> <span class="nn">urllib.request</span> <span class="kn">import</span> <span class="n">Request</span><span class="p">,</span><span class="n">quote</span><span class="p">,</span><span class="n">urlopen</span><span class="p">,</span><span class="n">unquote</span>
    <span class="kn">import</span> <span class="nn">json</span>
    
    <span class="k">class</span> <span class="nc">translatefilter</span><span class="p">(</span><span class="n">absfilter</span><span class="p">):</span>
        <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__api</span> <span class="o">=</span> <span class="s1">&#39;https://translate.googleapis.com/translate_a/single?client=gtx&amp;dt=t&amp;sl=&#39;</span>
    
        <span class="k">def</span> <span class="nf">msgprocess</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">msg</span><span class="p">):</span>
            <span class="k">if</span> <span class="sa">u</span><span class="s1">&#39;翻译 &#39;</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">:</span>
                <span class="n">target</span> <span class="o">=</span> <span class="n">msg</span><span class="p">[</span><span class="n">msg</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;翻译 &#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="p">:]</span>
                <span class="n">req_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__api</span> <span class="o">+</span> <span class="s1">&#39;zh&#39;</span> <span class="o">+</span><span class="s1">&#39;&amp;tl=ja&amp;q=&#39;</span><span class="o">+</span><span class="n">quote</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
                <span class="n">req</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(</span><span class="n">req_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0&#39;</span><span class="p">})</span>
                <span class="n">webpage</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span><span class="n">req</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
                <span class="n">webpage</span> <span class="o">=</span> <span class="n">webpage</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
                <span class="n">jsonvalue</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">webpage</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">jsonvalue</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">jsonvalue</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">elif</span> <span class="sa">u</span><span class="s1">&#39;翻訳 &#39;</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">:</span>
                <span class="n">target</span> <span class="o">=</span> <span class="n">msg</span><span class="p">[</span><span class="n">msg</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;翻訳 &#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="p">:]</span>
                <span class="n">req_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__api</span> <span class="o">+</span> <span class="s1">&#39;ja&#39;</span> <span class="o">+</span><span class="s1">&#39;&amp;tl=zh&amp;q=&#39;</span><span class="o">+</span><span class="n">quote</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
                <span class="n">req</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(</span><span class="n">req_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0&#39;</span><span class="p">})</span>
                <span class="n">webpage</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span><span class="n">req</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
                <span class="n">webpage</span> <span class="o">=</span> <span class="n">webpage</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
                <span class="n">jsonvalue</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">webpage</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">jsonvalue</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">jsonvalue</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
</code></pre></div><p>Though the code is bit of ugly, it provides the basic Zh-&gt;Ja and Ja-&gt;Zh feature through detecting different prefixs sent by wechat to me or in group chat. Check the code on github, <a href="https://github.com/JasonYangShadow/wechat-bot">https://github.com/JasonYangShadow/wechat-bot</a></p>
]]></content>
		</item>
		
		<item>
			<title>fake union file system</title>
			<link>https://jasonyangshadow.win/posts/fake-union-file-system/</link>
			<pubDate>Thu, 20 Sep 2018 14:16:54 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/fake-union-file-system/</guid>
			<description>Recently, I keep working on developing a fake unionfs for our rootless container. As we employ fakechroot to intercept system calls triggered by programs, I added code for unionfs support. The basic rules for our fake unionfs: 1. Complete rootless, unlike current implementations such as FUSE, we don&amp;rsquo;t need to install any hooks or kernel models in order to bridge kernel with userspace, all features provided are implemented by system calls interception.</description>
			<content type="html"><![CDATA[<p>Recently, I keep working on developing a fake unionfs for our rootless container. As we employ fakechroot to intercept system calls triggered by programs, I added code for unionfs support. The basic rules for our fake unionfs: 1. Complete rootless, unlike current implementations such as FUSE, we don&rsquo;t need to install any hooks or kernel models in order to bridge kernel with userspace, all features provided are implemented by system calls interception. 2. Similar architecture, unionfs, for instance, overlays2, has different layers, e.g, low-level dir, high-level dir and merged dir to manipulate files and folders. My implementation also shares a similar philosophy, files or folders existed in high-level dir always hide the ones in low-level dir. Any deletion always happens in RW dir meaning that other layers are kept untouched as they are always treated as read-only layers. 3. The innovative part of my implementation is that root privilege is always not demanded. I will share more detailed implementation when I&rsquo;ve finished this part. <a href="https://github.com/jasonyangshadow/fakechroot">fakechroot</a></p>
]]></content>
		</item>
		
		<item>
			<title>GSDM SIP &#34;Future city: Horizon Scanning in Urban Planning&#34;</title>
			<link>https://jasonyangshadow.win/posts/gsdm-sip-future-city-horizon-scanning-in-urban-planning/</link>
			<pubDate>Thu, 20 Sep 2018 04:06:10 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/gsdm-sip-future-city-horizon-scanning-in-urban-planning/</guid>
			<description>This project is supported by GSDM program. In this project, our 4 team members work together to establsh a new policy tool for municipal governace to improve strategic planning and guide policy-making ahead of actual events. To achive this goal, we need to design and develop an information system(platform) to collect, process and analyze online posts(reddit), tweets(twitter), news(news source) and other info in order to generate the infosphere of specific target city, e.</description>
			<content type="html"><![CDATA[<p>This project is supported by <a href="http://gsdm.u-tokyo.ac.jp/en/">GSDM</a> program. In this project, our 4 team members work together to establsh a new policy tool for municipal governace to improve strategic planning and guide policy-making ahead of actual events. To achive this goal, we need to design and develop an information system(platform) to collect, process and analyze online posts(reddit), tweets(twitter), news(news source) and other info in order to generate the infosphere of specific target city, e.g, Tokyo in Japan. Output: 1. A platform for data collection, processing and visualization 2. A case study of horizon scanning on an urban center 3. A policy report that summarizes the findings of the case study 4. An analysis report on horizon scanning and its liminations. Project URL: <a href="https://github.com/jasonyangshadow/horizonscanning">https://github.com/jasonyangshadow/horizonscanning</a></p>
]]></content>
		</item>
		
		<item>
			<title>crawl and slack notification framework</title>
			<link>https://jasonyangshadow.win/posts/crawl-and-slack-notification-framework-implemented-by-golang/</link>
			<pubDate>Thu, 23 Aug 2018 16:01:42 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/crawl-and-slack-notification-framework-implemented-by-golang/</guid>
			<description>An useful tool for my daily usage I use slack everyday, not only because it is required by our lab, but also it has good compatibilities acrossing different platforms(i.e, Linux, as I use Arch Linux as my main os). Long time ago, I developed notification system for telegram (an App similar to Slack), source code: https://github.com/JasonYangShadow/telegrambot, recently, as I keep working on writing golang code, I searched some documents and found that golang is an extremely good language for developing such notification system.</description>
			<content type="html"><![CDATA[<h3 id="an-useful-tool-for-my-daily-usage">An useful tool for my daily usage</h3>
<p>I use slack everyday, not only because it is required by our lab, but also it has good compatibilities acrossing different platforms(i.e, Linux, as I use Arch Linux as my main os). Long time ago, I developed notification system for telegram (an App similar to Slack), source code: <a href="https://github.com/JasonYangShadow/telegrambot">https://github.com/JasonYangShadow/telegrambot</a>, recently, as I keep working on writing golang code, I searched some documents and found that golang is an extremely good language for developing such notification system. Technicals I want to employ are: 1. AngualarJS for frontstage(presentation part and data handling) 2. Material AngualarJS(CSS framework for uniform css) 2. Beego framework(golang) for backstage development 3. RabbitMQ for message transportation(?not decided yet, maybe zeromq is another good option, lightable with good performance) 4. Mongodb for data storage(used as database) Features: 1. Plugins design and implementation for customized crawl functions 2. Maybe user interface(web console?) At least, using rest api for easy access 3. Message platform for processing requests 4. Distributed deployment ability(docker containers? load balance?) This project is a technical trial for me, employing different latest and popular frameworks to implement demands. Project url: <a href="https://github.com/JasonYangShadow/slackframework">https://github.com/JasonYangShadow/slackframework</a></p>
]]></content>
		</item>
		
		<item>
			<title>Docker registry and docker hub</title>
			<link>https://jasonyangshadow.win/posts/docker-registry-and-docker-hub/</link>
			<pubDate>Wed, 15 Aug 2018 08:43:37 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/docker-registry-and-docker-hub/</guid>
			<description>I am working on developing the feature of pulling/pushing images to docker hub for our lpmx recenlty. Here are the differences between docker registry and docker hub: 1. You can treat docker hub as a powerful public docker images repositroeis focusing on storage, distribuation and share of docker images. 2. While docker registry, an open-source application(or api,standard,protocal), allows your to build your own docker hub without paying for addtional services. It provides you with the ability of hosting and managing your own registry, from which you can serve all the reposirtoreis as private, public and mix between the two 3.</description>
			<content type="html"><![CDATA[<p>I am working on developing the feature of pulling/pushing images to docker hub for our lpmx recenlty. Here are the differences between docker registry and docker hub: 1. You can treat docker hub as a powerful public docker images repositroeis focusing on storage, distribuation and share of docker images. 2. While docker registry, an open-source application(or api,standard,protocal), allows your to build your own docker hub without paying for addtional services. It provides you with the ability of hosting and managing your own registry, from which you can serve all the reposirtoreis as private, public and mix between the two 3. While docker hub has powerful and user friendly GUI, reducing the cost for management and security issues. Maybe I should integrate both apis, as private registries mean a lot for scienticfic reseachers our rootless container, lpmx: <a href="https://github.com/jasonyangshadow/lpmx">https://github.com/jasonyangshadow/lpmx</a></p>
]]></content>
		</item>
		
		<item>
			<title>The first post</title>
			<link>https://jasonyangshadow.win/posts/the-first-post/</link>
			<pubDate>Sat, 11 Aug 2018 12:06:53 +0000</pubDate>
			
			<guid>https://jasonyangshadow.win/posts/the-first-post/</guid>
			<description>Moving to self-host server at last I find that I have a free raspberry pi 3+ machine, so let&amp;rsquo;s build self-host server. Prerequisite: 1. raspberry pi 3+ 2. public ip(if you use uqmobile wifi router, open service by the following guide https://www.uqwimax.jp/plan/wimax/option/global_ip/ Install apache2, mysql, php, wordpress on raspberry pi and configure them properly, you may refer this manual: https://projects.raspberrypi.org/en/projects/lamp-web-server-with-wordpress If ssl is required, using letsencrpyt https://letsencrypt.org/ to automatically generate ssl certificate for the website without charge.</description>
			<content type="html"><![CDATA[<h3 id="moving-to-self-host-server-at-last">Moving to self-host server at last</h3>
<p>I find that I have a free raspberry pi 3+ machine, so let&rsquo;s build self-host server. Prerequisite: 1. raspberry pi 3+ 2. public ip(if you use uqmobile wifi router, open service by the following guide <a href="http://https://www.uqwimax.jp/plan/wimax/option/global_ip/">https://www.uqwimax.jp/plan/wimax/option/global_ip/</a> Install apache2, mysql, php, wordpress on raspberry pi and configure them properly, you may refer this manual: <a href="https://projects.raspberrypi.org/en/projects/lamp-web-server-with-wordpress">https://projects.raspberrypi.org/en/projects/lamp-web-server-with-wordpress</a> If ssl is required, using letsencrpyt <a href="https://letsencrypt.org/">https://letsencrypt.org/</a> to automatically generate ssl certificate for the website without charge. Everything is done, for the dynamic dns issue, please buy domain service and configure it yourself according to the official instruction. For me, I use namecheap service <a href="https://www.namecheap.com/">https://www.namecheap.com/</a> and update my public ip address automatically by manual script running on the server.</p>
]]></content>
		</item>
		
	</channel>
</rss>
