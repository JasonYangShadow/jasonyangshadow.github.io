<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pattern on Xu YANG&#39;s Personal Website</title>
    <link>https://jasonyangshadow.github.io/tags/pattern/</link>
    <description>Recent content in pattern on Xu YANG&#39;s Personal Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 12 Jan 2020 22:41:20 +0000</lastBuildDate>
    
	<atom:link href="https://jasonyangshadow.github.io/tags/pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DP Pattern 3</title>
      <link>https://jasonyangshadow.github.io/posts/dp-pattern-3/</link>
      <pubDate>Sun, 12 Jan 2020 22:41:20 +0000</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/dp-pattern-3/</guid>
      <description>DP Pattern 3 Merging Intervals
Generate problem statement for this pattern
Statement
 Given a set of numbers and find an optimal solution for a problem cosidering the current number and the best you can get from the left and right sides.
 Approach
 Find all optimal solutions for every interval and return the best possible answer
 #from i to j dp[i][j] = dp[i][k] + result[k] + dp[k+1][j] Get the best from the left and right sides and add a solution for the current position.</description>
    </item>
    
    <item>
      <title>DP Pattern 2</title>
      <link>https://jasonyangshadow.github.io/posts/dp-pattern-2/</link>
      <pubDate>Sun, 12 Jan 2020 21:54:51 +0000</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/dp-pattern-2/</guid>
      <description>DP Pattern 2 Distinct Ways
Generate problem statement for this pattern
Statement:
 Given a target and find a nuber of distinct ways to reach the target
 Approach
 Sum all possible ways to reach the current state
 routes[i] = routes[i-1] + routes[i-2], ..., + routes[i-k] https://leetcode.com/problems/climbing-stairs/
class Solution: def climbStairs(self, n: int) -&amp;gt; int: if n == 1: return 1 if n == 2: return 2 res = [0]*n res[0], res[1] = 1, 2 for i in range(2,n): res[i] = res[i-1] + res[i-2] return res[-1] https://leetcode.</description>
    </item>
    
    <item>
      <title>DP pattern 1</title>
      <link>https://jasonyangshadow.github.io/posts/dp-pattern-1/</link>
      <pubDate>Wed, 08 Jan 2020 15:46:36 +0000</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/dp-pattern-1/</guid>
      <description>DP Pattern(1) Dynamic Programming pattern for &amp;ldquo;Minimum(Maximum) cost/path/sum to reach the target&amp;rdquo;
Statement
 Given a target find minimum(Maximum) cost/path/sum to reach the target
 Approach
 Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.
 routes[i] = min(routes[i-1], routes[i-2], ..., routes[i-k]) + cost[i] Examples:
https://leetcode.com/problems/min-cost-climbing-stairs/
class Solution: def minCostClimbingStairs(self, cost: List[int]) -&amp;gt; int: min_0, min_1 = cost[0], cost[1] for c in cost[2:]: min_0, min_1 = min_1, min(min_0, min_1) + c return min(min_0, min_1) https://leetcode.</description>
    </item>
    
  </channel>
</rss>