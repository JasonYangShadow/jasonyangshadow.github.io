<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Xu YANG&#39;s Personal Website</title>
    <link>https://jasonyangshadow.github.io/tags/redis/</link>
    <description>Recent content in Redis on Xu YANG&#39;s Personal Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 21 Jun 2020 08:06:13 +0900</lastBuildDate>
    
	<atom:link href="https://jasonyangshadow.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis Data Structure Other</title>
      <link>https://jasonyangshadow.github.io/posts/redis-data-structure-other/</link>
      <pubDate>Sun, 21 Jun 2020 08:06:13 +0900</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/redis-data-structure-other/</guid>
      <description>Redis list structure is implemented based on bi-direction list.
typedef struct listNode { struct listNode *prev; struct listNode *next; void *value; } listNode; typedef struct listIter { listNode *next; int direction; } listIter; typedef struct list { #the head node listNode *head; #the tail node listNode *tail; void *(*dup)(void *ptr); void (*free)(void *ptr); int (*match)(void *ptr, void *key); #the length of the list unsigned long len; } list; Redis dictionary structure is implemented in dict.</description>
    </item>
    
    <item>
      <title>Redis Data Structure-String</title>
      <link>https://jasonyangshadow.github.io/posts/redis-data-structure-string/</link>
      <pubDate>Thu, 14 Nov 2019 22:00:48 +0000</pubDate>
      
      <guid>https://jasonyangshadow.github.io/posts/redis-data-structure-string/</guid>
      <description>Redis uses its own sds(simple dynamic string) rather than traditional string array because of security and performance requirements.
The definition of sds structures: (sds.h/sds.c)
struct __attribute__ ((__packed__)) sdshdr5 { unsigned char flags; /* 3 lsb of type, and 5 msb of string length */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr8 { uint8_t len; /* used */ uint8_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr16 { uint16_t len; /* used */ uint16_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr32 { uint32_t len; /* used */ uint32_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr64 { uint64_t len; /* used */ uint64_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; There are 5 types of sds definitions, but only 4 of them are used in redis, i.</description>
    </item>
    
  </channel>
</rss>